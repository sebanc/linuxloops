#!/usr/bin/env bash

usage()
{
cat << USAGE
LinuxLoops: Adaptable / declarative linux distribution installer.
Usage: bash \${HOME}/bin/linuxloops -distro <distribution name> -ver <distribution version> -env <environment name> -dst <disk name or disk image path>
-distro, --distribution <distribution name>		(Distribution to install)
-ver, --version <version name>				(Distribution version to install)
-env, --environment <environment name>			(Environment to install)
-dst, --destination <disk name or disk image path>	(e.g. /dev/sda or /ubuntu.img)
-s, --size <total install size>				(number in GB, minimum 14GB)
-z, --swapsize <swap size>				(number in GB)
-b, --btrfs						(Use btrfs for the root filesystem)
-r, --rootfs-compression				(Enable standard btrfs compression, implies -b)
-e, --encrypt						(Encrypt the root filesystem)
-a, --autologin						(Enable user autologin)
    --efi-name						(EFI partition name)
    --efi-mountoptions					(EFI partition specific mountoptions)
    --boot-name						(Boot partition name)
    --boot-mountoptions					(Boot partition specific mountoptions)
    --root-name						(Root partition name)
    --root-mountoptions					(Root partition specific mountoptions)
-A, --add-partition <partition details>			(Add a partition according to the below format:
							<mountpoint>*<name>*<fstype>*<mountoptions>*<size(in GB)>*<encryption>
							ex: /home*Home*ext4*noatime,discard*20*Yes)
-H, --hostname						(Provide a specific hostname)
-L, --locale <locale>					(specify locale to be used, by default "en_US")
-K, --keymap <keymap>					(specify keymap to be used, by default "us")
-T, --timezone <timezone>				(specify timezone to be used, by default "UTC")
-n, --nvidia						(Install nvidia drivers)
-S, --surface						(Add patches for Surface devices from github.com/linux-surface)
-c, --custom-packages					(list of additional packages to be installed - space separated)
-C, --custom-script					(bash script that should be run at the end of the install process)
-k, --kernel-parameters					(specific kernel parameters to be applied - space separated)
-m, --custom-mirror <mirror details>			(Add a custom mirror according to the below format:
							<repository>*<mirror>
							ex: Arch*https://mirrors.kernel.org/archlinux)
-p, --user-password-for-encryption			(Use user account password for encryption)
-g, --grub-hide						(Hide the GRUB Bootloader)
-G, --generate-declarative-config <config_file_path>	(Generate a declarative configuration file)
-d, --apply-declarative-config <config_file_path>	(Use a declarative configuration file)
-l, --list						(List available distributions and environments)
-lb, --list-btrfs					(Confirms if btrfs is supported for chosen distribution/version)
-ld, --list-distributions				(List available distributions)
-le, --list-environments				(List available environments for chosen distribution/version)
-ll, --list-locales					(List available locales)
-lk, --list-keymaps					(List available keymaps)
-ln, --list-nvidia					(Confirms if nvidia proprietary driver is supported for chosen distribution/version)
-ls, --list-surface					(Confirms if Surface devices patches are supported for chosen distribution/version)
-lt, --list-timezones					(List available timezones)
-lv, --list-versions					(List available versions for chosen distribution)
-h, --help						(Display this menu)
USAGE
}

available_distributions=( "AlmaLinux" "Arch" "Artix" "Bazzite" "BlendOS" "BlissOS" "Brunch" "CachyOS" "ChromeOS-Flex" "Debian" "Devuan" "Elementary" "Fedora" "Fedora-Atomic" "FoxFlake" "Gentoo" "GLF-OS" "Kali" "KDE" "Linuxmint" "LMDE" "Manjaro" "MX" "Neon" "NixOS" "Nobara" "OpenSUSE" "Parrot" "PikaOS" "Pop" "Proxmox" "Qubes" "RockyLinux" "SteamOS" "Tails" "Ubuntu" "Void" "Zorin" )

distribution_parameters()
{
case "${distribution}" in
	'AlmaLinux')
		available_versions=( "9" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="9"
		;;
	'Arch')
		available_versions=( "Stable" "Testing" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Stable"
		;;
	'Artix')
		available_versions=( "Stable/Openrc" "Stable/Runit" "Stable/S6" "Stable/Dinit" "Testing/Openrc" "Testing/Runit" "Testing/S6" "Testing/Dinit" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Stable/Openrc"
		;;
	'Bazzite')
		available_versions=( "Stable" "Testing" "Unstable" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Stable"
		;;
	'BlendOS')
		available_versions=( "v4" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="v4"
		;;
	'BlissOS')
		available_versions=( "15" "16" )
		available_versions_longname=( "15_(Stable)" "16_(Beta)" )
		default_version="15"
		;;
	'Brunch')
		available_versions=( "Stable" "Unstable" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Stable"
		;;
	'CachyOS')
		available_versions=( "x86-64" "x86-64-v3" "x86-64-v4" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="x86-64"
		;;
	'ChromeOS-Flex')
		available_versions=( "Stable" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Stable"
		;;
	'Debian')
		available_versions=( "Trixie" "Testing" "Unstable" )
		available_versions_longname=( "Trixie_(Stable)" "Testing" "Unstable" )
		default_version="Trixie"
		;;
	'Devuan')
		available_versions=( "Daedalus" "Testing" )
		available_versions_longname=( "Daedalus_(Stable)" "Testing" )
		default_version="Daedalus"
		;;
	'Elementary')
		available_versions=( "8" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="8"
		;;
	'Fedora')
		available_versions=( "42" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="42"
		;;
	'Fedora-Atomic')
		available_versions=( "42" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="42"
		;;
	'FoxFlake')
		available_versions=( "Stable" "Unstable" "Stable-Test" "Unstable-Test" "Dev" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Stable"
		;;
	'Gentoo')
		available_versions=( "23/Openrc" "23/Systemd" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="23/Openrc"
		;;
	'GLF-OS')
		available_versions=( "Stable" "Rolling" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Stable"
		;;
	'Kali')
		available_versions=( "Rolling" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Rolling"
		;;
	'KDE')
		available_versions=( "Rolling" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Rolling"
		;;
	'Linuxmint')
		available_versions=( "Xia" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Xia"
		;;
	'LMDE')
		available_versions=( "Faye" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Faye"
		;;
	'Manjaro')
		available_versions=( "Stable" "Testing" "Unstable" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Stable"
		;;
	'MX')
		available_versions=( "23" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="23"
		;;
	'Neon')
		available_versions=( "User" "Testing" )
		available_versions_longname=( "User_(Stable)" "Testing" )
		default_version="User"
		;;
	'NixOS')
		available_versions=( "25.05" "Unstable" )
		available_versions_longname=( "25.05_(Stable)" "Unstable" )
		default_version="25.05"
		;;
	'Nobara')
		available_versions=( "Rolling" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Rolling"
		;;
	'OpenSUSE')
		available_versions=( "Leap/15.6" "Slowroll" "Tumbleweed" )
		available_versions_longname=( "Leap/15.6" "Slowroll" "Tumbleweed" )
		default_version="Leap/15.6"
		;;
	'Parrot')
		available_versions=( "Lory" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Lory"
		;;
	'PikaOS')
		available_versions=( "Nest" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Nest"
		;;
	'Pop')
		available_versions=( "22.04" "24.04" )
		available_versions_longname=( "22.04_(Stable)" "24.04_(Testing)" )
		default_version="22.04"
		;;
	'Proxmox')
		available_versions=( "VE9" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="VE9"
		;;
	'Qubes')
		available_versions=( "4.2.4" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="4.2.4"
		;;
	'RockyLinux')
		available_versions=( "9" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="9"
		;;
	'SteamOS')
		available_versions=( "Main" "Staging" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Main"
		;;
	'Tails')
		available_versions=( "Stable" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Stable"
		;;
	'Ubuntu')
		available_versions=( "24.04" "25.04" )
		available_versions_longname=( "24.04_(LTS)" "25.04_(Interim)" )
		default_version="24.04"
		;;
	'Void')
		available_versions=( "Current" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="Current"
		;;
	'Zorin')
		available_versions=( "17" )
		available_versions_longname=( "${available_versions[@]}" )
		default_version="17"
		;;
	*)
		echo "Distribution ${distribution} is not supported."
		exit 1
		;;
esac
if [ -z "${version}" ]; then version="${default_version}"; fi
}

distribution_version_parameters()
{
chroot_function="${distribution}"
case "${distribution}" in
	'AlmaLinux')
		almalinux_version="${version}"
		available_environments=( "None" "Full" )
		bootloader_id="almalinux"
		bootloader_name="shimx64.efi"
		bootstrap="lxc almalinux ${version} default"
		btrfs_supported="No"
		mirrors_supported=( "AlmaLinux" )
		nvidia_supported="No"
		surface_supported="No"
		;;
	'Arch')
		arch_version="${version}"
		available_environments=( "None" "Budgie" "Cinnamon" "Cosmic" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="arch"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		chroot_function="${distribution}-${version}"
		mirrors_supported=( "Arch" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		;;
	'Artix')
		artix_version="${version}"
		if [ "${version}" == "Stable/S6" ] || [ "${version}" == "Testing/S6" ]; then
			available_environments=( "None" "Budgie" "Cinnamon" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		else
			available_environments=( "None" "Budgie" "Cinnamon" "Cosmic" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		fi
		bootloader_id="artix"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		chroot_function="${distribution}-$(echo ${version} | sed 's@/@-@g')"
		mirrors_supported=( "Arch" "Artix" )
		nvidia_supported="Yes"
		surface_supported="No"
		;;
	'Bazzite')
		available_environments=( "Bazzite" "Bazzite/Nvidia" "Bazzite/Nvidia/Open" "Bazzite/Gnome" "Bazzite/Gnome/Nvidia" "Bazzite/Gnome/Nvidia/Open" "Bazzite/Deck" "Bazzite/Deck/Gnome" )
		bazzite_version="${version}"
		bootloader_id="fedora"
		bootloader_name="shimx64.efi"
		bootstrap="lxc fedora 42 default"
		btrfs_supported="Yes"
		fedora_version="42"
		mirrors_supported=( "Fedora-Atomic" )
		nvidia_supported="No"
		surface_supported="No"
		if [ -z "${chromeos}" ] && [ -z "${brunch}" ] && [ -z "${github}" ]; then systemd_init="Yes"; fi
		;;
	'BlendOS')
		available_environments=( "None" "Cinnamon" "Gnome" "Lxqt" "Mate" "Plasma" "Xfce" )
		blendos_version="${version}"
		bootloader_id="blendos"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		mirrors_supported=( "BlendOS" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		;;
	'BlissOS')
		available_environments=( "Gapps/Generic" "Gapps/Go" "Gapps/Surface" "FOSS/Generic" "FOSS/Go" "FOSS/Surface" )
		blissos_version="${version}"
		bootloader_id="boot"
		bootloader_name="bootx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="No"
		mirrors_supported=()
		nvidia_supported="No"
		surface_supported="No"
		;;
	'Brunch')
		available_environments=( "Bobba" "Gumboz" "Jinlon" "Reven" "Shyvana" "Voxel" )
		bootloader_id="boot"
		bootloader_name="bootx64.efi"
		bootstrap="lxc archlinux current default"
		brunch_version="${version}"
		btrfs_supported="No"
		mirrors_supported=()
		nvidia_supported="No"
		surface_supported="No"
		;;
	'CachyOS')
		available_environments=( "None" "Budgie" "Cinnamon" "Cosmic" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="cachyos"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		cachyos_version="${version}"
		mirrors_supported=( "Arch" "CachyOS" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		;;
	'ChromeOS-Flex')
		available_environments=( "Standard" "Devmode" )
		bootloader_id="boot"
		bootloader_name="bootx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="No"
		chromeos_flex_version="${version}"
		mirrors_supported=()
		nvidia_supported="No"
		surface_supported="No"
		;;
	'Debian')
		available_environments=( "None" "Budgie" "Cinnamon" "Cinnamon/Full" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="debian"
		bootloader_name="shimx64.efi"
		bootstrap="lxc debian trixie default"
		btrfs_supported="Yes"
		debian_version="${version}"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "Debian" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		case "${version}" in
			'Trixie')
				chroot_function="${distribution}-Stable"
				;;
			'Testing')
				chroot_function="${distribution}-Testing"
				;;
			'Unstable')
				chroot_function="${distribution}-Unstable"
				;;
		esac
		;;
	'Devuan')
		available_environments=( "None" "Budgie" "Cinnamon" "Cinnamon/Full" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="debian"
		bootloader_name="shimx64.efi"
		bootstrap="lxc devuan daedalus default"
		btrfs_supported="Yes"
		devuan_version="${version}"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "Devuan" )
		nvidia_supported="Yes"
		surface_supported="No"
		case "${version}" in
			'Daedalus')
				chroot_function="${distribution}-Stable"
				;;
			'Testing')
				chroot_function="${distribution}-Testing"
				;;
		esac
		;;
	'Elementary')
		available_environments=( "None" "Full" )
		bootloader_id="ubuntu"
		bootloader_name="shimx64.efi"
		bootstrap="lxc ubuntu noble default"
		btrfs_supported="Yes"
		elementary_version="${version}"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "Ubuntu" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		ubuntu_version="Noble"
		;;
	'Fedora')
		available_environments=( "None" "Budgie" "Budgie/Full" "Cinnamon" "Cinnamon/Full" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxqt" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="fedora"
		bootloader_name="shimx64.efi"
		bootstrap="lxc fedora 42 default"
		btrfs_supported="Yes"
		fedora_version="${version}"
		mirrors_supported=( "Fedora" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		;;
	'Fedora-Atomic')
		available_environments=( "Kinoite" "Onyx" "Sericea" "Silverblue" )
		bootloader_id="fedora"
		bootloader_name="shimx64.efi"
		bootstrap="lxc fedora 42 default"
		btrfs_supported="Yes"
		fedora_version="${version}"
		mirrors_supported=( "Fedora-Atomic" )
		nvidia_supported="Yes"
		surface_supported="No"
		if [ -z "${chromeos}" ] && [ -z "${brunch}" ] && [ -z "${github}" ]; then systemd_init="Yes"; fi
		;;
	'FoxFlake')
		available_environments=( "Gnome/Minimal" "Gnome/Standard" "Gnome/Gaming" "Gnome/Studio" "Gnome/Standard+Gaming" "Gnome/Standard+Studio" "Gnome/Gaming+Studio" "Gnome/Full" "Plasma/Minimal" "Plasma/Standard" "Plasma/Gaming" "Plasma/Studio" "Plasma/Standard+Gaming" "Plasma/Standard+Studio" "Plasma/Gaming+Studio" "Plasma/Full" )
		bootloader_id="foxflake"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		chroot_function="${distribution}"
		foxflake_version="${version}"
		mirrors_supported=()
		if [ "${version}" == "Stable" ] || [ "${version}" == "Stable-Test" ]; then
			nixos_version="25.05"
		else
			nixos_version="Unstable"
		fi
		nvidia_supported="Yes"
		surface_supported="No"
		;;
	'Gentoo')
		available_environments=( "None" "Cinnamon" "Enlightenment" "Gnome" "i3" "Lxqt" "Mate" "Plasma" "Xfce" )
		bootloader_id="gentoo"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		chroot_function="${distribution}-$(echo ${version} | cut -d'/' -f2)"
		gentoo_version="${version}"
		mirrors_supported=( "Gentoo" )
		nvidia_supported="Yes"
		surface_supported="No"
		;;
	'GLF-OS')
		available_environments=( "Gnome/Mini" "Gnome/Standard" "Plasma/Mini" "Plasma/Standard" )
		bootloader_id="glfos"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		chroot_function="${distribution}"
		glfos_version="${version}"
		mirrors_supported=()
		if [ "${version}" == "Stable" ]; then
			nixos_version="25.05"
		else
			nixos_version="Unstable"
		fi
		nvidia_supported="Yes"
		surface_supported="No"
		;;
	'Kali')
		available_environments=( "None" "Cinnamon" "Cinnamon/Full" "Gnome" "Gnome/Full" "i3" "i3/Full" "Lxde" "Lxde/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="debian"
		bootloader_name="grubx64.efi"
		bootstrap="lxc debian trixie default"
		btrfs_supported="Yes"
		grub_disable_recordfail="Yes"
		kali_version="${version}"
		mirrors_supported=( "Kali" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		;;
	'KDE')
		arch_version="Stable"
		available_environments=( "None" "Plasma/Full" )
		bootloader_id="kde"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		chroot_function="${distribution}"
		mirrors_supported=( "Arch" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		;;
	'Linuxmint')
		available_environments=( "None" "Cinnamon" "Cinnamon/Full" "Mate" "Mate/Full" "Xfce" "Xfce/Full" )
		bootloader_id="ubuntu"
		bootloader_name="shimx64.efi"
		bootstrap="lxc ubuntu noble default"
		btrfs_supported="Yes"
		grub_disable_recordfail="Yes"
		linuxmint_version="${version}"
		mirrors_supported=( "Ubuntu" "Linuxmint" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		ubuntu_version="Noble"
		;;
	'LMDE')
		available_environments=( "None" "Cinnamon" "Cinnamon/Full" )
		bootloader_id="debian"
		bootloader_name="shimx64.efi"
		bootstrap="lxc debian bookworm default"
		btrfs_supported="Yes"
		debian_version="Bookworm"
		grub_disable_recordfail="Yes"
		linuxmint_version="${version}"
		lmde_version="${version}"
		mirrors_supported=( "Debian" "Linuxmint" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		;;
	'Manjaro')
		available_environments=( "None" "Budgie" "Cinnamon" "Cosmic" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="manjaro"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		chroot_function="${distribution}-${version}"
		manjaro_version="${version}"
		mirrors_supported=( "Manjaro" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		;;
	'MX')
		available_environments=( "None" "Budgie" "Cinnamon" "Cinnamon/Full" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="debian"
		bootloader_name="shimx64.efi"
		bootstrap="lxc debian bookworm default"
		btrfs_supported="Yes"
		debian_version="Bookworm"
		grub_disable_recordfail="Yes"
		mx_version="${version}"
		mirrors_supported=( "Debian" "MX" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		;;
	'Neon')
		available_environments=( "None" "Essentials" "Full" )
		bootloader_id="ubuntu"
		bootloader_name="shimx64.efi"
		bootstrap="lxc ubuntu noble default"
		btrfs_supported="Yes"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "Ubuntu" "Neon" )
		neon_version="${version}"
		nvidia_supported="Yes"
		surface_supported="Yes"
		ubuntu_release="24.04"
		ubuntu_version="Noble"
		;;
	'NixOS')
		available_environments=( "None" "Budgie/Full" "Cinnamon/Full" "Gnome/Full" "i3/Full" "Lxqt/Full" "Mate/Full" "Pantheon/Full" "Plasma/Full" "Xfce/Full" )
		bootloader_id="nixos"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		chroot_function="${distribution}-${version}"
		mirrors_supported=()
		nixos_version="${version}"
		nvidia_supported="Yes"
		surface_supported="No"
		;;
	'Nobara')
	        version="42"
		available_environments=( "None" "Gnome" "Gnome/Full" "Nobara" "Nobara/Full" "Plasma" "Plasma/Full" "SteamDeck" "SteamDeck/Full" )
		bootloader_id="fedora"
		bootloader_name="shimx64.efi"
		bootstrap="lxc fedora ${version} default"
		btrfs_supported="Yes"
		mirrors_supported=( "Fedora" "Nobara" )
		nobara_version="${version}"
		nvidia_supported="Yes"
		surface_supported="No"
		;;
	'OpenSUSE')
		available_environments=( "None" "Budgie" "Budgie/Full" "Cinnamon" "Cinnamon/Full" "Enlightenment" "Enlightenment/Full" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="opensuse"
		bootloader_name="shim.efi"
		btrfs_supported="Yes"
		chroot_function="${distribution}-$(echo ${version} | sed 's@/@-@g')"
		mirrors_supported=( "OpenSUSE" )
		nvidia_supported="Yes"
		opensuse_version="${version}"
		surface_supported="No"
		case "${version}" in
			'Leap/15.6')
				bootstrap="rootfs-xz https://slc-mirror.opensuse.org/distribution/leap/15.6/appliances/opensuse-leap-image.x86_64-lxc.tar.xz"
				gpg_check_extension=".sha256sum"
				master_key="AD485664E901B867051AB15F35A2F86E29B700A4"
				rootfs_sha256sum="https://slc-mirror.opensuse.org/distribution/leap/15.6/appliances/opensuse-leap-image.x86_64-lxc.tar.xz.sha256"
				rootfs_signature="https://slc-mirror.opensuse.org/distribution/leap/15.6/appliances/opensuse-leap-image.x86_64-lxc.tar.xz.sha256.asc"
				;;
			*)
				bootstrap="rootfs-xz https://slc-mirror.opensuse.org/tumbleweed/appliances/opensuse-tumbleweed-image.x86_64-lxc.tar.xz"
				gpg_check_extension=".sha256sum"
				master_key="AD485664E901B867051AB15F35A2F86E29B700A4"
				rootfs_sha256sum="https://slc-mirror.opensuse.org/tumbleweed/appliances/opensuse-tumbleweed-image.x86_64-lxc.tar.xz.sha256"
				rootfs_signature="https://slc-mirror.opensuse.org/tumbleweed/appliances/opensuse-tumbleweed-image.x86_64-lxc.tar.xz.sha256.asc"
				;;
		esac
		;;
	'Parrot')
		available_environments=( "None" "Budgie" "Budgie/Full" "Cinnamon" "Cinnamon/Full" "Gnome" "Gnome/Full" "i3" "i3/Full" "Lxde" "Lxde/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="debian"
		bootloader_name="grubx64.efi"
		bootstrap="lxc debian trixie default"
		btrfs_supported="Yes"
		debian_version="Bookworm"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "Parrot" )
		nvidia_supported="Yes"
		parrot_version="${version}"
		surface_supported="No"
		;;
	'PikaOS')
		available_environments=( "None" "Cosmic" "Cosmic/Full" "Gnome" "Gnome/Full" "Hyprland" "Hyprland/Full" "Plasma" "Plasma/Full" )
		bootloader_id="debian"
		bootloader_name="grubx64.efi"
		bootstrap="lxc debian trixie default"
		btrfs_supported="Yes"
		debian_version="Sid"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "PikaOS" )
		nvidia_supported="Yes"
		pikaos_version="${version}"
		surface_supported="No"
		;;
	'Pop')
		available_environments=( "None" "Full" )
		bootloader_id="ubuntu"
		bootloader_name="shimx64.efi"
		bootstrap="lxc ubuntu jammy default"
		btrfs_supported="Yes"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "Pop" "Ubuntu" )
		nvidia_supported="Yes"
		pop_version="${version}"
		surface_supported="Yes"
		ubuntu_version="Jammy"
		case "${version}" in
			'22.04')
				ubuntu_version="Jammy"
				;;
			'24.04')
				ubuntu_version="Noble"
				;;
		esac
		;;
	'Proxmox')
		available_environments=( "None" "Budgie" "Cinnamon" "Cinnamon/Full" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" "Xfce/Full" )
		bootloader_id="debian"
		bootloader_name="shimx64.efi"
		bootstrap="lxc debian trixie default"
		btrfs_supported="Yes"
		debian_version="Trixie"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "Debian" "Proxmox" )
		nvidia_supported="Yes"
		proxmox_version="${version}"
		surface_supported="Yes"
		;;
	'Qubes')
		available_environments=( "Full" )
		bootloader_id="qubes"
		bootloader_name="grubx64.efi"
		bootstrap="iso https://mirrors.edge.kernel.org/qubes/iso/Qubes-R${version}-x86_64.iso /images/install.img /LiveOS/rootfs.img"
		btrfs_supported="Yes"
		iso_sha256sum="https://mirrors.edge.kernel.org/qubes/iso/Qubes-R${version}-x86_64.iso.DIGESTS"
		iso_signature="https://mirrors.edge.kernel.org/qubes/iso/Qubes-R${version}-x86_64.iso.asc"
		master_key="9C884DF3F81064A569A4A9FAE022E58F8E34D89F"
		mirrors_supported=( "Fedora" "Qubes" )
		nvidia_supported="No"
		qubes_version="${version}"
		surface_supported="No"
		;;
	'RockyLinux')
		available_environments=( "None" "Full" )
		bootloader_id="rocky"
		bootloader_name="shimx64.efi"
		bootstrap="lxc rockylinux ${version} default"
		btrfs_supported="No"
		mirrors_supported=( "RockyLinux" )
		nvidia_supported="No"
		rockylinux_version="${version}"
		surface_supported="No"
		;;
	'SteamOS')
		available_environments=( "None" "Desktop" "Gamescope" )
		bootloader_id="steamos"
		bootloader_name="shimx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="Yes"
		mirrors_supported=( "SteamOS" )
		nvidia_supported="Yes"
		steamos_version="${version}"
		surface_supported="No"
		;;
	'Tails')
		available_environments=( "Full" )
		bootloader_id="boot"
		bootloader_name="bootx64.efi"
		bootstrap="lxc archlinux current default"
		btrfs_supported="No"
		mirrors_supported=()
		nvidia_supported="No"
		surface_supported="No"
		tails_version="${version}"
		;;
	'Ubuntu')
		available_environments=( "None" "Budgie" "Budgie/Full" "Cinnamon" "Cinnamon/Full" "Enlightenment" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxde/Full" "Lxqt" "Lxqt/Full" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Studio/Full" "Ubuntu" "Ubuntu/Full" "Unity" "Unity/Full" "Xfce" "Xfce/Full" )
		bootloader_id="ubuntu"
		bootloader_name="shimx64.efi"
		bootstrap="lxc ubuntu noble default"
		btrfs_supported="Yes"
		chroot_function="${distribution}-${version}"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "Ubuntu" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		if [ -z "${chromeos}" ] && [ -z "${brunch}" ] && [ -z "${github}" ]; then systemd_init="Yes"; fi
		case "${version}" in
			'24.04')
				ubuntu_version="Noble"
				;;
			'25.04')
				ubuntu_version="Plucky"
				;;
		esac
		;;
	'Void')
		available_environments=( "None" "Cinnamon" "Gnome" "Gnome/Full" "i3" "Lxde" "Lxqt" "Mate" "Mate/Full" "Plasma" "Plasma/Full" "Xfce" )
		bootloader_id="voidlinux"
		bootloader_name="grubx64.efi"
		bootstrap="lxc voidlinux current default"
		btrfs_supported="Yes"
		mirrors_supported=( "Void" )
		nvidia_supported="Yes"
		surface_supported="No"
		void_version="${version}"
		;;
	'Zorin')
		available_environments=( "None" "Core" "Core/Windows_apps_support" "Education" "Education/Windows_apps_support" )
		bootloader_id="ubuntu"
		bootloader_name="shimx64.efi"
		bootstrap="lxc ubuntu jammy default"
		btrfs_supported="Yes"
		grub_disable_recordfail="Yes"
		mirrors_supported=( "Ubuntu" )
		nvidia_supported="Yes"
		surface_supported="Yes"
		if [ -z "${chromeos}" ] && [ -z "${brunch}" ] && [ -z "${github}" ]; then systemd_init="Yes"; fi
		ubuntu_version="Jammy"
		zorin_version="${version}"
		;;
	*)
		echo "Version ${version} is not supported."
		exit 1
		;;
esac
}

available_locales=(
"TRUE" "en_US" "American English, United States"
"FALSE" "aa_DJ" "Afar, Djibouti"
"FALSE" "aa_ER" "Afar, Eritrea"
"FALSE" "aa_ET" "Afar, Ethiopia"
"FALSE" "ab_GE" "Abkhazian, Georgia"
"FALSE" "af_ZA" "Afrikaans, South Africa"
"FALSE" "agr_PE" "Aguaruna, Peru"
"FALSE" "ak_GH" "Akan, Ghana"
"FALSE" "am_ET" "Amharic, Ethiopia"
"FALSE" "an_ES" "Aragonese, Spain"
"FALSE" "anp_IN" "Angika, India"
"FALSE" "ar_AE" "Arabic, United Arab Emirates"
"FALSE" "ar_BH" "Arabic, Bahrain"
"FALSE" "ar_DZ" "Arabic, Algeria"
"FALSE" "ar_EG" "Arabic, Egypt"
"FALSE" "ar_IN" "Arabic, India"
"FALSE" "ar_IQ" "Arabic, Iraq"
"FALSE" "ar_JO" "Arabic, Jordan"
"FALSE" "ar_KW" "Arabic, Kuwait"
"FALSE" "ar_LB" "Arabic, Lebanon"
"FALSE" "ar_LY" "Arabic, Libya"
"FALSE" "ar_MA" "Arabic, Morocco"
"FALSE" "ar_OM" "Arabic, Oman"
"FALSE" "ar_QA" "Arabic, Qatar"
"FALSE" "ar_SA" "Arabic, Saudi Arabia"
"FALSE" "ar_SD" "Arabic, Sudan"
"FALSE" "ar_SS" "Arabic, South Sudan"
"FALSE" "ar_SY" "Arabic, Syria"
"FALSE" "ar_TN" "Arabic, Tunisia"
"FALSE" "ar_YE" "Arabic, Yemen"
"FALSE" "as_IN" "Assamese, India"
"FALSE" "ast_ES" "Asturian, Spain"
"FALSE" "ayc_PE" "Aymara, Peru"
"FALSE" "az_AZ" "Azerbaijani, Azerbaijan"
"FALSE" "az_IR" "South Azerbaijani, Iran"
"FALSE" "be_BY" "Belarusian, Belarus"
"FALSE" "bem_ZM" "Bemba, Zambia"
"FALSE" "ber_DZ" "Berber, Algeria"
"FALSE" "ber_MA" "Berber, Morocco"
"FALSE" "bg_BG" "Bulgarian, Bulgaria"
"FALSE" "bhb_IN" "Bhili, India"
"FALSE" "bho_IN" "Bhojpuri, India"
"FALSE" "bho_NP" "Bhojpuri, Nepal"
"FALSE" "bi_VU" "Bislama, Vanuatu"
"FALSE" "bn_BD" "Bangla, Bangladesh"
"FALSE" "bn_IN" "Bangla, India"
"FALSE" "bo_CN" "Tibetan, China"
"FALSE" "bo_IN" "Tibetan, India"
"FALSE" "br_FR" "Breton, France"
"FALSE" "brx_IN" "Bodo, India"
"FALSE" "bs_BA" "Bosnian, Bosnia & Herzegovina"
"FALSE" "byn_ER" "Blin, Eritrea"
"FALSE" "ca_AD" "Catalan, Andorra"
"FALSE" "ca_ES" "Catalan, Spain"
"FALSE" "ca_FR" "Catalan, France"
"FALSE" "ca_IT" "Catalan, Italy"
"FALSE" "ce_RU" "Chechen, Russia"
"FALSE" "chr_US" "Cherokee, United States"
"FALSE" "ckb_IQ" "Central Kurdish, Iraq"
"FALSE" "cmn_TW" "Mandarin Chinese, Taiwan"
"FALSE" "crh_UA" "Crimean Tatar, Ukraine"
"FALSE" "csb_PL" "Kashubian, Poland"
"FALSE" "cs_CZ" "Czech, Czech Republic"
"FALSE" "cv_RU" "Chuvash, Russia"
"FALSE" "cy_GB" "Welsh, United Kingdom"
"FALSE" "da_DK" "Danish, Denmark"
"FALSE" "de_AT" "Austrian German, Austria"
"FALSE" "de_BE" "German, Belgium"
"FALSE" "de_CH" "Swiss High German, Switzerland"
"FALSE" "de_DE" "German, Germany"
"FALSE" "de_IT" "German, Italy"
"FALSE" "de_LI" "German, Liechtenstein"
"FALSE" "de_LU" "German, Luxembourg"
"FALSE" "doi_IN" "Dogri, India"
"FALSE" "dsb_DE" "Lower Sorbian, Germany"
"FALSE" "dv_MV" "Divehi, Maldives"
"FALSE" "dz_BT" "Dzongkha, Bhutan"
"FALSE" "el_CY" "Greek, Cyprus"
"FALSE" "el_GR" "Greek, Greece"
"FALSE" "en_AG" "English, Antigua & Barbuda"
"FALSE" "en_AU" "Australian English, Australia"
"FALSE" "en_BW" "English, Botswana"
"FALSE" "en_CA" "Canadian English, Canada"
"FALSE" "en_DK" "English, Denmark"
"FALSE" "en_GB" "British English, United Kingdom"
"FALSE" "en_HK" "English, Hong Kong SAR China"
"FALSE" "en_IE" "English, Ireland"
"FALSE" "en_IL" "English, Israel"
"FALSE" "en_IN" "English, India"
"FALSE" "en_NG" "English, Nigeria"
"FALSE" "en_NZ" "English, New Zealand"
"FALSE" "en_PH" "English, Philippines"
"FALSE" "en_SC" "English, Seychelles"
"FALSE" "en_SG" "English, Singapore"
"FALSE" "en_ZA" "English, South Africa"
"FALSE" "en_ZM" "English, Zambia"
"FALSE" "en_ZW" "English, Zimbabwe"
"FALSE" "es_AR" "Spanish, Argentina"
"FALSE" "es_BO" "Spanish, Bolivia"
"FALSE" "es_CL" "Spanish, Chile"
"FALSE" "es_CO" "Spanish, Colombia"
"FALSE" "es_CR" "Spanish, Costa Rica"
"FALSE" "es_CU" "Spanish, Cuba"
"FALSE" "es_DO" "Spanish, Dominican Republic"
"FALSE" "es_EC" "Spanish, Ecuador"
"FALSE" "es_ES" "European Spanish, Spain"
"FALSE" "es_GT" "Spanish, Guatemala"
"FALSE" "es_HN" "Spanish, Honduras"
"FALSE" "es_MX" "Mexican Spanish, Mexico"
"FALSE" "es_NI" "Spanish, Nicaragua"
"FALSE" "es_PA" "Spanish, Panama"
"FALSE" "es_PE" "Spanish, Peru"
"FALSE" "es_PR" "Spanish, Puerto Rico"
"FALSE" "es_PY" "Spanish, Paraguay"
"FALSE" "es_SV" "Spanish, El Salvador"
"FALSE" "es_UY" "Spanish, Uruguay"
"FALSE" "es_VE" "Spanish, Venezuela"
"FALSE" "et_EE" "Estonian, Estonia"
"FALSE" "eu_ES" "Basque, Spain"
"FALSE" "fa_IR" "Persian, Iran"
"FALSE" "ff_SN" "Fulah, Senegal"
"FALSE" "fi_FI" "Finnish, Finland"
"FALSE" "fil_PH" "Filipino, Philippines"
"FALSE" "fo_FO" "Faroese, Faroe Islands"
"FALSE" "fr_BE" "French, Belgium"
"FALSE" "fr_CA" "Canadian French, Canada"
"FALSE" "fr_CH" "Swiss French, Switzerland"
"FALSE" "fr_FR" "French, France"
"FALSE" "fr_LU" "French, Luxembourg"
"FALSE" "fur_IT" "Friulian, Italy"
"FALSE" "fy_DE" "Western Frisian, Germany"
"FALSE" "fy_NL" "Western Frisian, Netherlands"
"FALSE" "ga_IE" "Irish, Ireland"
"FALSE" "gd_GB" "Scottish Gaelic, United Kingdom"
"FALSE" "gez_ER" "Geez, Eritrea"
"FALSE" "gez_ET" "Geez, Ethiopia"
"FALSE" "gl_ES" "Galician, Spain"
"FALSE" "gu_IN" "Gujarati, India"
"FALSE" "gv_GB" "Manx, United Kingdom"
"FALSE" "hak_TW" "Hakka Chinese, Taiwan"
"FALSE" "ha_NG" "Hausa, Nigeria"
"FALSE" "he_IL" "Hebrew, Israel"
"FALSE" "hif_FJ" "Fiji Hindi, Fiji"
"FALSE" "hi_IN" "Hindi, India"
"FALSE" "hne_IN" "Chhattisgarhi, India"
"FALSE" "hr_HR" "Croatian, Croatia"
"FALSE" "hsb_DE" "Upper Sorbian, Germany"
"FALSE" "ht_HT" "Haitian Creole, Haiti"
"FALSE" "hu_HU" "Hungarian, Hungary"
"FALSE" "hy_AM" "Armenian, Armenia"
"FALSE" "ia_FR" "Interlingua, France"
"FALSE" "id_ID" "Indonesian, Indonesia"
"FALSE" "ig_NG" "Igbo, Nigeria"
"FALSE" "ik_CA" "Inupiaq, Canada"
"FALSE" "is_IS" "Icelandic, Iceland"
"FALSE" "it_CH" "Italian, Switzerland"
"FALSE" "it_IT" "Italian, Italy"
"FALSE" "iu_CA" "Inuktitut, Canada"
"FALSE" "ja_JP" "Japanese, Japan"
"FALSE" "kab_DZ" "Kabyle, Algeria"
"FALSE" "ka_GE" "Georgian, Georgia"
"FALSE" "kk_KZ" "Kazakh, Kazakhstan"
"FALSE" "kl_GL" "Kalaallisut, Greenland"
"FALSE" "km_KH" "Khmer, Cambodia"
"FALSE" "kn_IN" "Kannada, India"
"FALSE" "kok_IN" "Konkani, India"
"FALSE" "ko_KR" "Korean, South Korea"
"FALSE" "ks_IN" "Kashmiri, India"
"FALSE" "ku_TR" "Kurdish, Turkey"
"FALSE" "kw_GB" "Cornish, United Kingdom"
"FALSE" "ky_KG" "Kyrgyz, Kyrgyzstan"
"FALSE" "lb_LU" "Luxembourgish, Luxembourg"
"FALSE" "lg_UG" "Ganda, Uganda"
"FALSE" "li_BE" "Limburgish, Belgium"
"FALSE" "lij_IT" "Ligurian, Italy"
"FALSE" "li_NL" "Limburgish, Netherlands"
"FALSE" "ln_CD" "Lingala, Democratic Republic of the Congo"
"FALSE" "lo_LA" "Lao, Laos"
"FALSE" "lt_LT" "Lithuanian, Lithuania"
"FALSE" "lv_LV" "Latvian, Latvia"
"FALSE" "lzh_TW" "Literary Chinese, Taiwan"
"FALSE" "mag_IN" "Magahi, India"
"FALSE" "mai_IN" "Maithili, India"
"FALSE" "mai_NP" "Maithili, Nepal"
"FALSE" "mfe_MU" "Morisyen, Mauritius"
"FALSE" "mg_MG" "Malagasy, Madagascar"
"FALSE" "mhr_RU" "Meadow Mari, Russia"
"FALSE" "mi_NZ" "Maori, New Zealand"
"FALSE" "miq_NI" "Miskito, Nicaragua"
"FALSE" "mjw_IN" "Karbi, India"
"FALSE" "mk_MK" "Macedonian, Macedonia"
"FALSE" "ml_IN" "Malayalam, India"
"FALSE" "mni_IN" "Manipuri, India"
"FALSE" "mn_MN" "Mongolian, Mongolia"
"FALSE" "mnw_MM" "Mon, Myanmar"
"FALSE" "mr_IN" "Marathi, India"
"FALSE" "ms_MY" "Malay, Malaysia"
"FALSE" "mt_MT" "Maltese, malta"
"FALSE" "my_MM" "Burmese, Myanmar (Burma)"
"FALSE" "nan_TW" "Min Nan Chinese, Taiwan"
"FALSE" "nb_NO" "Norwegian Bokm<U00E5>l, Norway"
"FALSE" "nds_DE" "Low German, Germany"
"FALSE" "nds_NL" "Low Saxon, Netherlands"
"FALSE" "ne_NP" "Nepali, Nepal"
"FALSE" "nhn_MX" "Central Nahuatl, Mexico"
"FALSE" "niu_NU" "Niuean, Niue"
"FALSE" "niu_NZ" "Niuean, New Zealand"
"FALSE" "nl_AW" "Dutch, Aruba"
"FALSE" "nl_BE" "Flemish, Belgium"
"FALSE" "nl_NL" "Dutch, Netherlands"
"FALSE" "nn_NO" "Norwegian Nynorsk, Norway"
"FALSE" "nr_ZA" "South Ndebele, South Africa"
"FALSE" "nso_ZA" "Northern Sotho, South Africa"
"FALSE" "oc_FR" "Occitan, France"
"FALSE" "om_ET" "Oromo, Ethiopia"
"FALSE" "om_KE" "Oromo, Kenya"
"FALSE" "or_IN" "Odia, India"
"FALSE" "os_RU" "Ossetic, Russia"
"FALSE" "pa_IN" "Punjabi, India"
"FALSE" "pap_AW" "Papiamento, Aruba"
"FALSE" "pap_CW" "Papiamento, Cura<U00E7>ao"
"FALSE" "pa_PK" "Punjabi, Pakistan"
"FALSE" "pl_PL" "Polish, Poland"
"FALSE" "ps_AF" "Pashto, Afghanistan"
"FALSE" "pt_BR" "Brazilian Portuguese, Brazil"
"FALSE" "pt_PT" "European Portuguese, Portugal"
"FALSE" "quz_PE" "Cusco Quechua, Peru"
"FALSE" "raj_IN" "Rajasthani, India"
"FALSE" "rif_MA" "Tarifit, Morocco"
"FALSE" "ro_RO" "Romanian, Romania"
"FALSE" "ru_RU" "Russian, Russia"
"FALSE" "ru_UA" "Russian, Ukraine"
"FALSE" "rw_RW" "Kinyarwanda, Rwanda"
"FALSE" "sah_RU" "Sakha, Russian Federation"
"FALSE" "sa_IN" "Sanskrit, India"
"FALSE" "sat_IN" "Santali, India"
"FALSE" "sc_IT" "Sardinian, Italy"
"FALSE" "sd_IN" "Sindhi, India"
"FALSE" "se_NO" "Northern Sami, Norway"
"FALSE" "sgs_LT" "Samogitian, Lithuania"
"FALSE" "shn_MM" "Shan, Myanmar"
"FALSE" "shs_CA" "Shuswap, Canada"
"FALSE" "sid_ET" "Sidamo, Ethiopia"
"FALSE" "si_LK" "Sinhala, Sri Lanka"
"FALSE" "sk_SK" "Slovak, Slovakia"
"FALSE" "sl_SI" "Slovenian, Slovenia"
"FALSE" "sm_WS" "Samoan, Samoa"
"FALSE" "so_DJ" "Somali, Djibouti"
"FALSE" "so_ET" "Somali, Ethiopia"
"FALSE" "so_KE" "Somali, Kenya"
"FALSE" "so_SO" "Somali, Somalia"
"FALSE" "sq_AL" "Albanian, Albania"
"FALSE" "sq_MK" "Albanian, Macedonia"
"FALSE" "sr_ME" "Serbian, Montenegro"
"FALSE" "sr_RS" "Serbian, Serbia"
"FALSE" "ss_ZA" "Swati, South Africa"
"FALSE" "st_ZA" "Southern Sotho, South Africa"
"FALSE" "sv_FI" "Swedish, Finland"
"FALSE" "sv_SE" "Swedish, Sweden"
"FALSE" "sw_KE" "Swahili, Kenya"
"FALSE" "sw_TZ" "Swahili, Tanzania"
"FALSE" "szl_PL" "Silesian, Poland"
"FALSE" "ta_IN" "Tamil, India"
"FALSE" "ta_LK" "Tamil, Sri Lanka"
"FALSE" "tcy_IN" "Tulu, India"
"FALSE" "te_IN" "Telugu, India"
"FALSE" "tg_TJ" "Tajik, Tajikistan"
"FALSE" "the_NP" "Chitwania Tharu, Nepal"
"FALSE" "th_TH" "Thai, Thailand"
"FALSE" "ti_ER" "Tigrinya, Eritrea"
"FALSE" "ti_ET" "Tigrinya, Ethiopia"
"FALSE" "tig_ER" "Tigre, Eritrea"
"FALSE" "tk_TM" "Turkmen, Turkmenistan"
"FALSE" "tl_PH" "Tagalog, Philippines"
"FALSE" "tn_ZA" "Tswana, South Africa"
"FALSE" "to_TO" "Tongan, Tonga"
"FALSE" "tpi_PG" "Tok Pisin, Papua New Guinea"
"FALSE" "tr_CY" "Turkish, Cyprus"
"FALSE" "tr_TR" "Turkish, Turkey"
"FALSE" "ts_ZA" "Tsonga, South Africa"
"FALSE" "tt_RU" "Tatar, Russia"
"FALSE" "ug_CN" "Uyghur, China"
"FALSE" "uk_UA" "Ukrainian, Ukraine"
"FALSE" "unm_US" "Unami Delaware, United States"
"FALSE" "ur_IN" "Urdu, India"
"FALSE" "ur_PK" "Urdu, Pakistan"
"FALSE" "uz_UZ" "Uzbek, Uzbekistan"
"FALSE" "ve_ZA" "Venda, South Africa"
"FALSE" "vi_VN" "Vietnamese, Vietnam"
"FALSE" "wa_BE" "Walloon, Belgium"
"FALSE" "wae_CH" "Walser, Switzerland"
"FALSE" "wal_ET" "Wolaytta, Ethiopia"
"FALSE" "wo_SN" "Wolof, Senegal"
"FALSE" "xh_ZA" "Xhosa, South Africa"
"FALSE" "yi_US" "Yiddish, United States"
"FALSE" "yo_NG" "Yoruba, Nigeria"
"FALSE" "yue_HK" "Cantonese, Hong Kong SAR China"
"FALSE" "yuw_PG" "Yau, Papua New Guinea"
"FALSE" "zh_CN" "Chinese, China"
"FALSE" "zh_HK" "Chinese, Hong Kong SAR China"
"FALSE" "zh_SG" "Chinese, Singapore"
"FALSE" "zh_TW" "Chinese, Taiwan"
"FALSE" "zu_ZA" "Zulu, South Africa"
"FALSE" "C" "Default locale"
)

available_keymaps=(
"TRUE" "us" "USA"
"FALSE" "ad" "Andorra"
"FALSE" "af" "Afghanistan"
"FALSE" "al" "Albania"
"FALSE" "am" "Armenia"
"FALSE" "ara" "Arabic"
"FALSE" "az" "Azerbaijan"
"FALSE" "ba" "Bosnia and Herzegovina"
"FALSE" "bd" "Bangladesh"
"FALSE" "be" "Belgium"
"FALSE" "bg" "Bulgaria"
"FALSE" "br" "Brazil"
"FALSE" "brai" "Braille"
"FALSE" "bt" "Bhutan"
"FALSE" "by" "Belarus"
"FALSE" "ca" "Canada"
"FALSE" "cd" "Congo, Democratic Republic of the"
"FALSE" "ch" "Switzerland"
"FALSE" "cn" "China"
"FALSE" "cz" "Czechia"
"FALSE" "de" "Germany"
"FALSE" "dk" "Denmark"
"FALSE" "ee" "Estonia"
"FALSE" "es" "Spain"
"FALSE" "et" "Ethiopia"
"FALSE" "fi" "Finland"
"FALSE" "fo" "Faroe Islands"
"FALSE" "fr" "France"
"FALSE" "gb" "United Kingdom"
"FALSE" "ge" "Georgia"
"FALSE" "gh" "Ghana"
"FALSE" "gn" "Guinea"
"FALSE" "gr" "Greece"
"FALSE" "hr" "Croatia"
"FALSE" "hu" "Hungary"
"FALSE" "ie" "Ireland"
"FALSE" "il" "Israel"
"FALSE" "in" "India"
"FALSE" "iq" "Iraq"
"FALSE" "ir" "Iran"
"FALSE" "is" "Iceland"
"FALSE" "it" "Italy"
"FALSE" "jp" "Japan"
"FALSE" "kg" "Kyrgyzstan"
"FALSE" "kh" "Cambodia"
"FALSE" "kr" "Korea, Republic of"
"FALSE" "kz" "Kazakhstan"
"FALSE" "la" "Laos"
"FALSE" "latam" "Latin American"
"FALSE" "lk" "Sri Lanka"
"FALSE" "lt" "Lithuania"
"FALSE" "lv" "Latvia"
"FALSE" "ma" "Morocco"
"FALSE" "mao" "Maori"
"FALSE" "me" "Montenegro"
"FALSE" "mk" "Macedonia"
"FALSE" "ml" "Mali"
"FALSE" "mm" "Myanmar"
"FALSE" "mn" "Mongolia"
"FALSE" "mt" "Malta"
"FALSE" "mv" "Maldives"
"FALSE" "ng" "Nigeria"
"FALSE" "nl" "Netherlands"
"FALSE" "no" "Norway"
"FALSE" "np" "Nepal"
"FALSE" "pk" "Pakistan"
"FALSE" "pl" "Poland"
"FALSE" "pt" "Portugal"
"FALSE" "ro" "Romania"
"FALSE" "rs" "Serbia"
"FALSE" "ru" "Russia"
"FALSE" "se" "Sweden"
"FALSE" "si" "Slovenia"
"FALSE" "sk" "Slovakia"
"FALSE" "sn" "Senegal"
"FALSE" "sy" "Syria"
"FALSE" "th" "Thailand"
"FALSE" "tj" "Tajikistan"
"FALSE" "tm" "Turkmenistan"
"FALSE" "tr" "Turkey"
"FALSE" "tw" "Taiwan"
"FALSE" "tz" "Tanzania"
"FALSE" "ua" "Ukraine"
"FALSE" "uz" "Uzbekistan"
"FALSE" "vn" "Vietnam"
"FALSE" "za" "South Africa"
)

available_timezones=(
"TRUE" "UTC"
"FALSE" "Africa/Abidjan"
"FALSE" "Africa/Accra"
"FALSE" "Africa/Addis_Ababa"
"FALSE" "Africa/Algiers"
"FALSE" "Africa/Asmara"
"FALSE" "Africa/Asmera"
"FALSE" "Africa/Bamako"
"FALSE" "Africa/Bangui"
"FALSE" "Africa/Banjul"
"FALSE" "Africa/Bissau"
"FALSE" "Africa/Blantyre"
"FALSE" "Africa/Brazzaville"
"FALSE" "Africa/Bujumbura"
"FALSE" "Africa/Cairo"
"FALSE" "Africa/Casablanca"
"FALSE" "Africa/Ceuta"
"FALSE" "Africa/Conakry"
"FALSE" "Africa/Dakar"
"FALSE" "Africa/Dar_es_Salaam"
"FALSE" "Africa/Djibouti"
"FALSE" "Africa/Douala"
"FALSE" "Africa/El_Aaiun"
"FALSE" "Africa/Freetown"
"FALSE" "Africa/Gaborone"
"FALSE" "Africa/Harare"
"FALSE" "Africa/Johannesburg"
"FALSE" "Africa/Juba"
"FALSE" "Africa/Kampala"
"FALSE" "Africa/Khartoum"
"FALSE" "Africa/Kigali"
"FALSE" "Africa/Kinshasa"
"FALSE" "Africa/Lagos"
"FALSE" "Africa/Libreville"
"FALSE" "Africa/Lome"
"FALSE" "Africa/Luanda"
"FALSE" "Africa/Lubumbashi"
"FALSE" "Africa/Lusaka"
"FALSE" "Africa/Malabo"
"FALSE" "Africa/Maputo"
"FALSE" "Africa/Maseru"
"FALSE" "Africa/Mbabane"
"FALSE" "Africa/Mogadishu"
"FALSE" "Africa/Monrovia"
"FALSE" "Africa/Nairobi"
"FALSE" "Africa/Ndjamena"
"FALSE" "Africa/Niamey"
"FALSE" "Africa/Nouakchott"
"FALSE" "Africa/Ouagadougou"
"FALSE" "Africa/Porto-Novo"
"FALSE" "Africa/Sao_Tome"
"FALSE" "Africa/Timbuktu"
"FALSE" "Africa/Tripoli"
"FALSE" "Africa/Tunis"
"FALSE" "Africa/Windhoek"
"FALSE" "America/Adak"
"FALSE" "America/Anchorage"
"FALSE" "America/Anguilla"
"FALSE" "America/Antigua"
"FALSE" "America/Araguaina"
"FALSE" "America/Argentina/Buenos_Aires"
"FALSE" "America/Argentina/Catamarca"
"FALSE" "America/Argentina/ComodRivadavia"
"FALSE" "America/Argentina/Cordoba"
"FALSE" "America/Argentina/Jujuy"
"FALSE" "America/Argentina/La_Rioja"
"FALSE" "America/Argentina/Mendoza"
"FALSE" "America/Argentina/Rio_Gallegos"
"FALSE" "America/Argentina/Salta"
"FALSE" "America/Argentina/San_Juan"
"FALSE" "America/Argentina/San_Luis"
"FALSE" "America/Argentina/Tucuman"
"FALSE" "America/Argentina/Ushuaia"
"FALSE" "America/Aruba"
"FALSE" "America/Asuncion"
"FALSE" "America/Atikokan"
"FALSE" "America/Atka"
"FALSE" "America/Bahia"
"FALSE" "America/Bahia_Banderas"
"FALSE" "America/Barbados"
"FALSE" "America/Belem"
"FALSE" "America/Belize"
"FALSE" "America/Blanc-Sablon"
"FALSE" "America/Boa_Vista"
"FALSE" "America/Bogota"
"FALSE" "America/Boise"
"FALSE" "America/Buenos_Aires"
"FALSE" "America/Cambridge_Bay"
"FALSE" "America/Campo_Grande"
"FALSE" "America/Cancun"
"FALSE" "America/Caracas"
"FALSE" "America/Catamarca"
"FALSE" "America/Cayenne"
"FALSE" "America/Cayman"
"FALSE" "America/Chicago"
"FALSE" "America/Chihuahua"
"FALSE" "America/Ciudad_Juarez"
"FALSE" "America/Coral_Harbour"
"FALSE" "America/Cordoba"
"FALSE" "America/Costa_Rica"
"FALSE" "America/Creston"
"FALSE" "America/Cuiaba"
"FALSE" "America/Curacao"
"FALSE" "America/Danmarkshavn"
"FALSE" "America/Dawson"
"FALSE" "America/Dawson_Creek"
"FALSE" "America/Denver"
"FALSE" "America/Detroit"
"FALSE" "America/Dominica"
"FALSE" "America/Edmonton"
"FALSE" "America/Eirunepe"
"FALSE" "America/El_Salvador"
"FALSE" "America/Ensenada"
"FALSE" "America/Fort_Nelson"
"FALSE" "America/Fort_Wayne"
"FALSE" "America/Fortaleza"
"FALSE" "America/Glace_Bay"
"FALSE" "America/Godthab"
"FALSE" "America/Goose_Bay"
"FALSE" "America/Grand_Turk"
"FALSE" "America/Grenada"
"FALSE" "America/Guadeloupe"
"FALSE" "America/Guatemala"
"FALSE" "America/Guayaquil"
"FALSE" "America/Guyana"
"FALSE" "America/Halifax"
"FALSE" "America/Havana"
"FALSE" "America/Hermosillo"
"FALSE" "America/Indiana/Indianapolis"
"FALSE" "America/Indiana/Knox"
"FALSE" "America/Indiana/Marengo"
"FALSE" "America/Indiana/Petersburg"
"FALSE" "America/Indiana/Tell_City"
"FALSE" "America/Indiana/Vevay"
"FALSE" "America/Indiana/Vincennes"
"FALSE" "America/Indiana/Winamac"
"FALSE" "America/Indianapolis"
"FALSE" "America/Inuvik"
"FALSE" "America/Iqaluit"
"FALSE" "America/Jamaica"
"FALSE" "America/Jujuy"
"FALSE" "America/Juneau"
"FALSE" "America/Kentucky/Louisville"
"FALSE" "America/Kentucky/Monticello"
"FALSE" "America/Knox_IN"
"FALSE" "America/Kralendijk"
"FALSE" "America/La_Paz"
"FALSE" "America/Lima"
"FALSE" "America/Los_Angeles"
"FALSE" "America/Louisville"
"FALSE" "America/Lower_Princes"
"FALSE" "America/Maceio"
"FALSE" "America/Managua"
"FALSE" "America/Manaus"
"FALSE" "America/Marigot"
"FALSE" "America/Martinique"
"FALSE" "America/Matamoros"
"FALSE" "America/Mazatlan"
"FALSE" "America/Mendoza"
"FALSE" "America/Menominee"
"FALSE" "America/Merida"
"FALSE" "America/Metlakatla"
"FALSE" "America/Mexico_City"
"FALSE" "America/Miquelon"
"FALSE" "America/Moncton"
"FALSE" "America/Monterrey"
"FALSE" "America/Montevideo"
"FALSE" "America/Montreal"
"FALSE" "America/Montserrat"
"FALSE" "America/Nassau"
"FALSE" "America/New_York"
"FALSE" "America/Nipigon"
"FALSE" "America/Nome"
"FALSE" "America/Noronha"
"FALSE" "America/North_Dakota/Beulah"
"FALSE" "America/North_Dakota/Center"
"FALSE" "America/North_Dakota/New_Salem"
"FALSE" "America/Nuuk"
"FALSE" "America/Ojinaga"
"FALSE" "America/Panama"
"FALSE" "America/Pangnirtung"
"FALSE" "America/Paramaribo"
"FALSE" "America/Phoenix"
"FALSE" "America/Port-au-Prince"
"FALSE" "America/Port_of_Spain"
"FALSE" "America/Porto_Acre"
"FALSE" "America/Porto_Velho"
"FALSE" "America/Puerto_Rico"
"FALSE" "America/Punta_Arenas"
"FALSE" "America/Rainy_River"
"FALSE" "America/Rankin_Inlet"
"FALSE" "America/Recife"
"FALSE" "America/Regina"
"FALSE" "America/Resolute"
"FALSE" "America/Rio_Branco"
"FALSE" "America/Rosario"
"FALSE" "America/Santa_Isabel"
"FALSE" "America/Santarem"
"FALSE" "America/Santiago"
"FALSE" "America/Santo_Domingo"
"FALSE" "America/Sao_Paulo"
"FALSE" "America/Scoresbysund"
"FALSE" "America/Shiprock"
"FALSE" "America/Sitka"
"FALSE" "America/St_Barthelemy"
"FALSE" "America/St_Johns"
"FALSE" "America/St_Kitts"
"FALSE" "America/St_Lucia"
"FALSE" "America/St_Thomas"
"FALSE" "America/St_Vincent"
"FALSE" "America/Swift_Current"
"FALSE" "America/Tegucigalpa"
"FALSE" "America/Thule"
"FALSE" "America/Thunder_Bay"
"FALSE" "America/Tijuana"
"FALSE" "America/Toronto"
"FALSE" "America/Tortola"
"FALSE" "America/Vancouver"
"FALSE" "America/Virgin"
"FALSE" "America/Whitehorse"
"FALSE" "America/Winnipeg"
"FALSE" "America/Yakutat"
"FALSE" "America/Yellowknife"
"FALSE" "Antarctica/Casey"
"FALSE" "Antarctica/Davis"
"FALSE" "Antarctica/DumontDUrville"
"FALSE" "Antarctica/Macquarie"
"FALSE" "Antarctica/Mawson"
"FALSE" "Antarctica/McMurdo"
"FALSE" "Antarctica/Palmer"
"FALSE" "Antarctica/Rothera"
"FALSE" "Antarctica/South_Pole"
"FALSE" "Antarctica/Syowa"
"FALSE" "Antarctica/Troll"
"FALSE" "Antarctica/Vostok"
"FALSE" "Arctic/Longyearbyen"
"FALSE" "Asia/Aden"
"FALSE" "Asia/Almaty"
"FALSE" "Asia/Amman"
"FALSE" "Asia/Anadyr"
"FALSE" "Asia/Aqtau"
"FALSE" "Asia/Aqtobe"
"FALSE" "Asia/Ashgabat"
"FALSE" "Asia/Ashkhabad"
"FALSE" "Asia/Atyrau"
"FALSE" "Asia/Baghdad"
"FALSE" "Asia/Bahrain"
"FALSE" "Asia/Baku"
"FALSE" "Asia/Bangkok"
"FALSE" "Asia/Barnaul"
"FALSE" "Asia/Beirut"
"FALSE" "Asia/Bishkek"
"FALSE" "Asia/Brunei"
"FALSE" "Asia/Calcutta"
"FALSE" "Asia/Chita"
"FALSE" "Asia/Choibalsan"
"FALSE" "Asia/Chongqing"
"FALSE" "Asia/Chungking"
"FALSE" "Asia/Colombo"
"FALSE" "Asia/Dacca"
"FALSE" "Asia/Damascus"
"FALSE" "Asia/Dhaka"
"FALSE" "Asia/Dili"
"FALSE" "Asia/Dubai"
"FALSE" "Asia/Dushanbe"
"FALSE" "Asia/Famagusta"
"FALSE" "Asia/Gaza"
"FALSE" "Asia/Harbin"
"FALSE" "Asia/Hebron"
"FALSE" "Asia/Ho_Chi_Minh"
"FALSE" "Asia/Hong_Kong"
"FALSE" "Asia/Hovd"
"FALSE" "Asia/Irkutsk"
"FALSE" "Asia/Istanbul"
"FALSE" "Asia/Jakarta"
"FALSE" "Asia/Jayapura"
"FALSE" "Asia/Jerusalem"
"FALSE" "Asia/Kabul"
"FALSE" "Asia/Kamchatka"
"FALSE" "Asia/Karachi"
"FALSE" "Asia/Kashgar"
"FALSE" "Asia/Kathmandu"
"FALSE" "Asia/Katmandu"
"FALSE" "Asia/Khandyga"
"FALSE" "Asia/Kolkata"
"FALSE" "Asia/Krasnoyarsk"
"FALSE" "Asia/Kuala_Lumpur"
"FALSE" "Asia/Kuching"
"FALSE" "Asia/Kuwait"
"FALSE" "Asia/Macao"
"FALSE" "Asia/Macau"
"FALSE" "Asia/Magadan"
"FALSE" "Asia/Makassar"
"FALSE" "Asia/Manila"
"FALSE" "Asia/Muscat"
"FALSE" "Asia/Nicosia"
"FALSE" "Asia/Novokuznetsk"
"FALSE" "Asia/Novosibirsk"
"FALSE" "Asia/Omsk"
"FALSE" "Asia/Oral"
"FALSE" "Asia/Phnom_Penh"
"FALSE" "Asia/Pontianak"
"FALSE" "Asia/Pyongyang"
"FALSE" "Asia/Qatar"
"FALSE" "Asia/Qostanay"
"FALSE" "Asia/Qyzylorda"
"FALSE" "Asia/Rangoon"
"FALSE" "Asia/Riyadh"
"FALSE" "Asia/Saigon"
"FALSE" "Asia/Sakhalin"
"FALSE" "Asia/Samarkand"
"FALSE" "Asia/Seoul"
"FALSE" "Asia/Shanghai"
"FALSE" "Asia/Singapore"
"FALSE" "Asia/Srednekolymsk"
"FALSE" "Asia/Taipei"
"FALSE" "Asia/Tashkent"
"FALSE" "Asia/Tbilisi"
"FALSE" "Asia/Tehran"
"FALSE" "Asia/Tel_Aviv"
"FALSE" "Asia/Thimbu"
"FALSE" "Asia/Thimphu"
"FALSE" "Asia/Tokyo"
"FALSE" "Asia/Tomsk"
"FALSE" "Asia/Ujung_Pandang"
"FALSE" "Asia/Ulaanbaatar"
"FALSE" "Asia/Ulan_Bator"
"FALSE" "Asia/Urumqi"
"FALSE" "Asia/Ust-Nera"
"FALSE" "Asia/Vientiane"
"FALSE" "Asia/Vladivostok"
"FALSE" "Asia/Yakutsk"
"FALSE" "Asia/Yangon"
"FALSE" "Asia/Yekaterinburg"
"FALSE" "Asia/Yerevan"
"FALSE" "Atlantic/Azores"
"FALSE" "Atlantic/Bermuda"
"FALSE" "Atlantic/Canary"
"FALSE" "Atlantic/Cape_Verde"
"FALSE" "Atlantic/Faeroe"
"FALSE" "Atlantic/Faroe"
"FALSE" "Atlantic/Jan_Mayen"
"FALSE" "Atlantic/Madeira"
"FALSE" "Atlantic/Reykjavik"
"FALSE" "Atlantic/South_Georgia"
"FALSE" "Atlantic/St_Helena"
"FALSE" "Atlantic/Stanley"
"FALSE" "Australia/ACT"
"FALSE" "Australia/Adelaide"
"FALSE" "Australia/Brisbane"
"FALSE" "Australia/Broken_Hill"
"FALSE" "Australia/Canberra"
"FALSE" "Australia/Currie"
"FALSE" "Australia/Darwin"
"FALSE" "Australia/Eucla"
"FALSE" "Australia/Hobart"
"FALSE" "Australia/LHI"
"FALSE" "Australia/Lindeman"
"FALSE" "Australia/Lord_Howe"
"FALSE" "Australia/Melbourne"
"FALSE" "Australia/NSW"
"FALSE" "Australia/North"
"FALSE" "Australia/Perth"
"FALSE" "Australia/Queensland"
"FALSE" "Australia/South"
"FALSE" "Australia/Sydney"
"FALSE" "Australia/Tasmania"
"FALSE" "Australia/Victoria"
"FALSE" "Australia/West"
"FALSE" "Australia/Yancowinna"
"FALSE" "Brazil/Acre"
"FALSE" "Brazil/DeNoronha"
"FALSE" "Brazil/East"
"FALSE" "Brazil/West"
"FALSE" "CET"
"FALSE" "CST6CDT"
"FALSE" "Canada/Atlantic"
"FALSE" "Canada/Central"
"FALSE" "Canada/Eastern"
"FALSE" "Canada/Mountain"
"FALSE" "Canada/Newfoundland"
"FALSE" "Canada/Pacific"
"FALSE" "Canada/Saskatchewan"
"FALSE" "Canada/Yukon"
"FALSE" "Chile/Continental"
"FALSE" "Chile/EasterIsland"
"FALSE" "Cuba"
"FALSE" "EET"
"FALSE" "EST"
"FALSE" "EST5EDT"
"FALSE" "Egypt"
"FALSE" "Eire"
"FALSE" "Europe/Amsterdam"
"FALSE" "Europe/Andorra"
"FALSE" "Europe/Astrakhan"
"FALSE" "Europe/Athens"
"FALSE" "Europe/Belfast"
"FALSE" "Europe/Belgrade"
"FALSE" "Europe/Berlin"
"FALSE" "Europe/Bratislava"
"FALSE" "Europe/Brussels"
"FALSE" "Europe/Bucharest"
"FALSE" "Europe/Budapest"
"FALSE" "Europe/Busingen"
"FALSE" "Europe/Chisinau"
"FALSE" "Europe/Copenhagen"
"FALSE" "Europe/Dublin"
"FALSE" "Europe/Gibraltar"
"FALSE" "Europe/Guernsey"
"FALSE" "Europe/Helsinki"
"FALSE" "Europe/Isle_of_Man"
"FALSE" "Europe/Istanbul"
"FALSE" "Europe/Jersey"
"FALSE" "Europe/Kaliningrad"
"FALSE" "Europe/Kiev"
"FALSE" "Europe/Kirov"
"FALSE" "Europe/Kyiv"
"FALSE" "Europe/Lisbon"
"FALSE" "Europe/Ljubljana"
"FALSE" "Europe/London"
"FALSE" "Europe/Luxembourg"
"FALSE" "Europe/Madrid"
"FALSE" "Europe/Malta"
"FALSE" "Europe/Mariehamn"
"FALSE" "Europe/Minsk"
"FALSE" "Europe/Monaco"
"FALSE" "Europe/Moscow"
"FALSE" "Europe/Nicosia"
"FALSE" "Europe/Oslo"
"FALSE" "Europe/Paris"
"FALSE" "Europe/Podgorica"
"FALSE" "Europe/Prague"
"FALSE" "Europe/Riga"
"FALSE" "Europe/Rome"
"FALSE" "Europe/Samara"
"FALSE" "Europe/San_Marino"
"FALSE" "Europe/Sarajevo"
"FALSE" "Europe/Saratov"
"FALSE" "Europe/Simferopol"
"FALSE" "Europe/Skopje"
"FALSE" "Europe/Sofia"
"FALSE" "Europe/Stockholm"
"FALSE" "Europe/Tallinn"
"FALSE" "Europe/Tirane"
"FALSE" "Europe/Tiraspol"
"FALSE" "Europe/Ulyanovsk"
"FALSE" "Europe/Uzhgorod"
"FALSE" "Europe/Vaduz"
"FALSE" "Europe/Vatican"
"FALSE" "Europe/Vienna"
"FALSE" "Europe/Vilnius"
"FALSE" "Europe/Volgograd"
"FALSE" "Europe/Warsaw"
"FALSE" "Europe/Zagreb"
"FALSE" "Europe/Zaporozhye"
"FALSE" "Europe/Zurich"
"FALSE" "Factory"
"FALSE" "GB"
"FALSE" "GB-Eire"
"FALSE" "GMT"
"FALSE" "GMT+0"
"FALSE" "GMT-0"
"FALSE" "GMT0"
"FALSE" "Greenwich"
"FALSE" "HST"
"FALSE" "Hongkong"
"FALSE" "Iceland"
"FALSE" "Indian/Antananarivo"
"FALSE" "Indian/Chagos"
"FALSE" "Indian/Christmas"
"FALSE" "Indian/Cocos"
"FALSE" "Indian/Comoro"
"FALSE" "Indian/Kerguelen"
"FALSE" "Indian/Mahe"
"FALSE" "Indian/Maldives"
"FALSE" "Indian/Mauritius"
"FALSE" "Indian/Mayotte"
"FALSE" "Indian/Reunion"
"FALSE" "Iran"
"FALSE" "Israel"
"FALSE" "Jamaica"
"FALSE" "Japan"
"FALSE" "Kwajalein"
"FALSE" "Libya"
"FALSE" "MET"
"FALSE" "MST"
"FALSE" "MST7MDT"
"FALSE" "Mexico/BajaNorte"
"FALSE" "Mexico/BajaSur"
"FALSE" "Mexico/General"
"FALSE" "NZ"
"FALSE" "NZ-CHAT"
"FALSE" "Navajo"
"FALSE" "PRC"
"FALSE" "PST8PDT"
"FALSE" "Pacific/Apia"
"FALSE" "Pacific/Auckland"
"FALSE" "Pacific/Bougainville"
"FALSE" "Pacific/Chatham"
"FALSE" "Pacific/Chuuk"
"FALSE" "Pacific/Easter"
"FALSE" "Pacific/Efate"
"FALSE" "Pacific/Enderbury"
"FALSE" "Pacific/Fakaofo"
"FALSE" "Pacific/Fiji"
"FALSE" "Pacific/Funafuti"
"FALSE" "Pacific/Galapagos"
"FALSE" "Pacific/Gambier"
"FALSE" "Pacific/Guadalcanal"
"FALSE" "Pacific/Guam"
"FALSE" "Pacific/Honolulu"
"FALSE" "Pacific/Johnston"
"FALSE" "Pacific/Kanton"
"FALSE" "Pacific/Kiritimati"
"FALSE" "Pacific/Kosrae"
"FALSE" "Pacific/Kwajalein"
"FALSE" "Pacific/Majuro"
"FALSE" "Pacific/Marquesas"
"FALSE" "Pacific/Midway"
"FALSE" "Pacific/Nauru"
"FALSE" "Pacific/Niue"
"FALSE" "Pacific/Norfolk"
"FALSE" "Pacific/Noumea"
"FALSE" "Pacific/Pago_Pago"
"FALSE" "Pacific/Palau"
"FALSE" "Pacific/Pitcairn"
"FALSE" "Pacific/Pohnpei"
"FALSE" "Pacific/Ponape"
"FALSE" "Pacific/Port_Moresby"
"FALSE" "Pacific/Rarotonga"
"FALSE" "Pacific/Saipan"
"FALSE" "Pacific/Samoa"
"FALSE" "Pacific/Tahiti"
"FALSE" "Pacific/Tarawa"
"FALSE" "Pacific/Tongatapu"
"FALSE" "Pacific/Truk"
"FALSE" "Pacific/Wake"
"FALSE" "Pacific/Wallis"
"FALSE" "Pacific/Yap"
"FALSE" "Poland"
"FALSE" "Portugal"
"FALSE" "ROC"
"FALSE" "ROK"
"FALSE" "Singapore"
"FALSE" "Turkey"
"FALSE" "UCT"
"FALSE" "US/Alaska"
"FALSE" "US/Aleutian"
"FALSE" "US/Arizona"
"FALSE" "US/Central"
"FALSE" "US/East-Indiana"
"FALSE" "US/Eastern"
"FALSE" "US/Hawaii"
"FALSE" "US/Indiana-Starke"
"FALSE" "US/Michigan"
"FALSE" "US/Mountain"
"FALSE" "US/Pacific"
"FALSE" "US/Samoa"
"FALSE" "Universal"
"FALSE" "W-SU"
"FALSE" "WET"
"FALSE" "Zulu"
)

chroot_AlmaLinux()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
if [ ! -z "${mirror_AlmaLinux}" ]; then
	sed -i 's@^# baseurl=https://repo.almalinux.org/vault\|^# baseurl=https://repo.almalinux.org/almalinux@baseurl=${mirror_AlmaLinux}@g' /etc/yum.repos.d/almalinux-*.repo
	sed -i 's@^mirrorlist=@#mirrorlist=@g' /etc/yum.repos.d/almalinux-*.repo
fi
dnf update -y
dnf install -y bash bash-completion bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
mkdir -p /mnt/proc /mnt/sys
mount -t proc none /mnt/proc
mount --bind -o ro /mnt/proc/sys /mnt/proc/sys
mount --make-slave /mnt/proc/sys
mount --bind /sys /mnt/sys
mount --make-slave /mnt/sys
dnf install --installroot=/mnt --releasever $(echo ${almalinux_version} | tr A-Z a-z) -y @core openssl tar
if [ ! -z "${mirror_AlmaLinux}" ]; then
	sed -i 's@^# baseurl=https://repo.almalinux.org/vault\|^# baseurl=https://repo.almalinux.org/almalinux@baseurl=${mirror_AlmaLinux}@g' /mnt/etc/yum.repos.d/almalinux-*.repo
	sed -i 's@^mirrorlist=@#mirrorlist=@g' /mnt/etc/yum.repos.d/almalinux-*.repo
fi
umount /mnt/sys
umount /mnt/proc/sys
umount /mnt/proc
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
dnf install -y epel-release
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL*
dnf upgrade --refresh -y
dnf install -y kernel kernel-headers dracut dkms linux-firmware iwl100-firmware iwl1000-firmware iwl105-firmware iwl135-firmware iwl2000-firmware iwl2030-firmware iwl3160-firmware iwl5000-firmware iwl5150-firmware iwl6000g2a-firmware iwl6000g2b-firmware iwl6050-firmware iwl7260-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr nss-mdns grub2-efi-x64 os-prober shim microcode_ctl mokutil dosfstools cpio bubblewrap langpacks-${packages_locale}
dnf --enablerepo=crb install -y almalinux-sb-certs
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

case "${environment}" in
	'Full')
	default_session="gnome-wayland"
	install_desktop="
dnf install -y @\"Workstation\"
systemctl set-default graphical
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
dnf remove -y setroubleshoot-plugins
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
if [ "${useraccount_autologin}" == "Yes" ]; then
	if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
	echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y ${custom_packages}" > "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Arch-Stable()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
pacstrap -G /mnt base base-devel
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service ModemManager.service NetworkManager.service thermald.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf archlinux-wallpaper at-spi2-core avahi cups ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth sof-firmware system-config-printer ttf-dejavu ttf-roboto udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio wireplumber xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
systemctl enable lightdm.service
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic packagekit xdg-desktop-portal-gtk
systemctl enable greetd.service
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter enlightenment connman terminology xdg-desktop-portal-gtk
systemctl enable lightdm.service connman.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma dolphin konsole packagekit-qt6 breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/archlinux/small.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/archlinux/small.png"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/archlinux/small.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux linux-headers"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist@[multilib]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Arch-Testing()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
sed -i -z 's@#\[core-testing]\n#Include = /etc/pacman.d/mirrorlist@[core-testing]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf
sed -i -z 's@#\[extra-testing]\n#Include = /etc/pacman.d/mirrorlist@[extra-testing]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf
pacstrap -G -P /mnt base base-devel
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service ModemManager.service NetworkManager.service thermald.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf archlinux-wallpaper at-spi2-core avahi cups ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth sof-firmware system-config-printer ttf-dejavu ttf-roboto udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio wireplumber xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
systemctl enable lightdm.service
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic packagekit xdg-desktop-portal-gtk
systemctl enable greetd.service
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter enlightenment connman terminology xdg-desktop-portal-gtk
systemctl enable lightdm.service connman.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma dolphin konsole packagekit-qt6 breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/archlinux/small.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/archlinux/small.png"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/archlinux/small.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux linux-headers"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist@[multilib]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist@[multilib-testing]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Artix-Stable-Openrc()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pacman/raw/branch/master/pacman.conf -o /etc/pacman_artix.conf
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman_artix.conf
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-arch
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/artix-mirrorlist/raw/branch/master/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@^Server@#Server@g' /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Artix}" ]; then
	echo 'Server = ${mirror_Artix}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://ftp.sh.cvut.cz/artix-linux https://ftp.crifo.org/artix/repos https://artix.wheaton.edu/repos; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/world/os/x86_64/world.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix.gpg -o /usr/share/pacman/keyrings/artix.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-trusted -o /usr/share/pacman/keyrings/artix-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-revoked -o /usr/share/pacman/keyrings/artix-revoked
pacman-key --populate artix
pacstrap -C /etc/pacman_artix.conf -G /mnt base base-devel openrc elogind-openrc mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
cp /etc/pacman.d/mirrorlist-arch /mnt/etc/pacman.d/mirrorlist-arch
cp /etc/pacman_artix.conf /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
echo -e "\n# Arch\n#[extra-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-openrc wpa_supplicant bluez bluez-openrc cryptsetup cryptsetup-openrc e2fsprogs ntfs-3g nano acpid acpid-openrc curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
rc-update add dmcrypt boot
rc-update add bluetoothd default
rc-update add NetworkManager default
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets at-spi2-core avahi avahi-openrc cups cups-openrc ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pamac pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-roboto-mono udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="
rc-update add avahi-daemon default
rc-update add cupsd default
"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
${desktop_services}
rc-update add lightdm default
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic greetd-openrc packagekit xdg-desktop-portal-gtk
${desktop_services}
rc-update add greetd default
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rc-update delete NetworkManager default
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc enlightenment terminology connman connman-openrc xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
rc-update add connmand default
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-openrc gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
${desktop_services}
rc-update add gdm default
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-openrc gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
${desktop_services}
rc-update add gdm default
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager mate-applets xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-openrc sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
${desktop_services}
rc-update add sddm default
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-openrc sddm-theme-artix plasma dolphin konsole packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
${desktop_services}
rc-update add sddm default
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc xfce4 xfce4-whiskermenu-plugin network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/pipewire.desktop -o /etc/xdg/autostart/pipewire.desktop
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/artix-pipewire-launcher -o /usr/bin/artix-pipewire-launcher
chmod 0755 /usr/bin/artix-pipewire-launcher
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-jack2 lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[lib32]\n#Include = /etc/pacman.d/mirrorlist@[lib32]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Artix-Testing-Openrc()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pacman/raw/branch/master/pacman.conf -o /etc/pacman_artix.conf
sed -i -z 's@#\[system-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[system-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i -z 's@#\[world-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[world-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i -z 's@#\[galaxy-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[galaxy-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman_artix.conf
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-arch
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/artix-mirrorlist/raw/branch/master/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@^Server@#Server@g' /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Artix}" ]; then
	echo 'Server = ${mirror_Artix}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://ftp.sh.cvut.cz/artix-linux https://ftp.crifo.org/artix/repos https://artix.wheaton.edu/repos; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/world/os/x86_64/world.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix.gpg -o /usr/share/pacman/keyrings/artix.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-trusted -o /usr/share/pacman/keyrings/artix-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-revoked -o /usr/share/pacman/keyrings/artix-revoked
pacman-key --populate artix
pacstrap -C /etc/pacman_artix.conf -G /mnt base base-devel openrc elogind-openrc mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
cp /etc/pacman.d/mirrorlist-arch /mnt/etc/pacman.d/mirrorlist-arch
cp /etc/pacman_artix.conf /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
echo -e "\n# Arch\n[extra-testing]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-openrc wpa_supplicant bluez bluez-openrc cryptsetup cryptsetup-openrc e2fsprogs ntfs-3g nano acpid acpid-openrc curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
rc-update add dmcrypt boot
rc-update add bluetoothd default
rc-update add NetworkManager default
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets at-spi2-core avahi avahi-openrc cups cups-openrc ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pamac pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-roboto-mono udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="
rc-update add avahi-daemon default
rc-update add cupsd default
"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
${desktop_services}
rc-update add lightdm default
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic greetd-openrc packagekit xdg-desktop-portal-gtk
${desktop_services}
rc-update add greetd default
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rc-update delete NetworkManager default
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc enlightenment terminology connman connman-openrc xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
rc-update add connmand default
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-openrc gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
${desktop_services}
rc-update add gdm default
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-openrc gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
${desktop_services}
rc-update add gdm default
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager mate-applets xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-openrc sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
${desktop_services}
rc-update add sddm default
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-openrc sddm-theme-artix plasma dolphin konsole packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
${desktop_services}
rc-update add sddm default
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc xfce4 xfce4-whiskermenu-plugin network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-openrc xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
${desktop_services}
rc-update add lightdm default
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/pipewire.desktop -o /etc/xdg/autostart/pipewire.desktop
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/artix-pipewire-launcher -o /usr/bin/artix-pipewire-launcher
chmod 0755 /usr/bin/artix-pipewire-launcher
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-jack2 lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[lib32]\n#Include = /etc/pacman.d/mirrorlist@[lib32]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[lib32-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[lib32-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib-testing]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Artix-Stable-Runit()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pacman/raw/branch/master/pacman.conf -o /etc/pacman_artix.conf
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman_artix.conf
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-arch
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/artix-mirrorlist/raw/branch/master/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@^Server@#Server@g' /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Artix}" ]; then
	echo 'Server = ${mirror_Artix}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://ftp.sh.cvut.cz/artix-linux https://ftp.crifo.org/artix/repos https://artix.wheaton.edu/repos; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/world/os/x86_64/world.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix.gpg -o /usr/share/pacman/keyrings/artix.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-trusted -o /usr/share/pacman/keyrings/artix-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-revoked -o /usr/share/pacman/keyrings/artix-revoked
pacman-key --populate artix
pacstrap -C /etc/pacman_artix.conf -G /mnt base base-devel runit elogind-runit mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
cp /etc/pacman.d/mirrorlist-arch /mnt/etc/pacman.d/mirrorlist-arch
cp /etc/pacman_artix.conf /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
echo -e "\n# Arch\n#[extra-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-runit wpa_supplicant bluez bluez-runit cryptsetup cryptsetup-runit e2fsprogs ntfs-3g nano acpid acpid-runit curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
ln -s /etc/runit/sv/cryptsetup /etc/runit/sv/bluetoothd /etc/runit/sv/NetworkManager /etc/runit/runsvdir/default/
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets at-spi2-core avahi avahi-runit cups cups-runit ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pamac pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-roboto-mono udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="/etc/runit/sv/avahi-daemon /etc/runit/sv/cupsd"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic greetd-runit packagekit xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/greetd /etc/runit/runsvdir/default/
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rm /etc/runit/runsvdir/default/NetworkManager
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit enlightenment terminology connman connman-runit xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/sv/connmand /etc/runit/runsvdir/default/
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-runit gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
ln -s ${desktop_services} /etc/runit/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-runit gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
ln -s ${desktop_services} /etc/runit/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager mate-applets xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-runit sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
ln -s ${desktop_services} /etc/runit/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-runit sddm-theme-artix plasma dolphin konsole packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
ln -s ${desktop_services} /etc/runit/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit xfce4 xfce4-whiskermenu-plugin network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/pipewire.desktop -o /etc/xdg/autostart/pipewire.desktop
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/artix-pipewire-launcher -o /usr/bin/artix-pipewire-launcher
chmod 0755 /usr/bin/artix-pipewire-launcher
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-jack2 lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[lib32]\n#Include = /etc/pacman.d/mirrorlist@[lib32]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Artix-Testing-Runit()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pacman/raw/branch/master/pacman.conf -o /etc/pacman_artix.conf
sed -i -z 's@#\[system-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[system-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i -z 's@#\[world-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[world-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i -z 's@#\[galaxy-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[galaxy-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman_artix.conf
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-arch
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/artix-mirrorlist/raw/branch/master/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@^Server@#Server@g' /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Artix}" ]; then
	echo 'Server = ${mirror_Artix}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://ftp.sh.cvut.cz/artix-linux https://ftp.crifo.org/artix/repos https://artix.wheaton.edu/repos; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/world/os/x86_64/world.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix.gpg -o /usr/share/pacman/keyrings/artix.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-trusted -o /usr/share/pacman/keyrings/artix-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-revoked -o /usr/share/pacman/keyrings/artix-revoked
pacman-key --populate artix
pacstrap -C /etc/pacman_artix.conf -G /mnt base base-devel runit elogind-runit mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
cp /etc/pacman.d/mirrorlist-arch /mnt/etc/pacman.d/mirrorlist-arch
cp /etc/pacman_artix.conf /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
echo -e "\n# Arch\n[extra-testing]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-runit wpa_supplicant bluez bluez-runit cryptsetup cryptsetup-runit e2fsprogs ntfs-3g nano acpid acpid-runit curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
ln -s /etc/runit/sv/cryptsetup /etc/runit/sv/bluetoothd /etc/runit/sv/NetworkManager /etc/runit/runsvdir/default/
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets at-spi2-core avahi avahi-runit cups cups-runit ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pamac pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-roboto-mono udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="/etc/runit/sv/avahi-daemon /etc/runit/sv/cupsd"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic greetd-runit packagekit xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/greetd /etc/runit/runsvdir/default/
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rm /etc/runit/runsvdir/default/NetworkManager
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit enlightenment terminology connman connman-runit xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/sv/connmand /etc/runit/runsvdir/default/
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-runit gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
ln -s ${desktop_services} /etc/runit/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-runit gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
ln -s ${desktop_services} /etc/runit/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager mate-applets xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-runit sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 falkon  breeze-gtk breeze-icons xdg-desktop-portal-kde
ln -s ${desktop_services} /etc/runit/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-runit sddm-theme-artix plasma dolphin konsole packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
ln -s ${desktop_services} /etc/runit/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit xfce4 xfce4-whiskermenu-plugin network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/pipewire.desktop -o /etc/xdg/autostart/pipewire.desktop
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/artix-pipewire-launcher -o /usr/bin/artix-pipewire-launcher
chmod 0755 /usr/bin/artix-pipewire-launcher
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-jack2 lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[lib32]\n#Include = /etc/pacman.d/mirrorlist@[lib32]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[lib32-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[lib32-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib-testing]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Artix-Stable-S6()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pacman/raw/branch/master/pacman.conf -o /etc/pacman_artix.conf
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman_artix.conf
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-arch
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/artix-mirrorlist/raw/branch/master/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@^Server@#Server@g' /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Artix}" ]; then
	echo 'Server = ${mirror_Artix}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://ftp.sh.cvut.cz/artix-linux https://ftp.crifo.org/artix/repos https://artix.wheaton.edu/repos; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/world/os/x86_64/world.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix.gpg -o /usr/share/pacman/keyrings/artix.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-trusted -o /usr/share/pacman/keyrings/artix-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-revoked -o /usr/share/pacman/keyrings/artix-revoked
pacman-key --populate artix
pacstrap -C /etc/pacman_artix.conf -G /mnt base base-devel s6-base elogind-s6 mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
cp /etc/pacman.d/mirrorlist-arch /mnt/etc/pacman.d/mirrorlist-arch
cp /etc/pacman_artix.conf /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
echo -e "\n# Arch\n#[extra-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-s6 wpa_supplicant bluez bluez-s6 cryptsetup cryptsetup-s6 e2fsprogs ntfs-3g nano acpid acpid-s6 curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
touch /etc/s6/adminsv/default/contents.d/cryptsetup /etc/s6/adminsv/default/contents.d/bluetoothd /etc/s6/adminsv/default/contents.d/NetworkManager
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets at-spi2-core avahi avahi-s6 cups cups-s6 ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pamac pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-roboto-mono udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="/etc/s6/adminsv/default/contents.d/avahi-daemon /etc/s6/adminsv/default/contents.d/cupsd"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rm /etc/s6/adminsv/default/contents.d/NetworkManager
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 enlightenment terminology connman connman-s6 xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm /etc/s6/adminsv/default/contents.d/connmand
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-s6 gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/gdm
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-s6 gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/gdm
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager mate-applets xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-s6 sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/sddm
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-s6 sddm-theme-artix plasma dolphin konsole packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/sddm
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 xfce4 xfce4-whiskermenu-plugin network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
s6-db-reload
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/pipewire.desktop -o /etc/xdg/autostart/pipewire.desktop
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/artix-pipewire-launcher -o /usr/bin/artix-pipewire-launcher
chmod 0755 /usr/bin/artix-pipewire-launcher
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-jack2 lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[lib32]\n#Include = /etc/pacman.d/mirrorlist@[lib32]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Artix-Testing-S6()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pacman/raw/branch/master/pacman.conf -o /etc/pacman_artix.conf
sed -i -z 's@#\[system-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[system-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i -z 's@#\[world-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[world-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i -z 's@#\[galaxy-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[galaxy-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman_artix.conf
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-arch
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/artix-mirrorlist/raw/branch/master/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@^Server@#Server@g' /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Artix}" ]; then
	echo 'Server = ${mirror_Artix}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://ftp.sh.cvut.cz/artix-linux https://ftp.crifo.org/artix/repos https://artix.wheaton.edu/repos; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/world/os/x86_64/world.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix.gpg -o /usr/share/pacman/keyrings/artix.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-trusted -o /usr/share/pacman/keyrings/artix-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-revoked -o /usr/share/pacman/keyrings/artix-revoked
pacman-key --populate artix
pacstrap -C /etc/pacman_artix.conf -G /mnt base base-devel s6-base elogind-s6 mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
cp /etc/pacman.d/mirrorlist-arch /mnt/etc/pacman.d/mirrorlist-arch
cp /etc/pacman_artix.conf /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
echo -e "\n# Arch\n[extra-testing]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-s6 wpa_supplicant bluez bluez-s6 cryptsetup cryptsetup-s6 e2fsprogs ntfs-3g nano acpid acpid-s6 curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
touch /etc/s6/adminsv/default/contents.d/cryptsetup /etc/s6/adminsv/default/contents.d/bluetoothd /etc/s6/adminsv/default/contents.d/NetworkManager
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets at-spi2-core avahi avahi-s6 cups cups-s6 ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pamac pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-roboto-mono udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="/etc/s6/adminsv/default/contents.d/avahi-daemon /etc/s6/adminsv/default/contents.d/cupsd"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rm /etc/s6/adminsv/default/contents.d/NetworkManager
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 enlightenment terminology connman connman-s6 xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm /etc/s6/adminsv/default/contents.d/connmand
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-s6 gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/gdm
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-s6 gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/gdm
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager mate-applets xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-s6 sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/sddm
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-s6 sddm-theme-artix plasma dolphin konsole packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/sddm
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 xfce4 xfce4-whiskermenu-plugin network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-s6 xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
touch ${desktop_services} /etc/s6/adminsv/default/contents.d/lightdm
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
s6-db-reload
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/pipewire.desktop -o /etc/xdg/autostart/pipewire.desktop
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/artix-pipewire-launcher -o /usr/bin/artix-pipewire-launcher
chmod 0755 /usr/bin/artix-pipewire-launcher
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-jack2 lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[lib32]\n#Include = /etc/pacman.d/mirrorlist@[lib32]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[lib32-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[lib32-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib-testing]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Artix-Stable-Dinit()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pacman/raw/branch/master/pacman.conf -o /etc/pacman_artix.conf
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman_artix.conf
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-arch
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/artix-mirrorlist/raw/branch/master/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@^Server@#Server@g' /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Artix}" ]; then
	echo 'Server = ${mirror_Artix}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://ftp.sh.cvut.cz/artix-linux https://ftp.crifo.org/artix/repos https://artix.wheaton.edu/repos; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/world/os/x86_64/world.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix.gpg -o /usr/share/pacman/keyrings/artix.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-trusted -o /usr/share/pacman/keyrings/artix-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-revoked -o /usr/share/pacman/keyrings/artix-revoked
pacman-key --populate artix
pacstrap -C /etc/pacman_artix.conf -G /mnt base base-devel dinit elogind-dinit mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
cp /etc/pacman.d/mirrorlist-arch /mnt/etc/pacman.d/mirrorlist-arch
cp /etc/pacman_artix.conf /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
echo -e "\n# Arch\n#[extra-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-dinit wpa_supplicant bluez bluez-dinit cryptsetup cryptsetup-dinit e2fsprogs ntfs-3g nano acpid acpid-dinit curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
ln -s ../cryptsetup ../bluetoothd ../NetworkManager /etc/dinit.d/boot.d/
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets at-spi2-core avahi avahi-dinit cups cups-dinit ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pamac pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-roboto-mono udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="../avahi-daemon ../cupsd"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic greetd-dinit packagekit xdg-desktop-portal-gtk
ln -s ${desktop_services} ../greetd /etc/dinit.d/boot.d/
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rm /etc/dinit.d/boot.d/NetworkManager
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit enlightenment terminology connman connman-dinit xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm ../connmand /etc/dinit.d/boot.d/
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-dinit gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
ln -s ${desktop_services} ../gdm /etc/dinit.d/boot.d/
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-dinit network-manager-applet gnome-keyring xdg-desktop-portal-gnome
ln -s ${desktop_services} ../gdm /etc/dinit.d/boot.d/
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager mate-applets xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-dinit sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
ln -s ${desktop_services} ../sddm /etc/dinit.d/boot.d/
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-dinit sddm-theme-artix plasma dolphin konsole packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
ln -s ${desktop_services} ../sddm /etc/dinit.d/boot.d/
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit xfce4 xfce4-whiskermenu-plugin network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/pipewire.desktop -o /etc/xdg/autostart/pipewire.desktop
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/artix-pipewire-launcher -o /usr/bin/artix-pipewire-launcher
chmod 0755 /usr/bin/artix-pipewire-launcher
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-jack2 lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[lib32]\n#Include = /etc/pacman.d/mirrorlist@[lib32]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Artix-Testing-Dinit()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pacman/raw/branch/master/pacman.conf -o /etc/pacman_artix.conf
sed -i -z 's@#\[system-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[system-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i -z 's@#\[world-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[world-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i -z 's@#\[galaxy-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[galaxy-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman_artix.conf
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman_artix.conf
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-arch
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/artix-mirrorlist/raw/branch/master/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@^Server@#Server@g' /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Artix}" ]; then
	echo 'Server = ${mirror_Artix}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://ftp.sh.cvut.cz/artix-linux https://ftp.crifo.org/artix/repos https://artix.wheaton.edu/repos; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/world/os/x86_64/world.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix.gpg -o /usr/share/pacman/keyrings/artix.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-trusted -o /usr/share/pacman/keyrings/artix-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/artix/artix-keyring/raw/branch/master/artix-revoked -o /usr/share/pacman/keyrings/artix-revoked
pacman-key --populate artix
pacstrap -C /etc/pacman_artix.conf -G /mnt base base-devel dinit elogind-dinit mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
cp /etc/pacman.d/mirrorlist-arch /mnt/etc/pacman.d/mirrorlist-arch
cp /etc/pacman_artix.conf /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
echo -e "\n# Arch\n[extra-testing]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-dinit wpa_supplicant bluez bluez-dinit cryptsetup cryptsetup-dinit e2fsprogs ntfs-3g nano acpid acpid-dinit curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
ln -s ../cryptsetup ../bluetoothd ../NetworkManager /etc/dinit.d/boot.d/
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets at-spi2-core avahi avahi-dinit cups cups-dinit ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pamac pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-roboto-mono udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="../avahi-daemon ../cupsd"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic greetd-dinit packagekit xdg-desktop-portal-gtk
ln -s ${desktop_services} ../greetd /etc/dinit.d/boot.d/
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rm /etc/dinit.d/boot.d/NetworkManager
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit enlightenment terminology connman connman-dinit xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm ../connmand /etc/dinit.d/boot.d/
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-dinit gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
ln -s ${desktop_services} ../gdm /etc/dinit.d/boot.d/
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gdm-dinit gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
ln -s ${desktop_services} ../gdm /etc/dinit.d/boot.d/
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager mate-applets xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-dinit sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
ln -s ${desktop_services} ../sddm /etc/dinit.d/boot.d/
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard sddm-dinit sddm-theme-artix plasma dolphin konsole packagekit-qt6 falkon breeze-gtk breeze-icons xdg-desktop-portal-kde
ln -s ${desktop_services} ../sddm /etc/dinit.d/boot.d/
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit xfce4 xfce4-whiskermenu-plugin network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lightdm-dinit xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk
ln -s ${desktop_services} ../lightdm /etc/dinit.d/boot.d/
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/pipewire.desktop -o /etc/xdg/autostart/pipewire.desktop
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitea.artixlinux.org/packages/pipewire/raw/branch/master/artix-pipewire-launcher -o /usr/bin/artix-pipewire-launcher
chmod 0755 /usr/bin/artix-pipewire-launcher
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-jack2 lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[lib32]\n#Include = /etc/pacman.d/mirrorlist@[lib32]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[lib32-gremlins]\n#Include = /etc/pacman.d/mirrorlist@[lib32-gremlins]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "sed -i -z 's@#\[multilib-testing]\n#Include = /etc/pacman.d/mirrorlist-arch@[multilib-testing]\nInclude = /etc/pacman.d/mirrorlist-arch@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Bazzite()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
if [ ! -z "${mirror_Fedora}" ]; then
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora-updates-testing.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora-updates-testing.repo
fi
dnf update -y
dnf install -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl ostree sbsigntools strace sudo tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
ostree admin init-fs /mnt
if [ ! -z "${mirror_Fedora_Atomic}" ]; then
	ostree --repo=/mnt/ostree/repo remote add --if-not-exists --set=gpgkeypath=/etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$(echo ${fedora_version} | tr A-Z a-z)-primary atomic ${mirror_Fedora_Atomic}
else
	ostree --repo=/mnt/ostree/repo remote add --if-not-exists --set=gpgkeypath=/etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$(echo ${fedora_version} | tr A-Z a-z)-primary atomic $(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://ostree.fedoraproject.org/mirrorlist)
fi
ostree --repo=/mnt/ostree/repo pull --depth 1 atomic:fedora/$(echo ${fedora_version} | tr A-Z a-z)/$(uname -m)/$(if echo ${environment} | tr A-Z a-z | grep -q gnome; then echo "silverblue"; else echo "kinoite"; fi)
ostree admin --sysroot=/mnt os-init fedora
ostree admin --sysroot=/mnt deploy --os=fedora atomic:fedora/$(echo ${fedora_version} | tr A-Z a-z)/$(uname -m)/$(if echo ${environment} | tr A-Z a-z | grep -q gnome; then echo "silverblue"; else echo "kinoite"; fi)
mkdir /atomic
mount --move /mnt /atomic
ostreedir=\$(find /atomic/ostree/deploy/fedora/deploy/ -maxdepth 1 | grep "\.0$")
mount --bind \${ostreedir} /mnt
mount --bind /atomic /mnt/sysroot
mount --bind /mnt/sysroot/ostree/deploy/fedora/var /mnt/var
mount --move /atomic/boot /mnt/boot
mkdir -p "\$(realpath /mnt/home)" "\$(realpath /mnt/root)"
chmod 0750 "\$(realpath /mnt/root)"
if mountpoint -q /atomic/home; then mount --move /atomic/home /mnt/home; fi
if [ ! -z ${swap_size} ] && [ ${swap_size} -ne 0 ]; then
	mkdir -p "\$(realpath /mnt/var/swap)"
	if mountpoint -q /atomic/var/swap; then mount --move /atomic/var/swap /mnt/var/swap; fi
fi
$(if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		if [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home/*" ]] && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root/*" ]] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/var/*" ]]; then
			cat <<CUSTOM_MOUNTS
mkdir -p /mnt/var$(get_extra_partitions_attribute mountpoint ${i})
if mountpoint -q /atomic$(get_extra_partitions_attribute mountpoint ${i}); then mount --move /atomic$(get_extra_partitions_attribute mountpoint ${i}) /mnt/var$(get_extra_partitions_attribute mountpoint ${i}); fi
CUSTOM_MOUNTS
		else
			cat <<CUSTOM_MOUNTS
mkdir -p /mnt$(get_extra_partitions_attribute mountpoint ${i})
if mountpoint -q /atomic$(get_extra_partitions_attribute mountpoint ${i}); then mount --move /atomic$(get_extra_partitions_attribute mountpoint ${i}) /mnt$(get_extra_partitions_attribute mountpoint ${i}); fi
CUSTOM_MOUNTS
		fi
	done
fi)
if [ -f /atomic/root/encryption.key ]; then mv /atomic/root/encryption.key /mnt/root/encryption.key; fi
mkdir -p /mnt/etc/secureboot_key
ln -s /usr/share/ublue-os/etc/pki/akmods/certs/akmods-ublue.der /mnt/etc/secureboot_key/MOK.der
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
mkdir /boot/linuxloops
if [ "${install_type}" == "image" ]; then
	mv /tmp/linuxloops/install_initramfs /boot/linuxloops/linuxloops
	chmod 0755 /boot/linuxloops/linuxloops
	(cd /boot/linuxloops && find . | cpio -o -H newc | gzip > /boot/linuxloops/linuxloops.img)
else
	rm /tmp/linuxloops/install_initramfs
fi
/usr/lib/ostree/ostree-remount
rpm-ostree start-daemon
rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/$(echo ${environment} | tr A-Z a-z | sed 's@/@-@g')$(if [ "${nvidia}" == "Yes" ]; then echo "-nvidia"; fi):$(echo ${bazzite_version} | tr A-Z a-z)
if echo ${environment} | tr A-Z a-z | grep -q gnome; then
	flatpaks="app/org.mozilla.firefox app/org.gnome.baobab/x86_64/stable app/org.gnome.Calculator/x86_64/stable app/org.gnome.Calendar/x86_64/stable app/org.gnome.Characters/x86_64/stable app/org.gnome.Snapshot/x86_64/stable app/org.gnome.clocks/x86_64/stable app/org.gnome.Connections/x86_64/stable app/org.gnome.Contacts/x86_64/stable app/org.gnome.Evince/x86_64/stable app/org.gnome.Extensions/x86_64/stable app/org.gnome.font-viewer/x86_64/stable app/org.gnome.TextEditor/x86_64/stable app/org.gnome.Loupe/x86_64/stable app/org.gnome.Logs/x86_64/stable app/org.gnome.Maps/x86_64/stable app/org.fedoraproject.MediaWriter/x86_64/stable app/org.gnome.NautilusPreviewer/x86_64/stable app/org.gnome.Weather/x86_64/stable"
else
	flatpaks="app/org.kde.elisa/x86_64/stable app/org.kde.gwenview/x86_64/stable app/org.kde.kcalc/x86_64/stable app/org.kde.kmahjongg/x86_64/stable app/org.kde.kmines/x86_64/stable app/org.kde.kolourpaint/x86_64/stable app/org.kde.krdc/x86_64/stable app/org.kde.okular/x86_64/stable app/org.kde.skanpage/x86_64/stable"
fi
flatpak remote-add --if-not-exists --system flathub https://dl.flathub.org/repo/flathub.flatpakrepo
chmod u+s /usr/bin/bwrap
flatpak install --noninteractive --assumeyes \${flatpaks} \$(cat /ostree/deploy/fedora/deploy/\$(ostree admin status | grep '(staged)' | cut -d' ' -f4)/usr/share/ublue-os/bazzite/flatpak/install | sed -z 's@\n@ @g')
chmod u-s /usr/bin/bwrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
case "${environment}" in
	'Bazzite/Gnome'|'Bazzite/Gnome/Nvidia'|'Bazzite/Gnome/Nvidia/Open')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=gnome-wayland' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Bazzite'|'Bazzite/Nvidia'|'Bazzite/Nvidia/Open')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=plasma' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

kernel_parameters="bluetooth.disable_ertm=1 preempt=full"

initramfs_type="iso_init"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nrpm-ostree -y install ${custom_packages}" > "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_BlendOS()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
pacstrap -G /mnt base base-devel btrfs-progs cpio grub mkinitcpio ntfs-3g sbsigntools
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
/tmp/linuxloops/install_settings
rm /tmp/linuxloops/install_settings
pacman-key --init
pacman-key --populate
mkdir -p /boot/grub
grub-mkconfig -o /boot/grub/grub.cfg
if [ ! -z "${mirror_BlendOS}" ]; then
	echo -e '[breakfast]\nServer = ${mirror_BlendOS}\nSigLevel = Never' >> /etc/pacman.conf
else
	echo -e '[breakfast]\nServer = https://pkg-repo.blendos.co\nSigLevel = Never' >> /etc/pacman.conf
fi
pacman -Syu --noconfirm --needed --ask 4 filesystem-blend akshara
ln -sf /run/NetworkManager/resolv.conf /etc/resolv.conf
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

if [ "${environment}" == "None" ]; then
	install_desktop="
echo \"track: 'blendos-base'\" >> /system.yaml
"
else
	custom_packages="accountsservice adobe-source-code-pro-fonts alsa-lib alsa-topology-conf alsa-ucm-conf alsa-utils archlinux-wallpaper at-spi2-core avahi blendos-wallpapers blend-web-store bubblewrap cups ffmpeg flatpak fwupd gvfs iio-sensor-proxy iptables intel-media-driver libva-mesa-driver nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse polkit sof-firmware system-config-printer ttf-dejavu ttf-roboto udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio wireplumber xorg-xhost xorg-server xorg-xinput zstd ${custom_packages}"
	case "${environment}" in
		'Cinnamon')
		default_session="cinnamon"
		install_desktop="
echo \"track: 'cinnamon'\" >> /system.yaml
"
		custom_packages="gnome-terminal nemo network-manager-applet gnome-keyring papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations ${custom_packages}"
		;;
		'Gnome')
		default_session="gnome-wayland"
		install_desktop="
echo \"track: 'gnome'\" >> /system.yaml
"
		custom_packages=" network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome ${custom_packages}"
		;;
		'Lxqt')
		default_session="lxqt"
		install_desktop="
echo \"track: 'lxqt'\" >> /system.yaml
"
		custom_packages="network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk ${custom_packages}"
		;;
		'Mate')
		default_session="mate"
		install_desktop="
echo \"track: 'mate'\" >> /system.yaml
"
		custom_packages="mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk ${custom_packages}"
		;;
		'Plasma')
		default_session="plasma"
		install_desktop="
echo \"track: 'plasma'\" >> /system.yaml
"
		custom_packages="dolphin konsole kscreen kde-gtk-config xsettingsd breeze-gtk breeze-icons xdg-desktop-portal-kde ${custom_packages}"
		;;
		'Xfce')
		default_session="xfce"
		install_desktop="
echo \"track: 'xfce'\" >> /system.yaml
"
		custom_packages="blueman network-manager-applet gnome-keyring xfce4-pulseaudio-plugin papirus-icon-theme xdg-desktop-portal-gtk ${custom_packages}"
		;;
	esac
fi
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
mkdir -p /usr/etc
cat >/system.yaml <<'SYSTEMYAML'
repo: 'https://pkg-repo.blendos.co'
arch-repo: 'https://geo.mirror.pkgbuild.com'
impl: 'https://github.com/blend-os/tracks/raw/main'
SYSTEMYAML
${install_desktop}
echo -e "packages:\n  - 'btrfs-progs'\n  - 'glibc-locales'\n  - 'ntfs-3g'\n  - 'sbsigntools'\n  - 'xdg-user-dirs'" >> /system.yaml
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="\${custom_packages} lib32-nvidia-utils"; fi
			echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf
		else
			custom_packages="${custom_packages}"
		fi
		sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist@[multilib]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf
	fi
	for i in \${custom_packages}; do echo "  - '\${i}'" >> /system.yaml; done
fi
if [ "${nvidia}" == "Yes" ]; then echo "  - 'nvidia-dkms'" >> /system.yaml; fi
echo -e "aur-packages:\n  - 'aur/python-gbinder'\n  - 'shim-signed'" >> /system.yaml
if [ "${surface}" == "Yes" ]; then echo -e "  - 'binder_linux-dkms'" >> /system.yaml; fi
echo -e "commands:" >> /system.yaml;
if [ "${surface}" == "Yes" ]; then
cat >>/system.yaml <<SYSTEMYAML
  - 'curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/linux-surface/linux-surface/raw/refs/heads/master/pkg/keys/surface.asc | pacman-key --add -'
  - 'pacman-key --finger 56C464BAAC421453'
  - 'pacman-key --lsign-key 56C464BAAC421453'
  - 'echo -e "[linux-surface]\nServer = https://pkg.surfacelinux.com/arch/" >> /etc/pacman.conf'
  - 'pacman -Syu'
  - 'pacman -Rsc --noconfirm linux-zen linux-zen-headers'
  - 'pacman -S --noconfirm --needed linux-surface linux-surface-headers iptsd libcamera libcamera-tools gst-plugin-libcamera base-devel git fakeroot v4l2loopback-dkms'
  - 'usermod -aG video "${useraccount_name}"'
SYSTEMYAML
fi
if [ "${root_encryption}" == "Yes" ]; then add_encryption="encrypt "; fi
cat >>/system.yaml <<SYSTEMYAML
  - 'ln -s /boot/linuxloops/initcpio-hook/linuxloops /etc/initcpio/install/linuxloops'
  - 'echo "HOOKS=(base udev autodetect keyboard keymap modconf block \${add_encryption}akshara filesystems fsck linuxloops)" > /etc/mkinitcpio.conf.d/linuxloops.conf'
  - 'if [ -f /proc/1/cwd/system.yaml ] && [ -d /proc/1/cwd/boot/linuxloops ]; then cp -r /proc/1/cwd/boot/linuxloops /boot/; fi'
$(cat /tmp/linuxloops/install_custom_script 2>/dev/null)
SYSTEMYAML
if [ "${nvidia}" == "Yes" ]; then
	echo "  - 'if [ -f /usr/lib/systemd/system/nvidia-suspend.service ]; then systemctl enable nvidia-suspend.service; fi'" >> /system.yaml
	echo "  - 'if [ -f /usr/lib/systemd/system/nvidia-resume.service ]; then systemctl enable nvidia-resume.service; fi'" >> /system.yaml
	echo "  - 'if [ -f /usr/lib/systemd/system/nvidia-hibernate.service ]; then systemctl enable nvidia-hibernate.service; fi'" >> /system.yaml
fi
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
case "${environment}" in
	'Gnome')
		mkdir -p /etc/gdm
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Lxqt')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initcpio"

if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_BlissOS()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion busybox bzip2 ca-certificates coreutils cpio cryptsetup curl dosfstools e2fsprogs efibootmgr gzip libarchive lsof nano ntfs-3g openssl sbsigntools sudo strace tar util-linux unzip xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
/tmp/linuxloops/install_script
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/install_script <<INSTALL_SCRIPT
#!/bin/bash
set -e
mkdir -p /isomount/initramfs /isomount/iso
echo "Downloading BlissOS iso sha256"
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f "\$(curl https://sourceforge.net/projects/blissos-x86/files/Official/BlissOS${blissos_version}/${environment}/ | tr '"' "\n" | grep "sourceforge.net/projects/.*iso/download" | sort -V | tail -1 | sed 's@/download@@g')".sha256/download -o /root/bliss.iso.sha256
echo "Downloading BlissOS iso"
for i in 1 .. 3; do
	if curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f "\$(curl https://sourceforge.net/projects/blissos-x86/files/Official/BlissOS${blissos_version}/${environment}/ | tr '"' "\n" | grep "sourceforge.net/projects/.*iso/download" | sort -V | tail -1)" -o /root/bliss.iso; then
		if [ "\$(sha256sum /root/bliss.iso | cut -d' ' -f1)" == "\$(cat /root/bliss.iso.sha256 | cut -d' ' -f1)" ]; then
			echo "sha256sum verification succeeded"
			break
		else
			echo "sha256sum verification failed, retrying download..."
		fi
	fi
	if [ "\${i}" -eq 3 ]; then echo "Download of BlissOS image failed"; exit 1; fi
done
mount /root/bliss.iso /isomount/iso
install_folder="\$(cat /isomount/iso/efi/boot/android.cfg | grep 'title="' | cut -d' ' -f3)"
mkdir -p /mnt/android-"\${install_folder}"/data
cp /isomount/iso/initrd.img /mnt/android-"\${install_folder}"/
cp /isomount/iso/kernel /mnt/android-"\${install_folder}"/
if [ -f /isomount/iso/system.efs ]; then
	cp /isomount/iso/system.efs /mnt/android-"\${install_folder}"/
else
	cp /isomount/iso/system.sfs /mnt/android-"\${install_folder}"/
fi
cp -r /isomount/iso/boot /mnt/boot/efi/
cp -r /isomount/iso/efi /mnt/boot/efi/
cat >/mnt/boot/efi/boot/grub/grub.cfg <<BLISSCONFIG
set timeout=5
set debug_mode="(DEBUG mode)"
set kdir="/android-\${install_folder}"

source \\\$cmdpath/android.cfg
BLISSCONFIG
if [ "${install_type}" == "image" ]; then
	cd /isomount/initramfs
	mkdir -p ./usr/bin ./usr/local/bin ./usr/local/etc ./usr/local/lib ./usr/sbin
	for i in \$(ldd /usr/bin/blkid | cut -d' ' -f3); do cp "\${i}" ./usr/local/lib/; done
	cp -a /usr/bin/blkid ./usr/local/bin/
	echo 'alias blkid="LD_LIBRARY_PATH=/usr/local/lib /usr/local/lib/ld-linux-x86-64.so.2 /usr/local/bin/blkid"' >> ./usr/local/etc/profile
	for i in \$(ldd /usr/bin/e2fsck | cut -d' ' -f3); do cp "\${i}" ./usr/local/lib/; done
	cp -a /usr/bin/e2fsck ./usr/local/bin/
	echo 'alias e2fsck="LD_LIBRARY_PATH=/usr/local/lib /usr/local/lib/ld-linux-x86-64.so.2 /usr/local/bin/e2fsck"' >> ./usr/local/etc/profile
	for i in \$(ldd /usr/bin/losetup | cut -d' ' -f3); do cp "\${i}" ./usr/local/lib/; done
	cp -a /usr/bin/losetup ./usr/local/bin/
	echo 'alias losetup="LD_LIBRARY_PATH=/usr/local/lib /usr/local/lib/ld-linux-x86-64.so.2 /usr/local/bin/losetup"' >> ./usr/local/etc/profile
	for i in \$(ldd /usr/bin/mkfs.ext4 | cut -d' ' -f3); do cp "\${i}" ./usr/local/lib/; done
	cp -a /usr/bin/mkfs.ext4 ./usr/local/bin/
	echo 'alias mkfs.ext4="LD_LIBRARY_PATH=/usr/local/lib /usr/local/lib/ld-linux-x86-64.so.2 /usr/local/bin/mkfs.ext4"' >> ./usr/local/etc/profile
	for i in \$(ldd /usr/bin/modprobe | cut -d' ' -f3); do cp "\${i}" ./usr/local/lib/; done
	cp -a /usr/bin/modprobe ./usr/local/bin/
	echo 'alias modprobe="LD_LIBRARY_PATH=/usr/local/lib /usr/local/lib/ld-linux-x86-64.so.2 /usr/local/bin/modprobe"' >> ./usr/local/etc/profile
	for i in \$(ldd /usr/bin/ntfs-3g | cut -d' ' -f3); do cp "\${i}" ./usr/local/lib/; done
	cp -a /usr/bin/ntfs-3g ./usr/local/bin/
	echo 'alias ntfs-3g="LD_LIBRARY_PATH=/usr/local/lib /usr/local/lib/ld-linux-x86-64.so.2 /usr/local/bin/ntfs-3g"' >> ./usr/local/etc/profile
	for i in \$(ldd /usr/bin/ntfsfix | cut -d' ' -f3); do cp "\${i}" ./usr/local/lib/; done
	cp -a /usr/bin/ntfsfix ./usr/local/bin/
	echo 'alias ntfsfix="LD_LIBRARY_PATH=/usr/local/lib /usr/local/lib/ld-linux-x86-64.so.2 /usr/local/bin/ntfsfix"' >> ./usr/local/etc/profile
	cp -a /usr/lib/ld-linux-x86-64.so.2 ./usr/local/lib/
	cp -a /usr/lib/libgcc_s.so.1 ./usr/local/lib/
	cat >./linuxloops <<'INITSCRIPT'
#!/bin/busybox sh

busybox mount -t proc none /proc
busybox mount -t sysfs none /sys
busybox --install -s
mkdir -p /dev/block
echo /sbin/mdev > /proc/sys/kernel/hotplug
mdev -s

source /usr/local/etc/profile

if [ ! -z "\$linuxloops_debug" ] && [ "\$linuxloops_debug" -eq 1 ]; then
	echo 0 0 0 0 > /proc/sys/kernel/printk
	exec sh
fi

if { [ ! -z "\$img_uuid" ] || [ ! -z "\$img_part" ]; } && [ ! -z "\$img_path" ]; then
	linuxloops_timeout=0
	until false; do
		if [ ! -z "\$img_uuid" ]; then img_part="\$(blkid --match-token PARTUUID=\$img_uuid | cut -d':' -f1)"; fi
		echo "\$img_uuid | \$img_part"
		if [ -b "\$img_part" ]; then break; fi
		if [ \$linuxloops_timeout == 10 ]; then echo "The boot partition was not found, falling back to shell..." > /dev/kmsg; exec sh; fi
		linuxloops_timeout=\$(( \$linuxloops_timeout + 1 ))
		sleep 1
	done
else
	echo "The grub configuration is invalid, falling back to shell..." > /dev/kmsg
	exec sh
fi

if [ -e "\$img_part" ] && [ ! -z "\$img_path" ]; then
	mkdir /mainroot
	fstype=\$(blkid -s TYPE -o value "\$img_part")
	if [ "\$fstype" == "ntfs" ]; then
		ntfs-3g "\$img_part" /mainroot
	else
		mount -n "\$img_part" /mainroot
	fi
	if [ -f /mainroot/"\$img_path" ]; then
		if [ ! -b /dev/loop0 ]; then mknod -m660 /dev/loop0 b 7 0; fi
		losetup --direct-io=off -P /dev/loop0 /mainroot"\$img_path"
		bootdevice=/dev/loop0
	else
		echo "linuxloops: loopfile \$img_path not found on device \$img_part..." > /dev/kmsg
		exec sh
	fi
fi

sed -i 's@dirname \$BOOT_IMAGE@dirname \$BOOT_IMAGE | cut -d"/" -f2@g' /init
sed -i 's@\[hmnsvx]\[dmrv]\[0-9a-z]\*@loop0p2@g' /init

if [ ! -z "\$linuxloops_debug" ] && [ "\$linuxloops_debug" -eq 2 ]; then
	echo 0 0 0 0 > /proc/sys/kernel/printk
	exec sh
fi

HAS_CTTY=yes exec /init "\$@"
INITSCRIPT
	chmod 0755 ./linuxloops
	find . | cpio -o -H newc > /mnt/linuxloops.img
	cd ../..
	rm -r /isomount/initramfs
fi
umount /isomount/iso
rm /root/bliss.iso
INSTALL_SCRIPT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_script
}

chroot_Brunch()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip libarchive lsof nano openssl sudo strace tar util-linux unzip xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
/tmp/linuxloops/install_script
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/install_script <<INSTALL_SCRIPT
#!/bin/bash
set -e
case "${environment}" in
	'Bobba') board="octopus" ;;
	'Gumboz') board="zork" ;;
	'Jinlon') board="hatch" ;;
	'Reven') board="reven" ;;
	'Shyvana') board="rammus" ;;
	'Voxel') board="volteer" ;;
esac
mkdir -p /isomount/data /isomount/efi /isomount/rootc /isomount/tmp
mkfs.ext4 -E nodiscard -F -L "H-STATE" "${partition_path}"1
mount "${partition_path}"1 /isomount/data
if [ "${brunch_version}" == "Unstable" ]; then brunch_url="https://api.github.com/repos/sebanc/brunch-unstable/releases/latest"; else brunch_url="https://api.github.com/repos/sebanc/brunch/releases/latest"; fi
echo "Downloading Brunch ${brunch_version}"
for i in 1 .. 3; do
	if curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f \$(curl -L -s "\${brunch_url}" | grep browser_download_url | tr -d '"' | sed 's#browser_download_url: ##g') -o /isomount/data/brunch.tar.gz; then
		if [ "\$(sha256sum /isomount/data/brunch.tar.gz | cut -d' ' -f1)" == "\$(curl -L "\${brunch_url}" | sed 's@\\\\n@\n@g' | grep 'release_sha256sum=' | sed 's@"\|,@@g' | cut -d'=' -f2)" ]; then
			echo "sha256sum verification succeeded"
			break
		else
			echo "sha256sum verification failed, retrying download..."
		fi
	fi
	if [ "\${i}" -eq 3 ]; then echo "Download of Brunch failed"; exit 1; fi
done
mkdir -p /isomount/data/brunch
tar zxf /isomount/data/brunch.tar.gz -C /isomount/data/brunch
rm /isomount/data/brunch.tar.gz
if [ "\${board}" == "reven" ]; then
	board_url="https://dl.google.com/dl/edgedl/chromeos/recovery/cloudready_recovery.conf"
else
	board_url="https://dl.google.com/dl/edgedl/chromeos/recovery/recovery.conf"
fi
echo "Downloading ChromeOS recovery image"
for i in 1 .. 3; do
	if curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f \$(curl -L \${board_url} | tr '\n' ' ' | sed 's@  @ \n\n@g' | grep \${board} | tail -1 | tr ' ' '\n' | grep 'url=' | cut -d'=' -f2) -o /isomount/data/recovery.zip; then
		if [ "\$(sha1sum /isomount/data/recovery.zip | cut -d' ' -f1)" == "\$(curl -L \${board_url} | tr '\n' ' ' | sed 's@  @ \n\n@g' | grep \${board} | tail -1 | tr ' ' '\n' | grep 'sha1=' | cut -d'=' -f2)" ]; then
			echo "sha1sum verification succeeded"
			break
		else
			echo "sha1sum verification failed, retrying download..."
		fi
	fi
	if [ "\${i}" -eq 3 ]; then echo "Download of ChromeOS recovery image failed"; exit 1; fi
done
unzip /isomount/data/recovery.zip -d /root
rm -f /isomount/data/recovery.zip
isomount="\$(losetup --show -fP \$(ls /root/chromeos_*.bin))"
for (( i=1; i<=12; i++ )); do
	case \${i} in
		1)
			continue
		;;
		2)
			dd if="\${isomount}"p4 of="${partition_path}""\${i}" bs=1M conv=notrunc status=progress
			continue
		;;
		5)
			dd if="\${isomount}"p3 of="${partition_path}""\${i}" bs=1M conv=notrunc status=progress
			continue
		;;
		7)
			mount /isomount/data/brunch/rootc.img /isomount/tmp
			mkfs.ext4 -E nodiscard -F -L "ROOT-C" "${partition_path}""\${i}"
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "${partition_path}""\${i}"; fi
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "${partition_path}""\${i}"; fi
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "${partition_path}""\${i}"; fi
			mount "${partition_path}""\${i}" /isomount/rootc
			cp -r /isomount/tmp/* /isomount/rootc/
			umount /isomount/rootc
			umount /isomount/tmp
			continue
		;;
		12)
			mount /isomount/data/brunch/efi_secure.img /isomount/tmp
			mkfs.fat -n 'EFI' "${partition_path}""\${i}"
			mount "${partition_path}""\${i}" /isomount/efi
			cp -r /isomount/tmp/* /isomount/efi/
			umount /isomount/efi
			umount /isomount/tmp
			continue
		;;
		6|9|10|11)
			continue
		;;
		*)
			part_source="\${i}"
		;;
	esac
	dd if="\${isomount}"p"\${part_source}" of="${partition_path}""\${i}" bs=1M conv=notrunc status=progress
done
losetup -d "\${isomount}"
rm -rf /isomount/data/*
umount /isomount/data
if [ "${install_type}" == "image" ]; then mkdir -p /mnt/etc/secureboot_key; curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/sebanc/brunch/raw/main/brunch.der -o /mnt/etc/secureboot_key/MOK.der; fi
INSTALL_SCRIPT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_script
}

chroot_CachyOS()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
if [ "${cachyos_version}" == "x86-64-v4" ]; then
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/docker/raw/refs/heads/master/pacman-v4.conf -o /etc/pacman_cachyos.conf
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/CachyOS-PKGBUILDS/raw/refs/heads/master/cachyos-mirrorlist/cachyos-mirrorlist -o /etc/pacman.d/cachyos-mirrorlist
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/CachyOS-PKGBUILDS/raw/refs/heads/master/cachyos-v4-mirrorlist/cachyos-v4-mirrorlist -o /etc/pacman.d/cachyos-v4-mirrorlist

elif [ "${cachyos_version}" == "x86-64-v3" ]; then
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/docker/raw/refs/heads/master/pacman-v3.conf -o /etc/pacman_cachyos.conf
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/CachyOS-PKGBUILDS/raw/refs/heads/master/cachyos-mirrorlist/cachyos-mirrorlist -o /etc/pacman.d/cachyos-mirrorlist
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/CachyOS-PKGBUILDS/raw/refs/heads/master/cachyos-v3-mirrorlist/cachyos-v3-mirrorlist -o /etc/pacman.d/cachyos-v3-mirrorlist
else
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/docker/raw/refs/heads/master/pacman.conf -o /etc/pacman_cachyos.conf
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/CachyOS-PKGBUILDS/raw/refs/heads/master/cachyos-mirrorlist/cachyos-mirrorlist -o /etc/pacman.d/cachyos-mirrorlist
fi
if [ ! -z "${mirror_CachyOS}" ]; then
	if [ -f /etc/pacman.d/cachyos-mirrorlist ]; then sed -i 's@^Server@#Server@g' /etc/pacman.d/cachyos-mirrorlist; echo 'Server = ${mirror_CachyOS}/\$arch/\$repo' >> /etc/pacman.d/cachyos-mirrorlist; fi
	if [ -f /etc/pacman.d/cachyos-v3-mirrorlist ]; then sed -i 's@^Server@#Server@g' /etc/pacman.d/cachyos-v3-mirrorlist; echo 'Server = ${mirror_CachyOS}/\$arch_v3/\$repo' >> /etc/pacman.d/cachyos-v3-mirrorlist; fi
	if [ -f /etc/pacman.d/cachyos-v4-mirrorlist ]; then sed -i 's@^Server@#Server@g' /etc/pacman.d/cachyos-v4-mirrorlist; echo 'Server = ${mirror_CachyOS}/\$arch_v4/\$repo' >> /etc/pacman.d/cachyos-v4-mirrorlist; fi
else
	cur_speed=0; for i in https://cdn.cachyos.org/repo https://mirror.cachyos.org/repo https://us.cachyos.org/repo; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/x86_64/cachyos/cachyos.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}
	if [ -f /etc/pacman.d/cachyos-mirrorlist ]; then sed -i 's@^Server@#Server@g' /etc/pacman.d/cachyos-mirrorlist; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/cachyos-mirrorlist; fi
	if [ -f /etc/pacman.d/cachyos-v3-mirrorlist ]; then sed -i 's@^Server@#Server@g' /etc/pacman.d/cachyos-v3-mirrorlist; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/cachyos-v3-mirrorlist; fi
	if [ -f /etc/pacman.d/cachyos-v4-mirrorlist ]; then sed -i 's@^Server@#Server@g' /etc/pacman.d/cachyos-v4-mirrorlist; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/cachyos-v4-mirrorlist; fi
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/CachyOS-PKGBUILDS/raw/refs/heads/master/cachyos-keyring/cachyos.gpg -o /usr/share/pacman/keyrings/cachyos.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/CachyOS-PKGBUILDS/raw/refs/heads/master/cachyos-keyring/cachyos-trusted -o /usr/share/pacman/keyrings/cachyos-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/CachyOS/CachyOS-PKGBUILDS/raw/refs/heads/master/cachyos-keyring/cachyos-revoked -o /usr/share/pacman/keyrings/cachyos-revoked
pacman-key --populate cachyos
pacstrap -C /etc/pacman_cachyos.conf -G /mnt base base-devel cachyos-keyring cachyos-hooks cachyos-mirrorlist cachyos-v3-mirrorlist cachyos-v4-mirrorlist cachyos-rate-mirrors cachyos-settings
cp /etc/pacman_cachyos.conf /mnt/etc/pacman.conf
if [ -f /etc/pacman.d/cachyos-mirrorlist ]; then cp /etc/pacman.d/cachyos-mirrorlist /mnt/etc/pacman.d/cachyos-mirrorlist; fi
if [ -f /etc/pacman.d/cachyos-v3-mirrorlist ]; then cp /etc/pacman.d/cachyos-v3-mirrorlist /mnt/etc/pacman.d/cachyos-v3-mirrorlist; fi
if [ -f /etc/pacman.d/cachyos-v4-mirrorlist ]; then cp /etc/pacman.d/cachyos-v4-mirrorlist /mnt/etc/pacman.d/cachyos-v4-mirrorlist; fi
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm --needed linux-cachyos linux-cachyos-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service ModemManager.service NetworkManager.service thermald.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cachyos-wallpapers cachyos-plymouth-theme cups ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse wireplumber sof-firmware system-config-printer ttf-dejavu ttf-roboto udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter budgie-desktop nemo gnome-terminal network-manager-applet gnome-keyring gnome-control-center papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter cinnamon cinnamon-settings-daemon gnome-terminal nemo network-manager-applet gnome-keyring blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
systemctl enable lightdm.service
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic packagekit xdg-desktop-portal-gtk
systemctl enable greetd.service
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter enlightenment connman terminology xdg-desktop-portal-gtk
systemctl enable lightdm.service connman.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-terminal gnome-backgrounds nautilus xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter i3-wm i3lock i3status dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman cachyos-i3wm-settings xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate mate-terminal network-manager-applet gnome-keyring blueman mate-media mate-power-manager xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate mate-terminal mate-extra network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 cachyos-kde-settings breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma dolphin konsole packagekit-qt6 cachyos-kde-settings breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 network-manager-applet gnome-keyring blueman xfce4-pulseaudio-plugin cachyos-xfce-settings papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 xfce4-goodies network-manager-applet gnome-keyring blueman cachyos-xfce-settings papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/wallpapers/cachyos-wallpapers/Dracula.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/wallpapers/cachyos-wallpapers/Dracula.png"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
plymouth-set-default-theme cachyos
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/wallpapers/cachyos-wallpapers/Dracula.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-cachyos linux-cachyos-headers"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist@[multilib]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_ChromeOS-Flex()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion busybox bzip2 ca-certificates coreutils cpio cryptsetup curl dosfstools e2fsprogs efibootmgr gzip libarchive lsof nano ntfs-3g openssl sbsigntools sudo strace tar util-linux unzip xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
/tmp/linuxloops/install_script
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

if [ "${environment}" == "Devmode" ]; then dev_mode="cros_debug"; fi

cat >"${bootstrapdir}"/tmp/linuxloops/install_script <<INSTALL_SCRIPT
#!/bin/bash
set -e
mkdir -p /isomount/data /isomount/roota /isomount/rootc /isomount/efi /isomount/tmp
mkfs.ext4 -E nodiscard -F -L "H-STATE" "${partition_path}"1
mount "${partition_path}"1 /isomount/data
echo "Downloading ChromeOS-Flex recovery image"
for i in 1 .. 3; do
	if curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f \$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://dl.google.com/dl/edgedl/chromeos/recovery/cloudready_recovery.conf | tr '\n' ' ' | sed 's@  @ \n\n@g' | grep reven | tail -1 | tr ' ' '\n' | grep 'url=' | cut -d'=' -f2) -o /isomount/data/recovery.zip; then
		if [ "\$(sha1sum /isomount/data/recovery.zip | cut -d' ' -f1)" == "\$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://dl.google.com/dl/edgedl/chromeos/recovery/cloudready_recovery.conf | tr '\n' ' ' | sed 's@  @ \n\n@g' | grep reven | tail -1 | tr ' ' '\n' | grep 'sha1=' | cut -d'=' -f2)" ]; then
			echo "sha1sum verification succeeded"
			break
		else
			echo "sha1sum verification failed, retrying download..."
		fi
	fi
	if [ "\${i}" -eq 3 ]; then echo "Download of ChromeOS-Flex recovery image failed"; exit 1; fi
done
unzip /isomount/data/recovery.zip -d /root
rm -f /isomount/data/recovery.zip
isomount="\$(losetup --show -fP \$(ls /root/chromeos_*.bin))"
for (( i=1; i<=12; i++ )); do
	(echo "x"; echo "u"; echo "\${i}"; echo "\$(blkid -o value -s PARTUUID "\${isomount}"p"\${i}")"; echo "r"; sleep 5; echo "w") | fdisk "${destination_device}" || { echo -e "Partition UUID update failed. Exiting.\n"; exit 1; }
	case \${i} in
		1)
			continue
		;;
		2)
			part_source=4
		;;
		7)
			mkfs.ext4 -E nodiscard -F -L "ROOT-C" "${partition_path}""\${i}"
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "${partition_path}""\${i}"; fi
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "${partition_path}""\${i}"; fi
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "${partition_path}""\${i}"; fi
			continue
		;;
		12)
			mount "\${isomount}"p12 /isomount/tmp
			mkfs.fat -n 'EFI' "${partition_path}""\${i}"
			mount "${partition_path}""\${i}" /isomount/efi
			cp -r /isomount/tmp/* /isomount/efi/
			if [ "${install_type}" == "image" ]; then
				mkdir -p /mnt/etc/secureboot_key
				sbattach --signum 1 --detach /mnt/etc/secureboot_key/MOK.tmp /isomount/efi/syslinux/vmlinuz.A
				openssl pkcs7 -print_certs -inform der -in /mnt/etc/secureboot_key/MOK.tmp -out /mnt/etc/secureboot_key/MOK.pem
				openssl x509 -outform DER -in /mnt/etc/secureboot_key/MOK.pem -out /mnt/etc/secureboot_key/MOK.der
			fi
			umount /isomount/efi
			umount /isomount/tmp
			continue
		;;
		*)
			part_source="\${i}"
		;;
	esac
	dd if="\${isomount}"p"\${part_source}" of="${partition_path}""\${i}" bs=1M conv=notrunc status=progress
done
printf '\000' | dd of="\${isomount}"p3 seek=\$((0x464 + 3)) conv=notrunc count=1 bs=1 status=none
mount "\${isomount}"p3 /mnt
mount --bind /proc /mnt/proc
mount --make-slave /mnt/proc
mount --bind /sys /mnt/sys
mount --make-slave /mnt/sys
mount --bind /dev /mnt/dev
mount --make-slave /mnt/dev
chroot /mnt /bin/bash <<'GPT_PRIORITY'
cgpt add -i 2 -S 0 -T 15 -P 15 "${destination_device}"
cgpt add -i 4 -S 0 -T 15 -P 0 "${destination_device}"
cgpt add -i 6 -S 0 -T 15 -P 0 "${destination_device}"
GPT_PRIORITY
umount /mnt/sys
umount /mnt/proc
umount /mnt/dev
umount /mnt
losetup -d "\${isomount}"
rm -rf /isomount/data/*
umount /isomount/data
if [ "${install_type}" == "image" ]; then
	mount "${partition_path}"7 /isomount/rootc
	mkdir -p /isomount/rootc/initramfs
	cd /isomount/rootc/initramfs
	mkdir -p etc proc sys tmp usr/bin usr/lib usr/mbin usr/sbin
	ln -s /usr/bin bin
	ln -s /usr/lib lib
	ln -s /usr/lib lib64
	ln -s /usr/sbin sbin
	for i in \$(ldd /usr/bin/bash | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/bash ./usr/bin/
	for i in \$(ldd /usr/bin/busybox | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/busybox ./usr/bin/
	for i in \$(ldd /usr/bin/blkid | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/blkid ./usr/mbin/
	for i in \$(ldd /usr/bin/e2fsck | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/e2fsck ./usr/mbin/
	for i in \$(ldd /usr/bin/losetup | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/losetup ./usr/mbin/
	for i in \$(ldd /usr/bin/mkfs.ext4 | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/mkfs.ext4 ./usr/mbin/
	for i in \$(ldd /usr/bin/modprobe | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/modprobe ./usr/mbin/
	for i in \$(ldd /usr/bin/ntfs-3g | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/ntfs-3g ./usr/mbin/
	for i in \$(ldd /usr/bin/ntfsfix | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/ntfsfix ./usr/mbin/
	cp -a /usr/lib/ld-linux-x86-64.so.2 ./usr/lib/
	cp -a /usr/lib/libgcc_s.so.1 ./usr/lib/
	cat >./init <<'INITSCRIPT'
#!/usr/bin/bash
export PATH=/usr/mbin:/usr/sbin:/usr/bin
export LD_LIBRARY_PATH=/usr/lib

busybox mount -t proc none /proc
busybox mount -t sysfs none /sys
busybox mount -t devtmpfs none /dev
busybox --install -s
ln -s /proc/mounts /etc/mtab

if [ ! -z "\$linuxloops_debug" ] && [ "\$linuxloops_debug" -eq 1 ]; then
	echo 0 0 0 0 > /proc/sys/kernel/printk
	exec sh
fi

if { [ ! -z "\$img_uuid" ] || [ ! -z "\$img_part" ]; } && [ ! -z "\$img_path" ]; then
	linuxloops_timeout=0
	until false; do
		if [ ! -z "\$img_uuid" ]; then img_part="\$(blkid --match-token PARTUUID=\$img_uuid | cut -d':' -f1)"; fi
		echo "\$img_uuid | \$img_part"
		if [ -b "\$img_part" ]; then break; fi
		if [ \$linuxloops_timeout == 10 ]; then echo "The boot partition was not found, falling back to shell..." > /dev/kmsg; exec sh; fi
		linuxloops_timeout=\$(( \$linuxloops_timeout + 1 ))
		sleep 1
	done
else
	echo "The grub configuration is invalid, falling back to shell..." > /dev/kmsg
	exec sh
fi

if [ -e "\$img_part" ] && [ ! -z "\$img_path" ]; then
	mkdir /mainroot
	fstype=\$(blkid -s TYPE -o value "\$img_part")
	if [ "\$fstype" == "ntfs" ]; then
		ntfs-3g "\$img_part" /mainroot
	else
		mount -n "\$img_part" /mainroot
	fi
	if [ -f /mainroot/"\$img_path" ]; then
		if [ ! -b /dev/loop0 ]; then mknod -m660 /dev/loop0 b 7 0; fi
		losetup --direct-io=off -P /dev/loop0 /mainroot"\$img_path"
		bootdevice=/dev/loop0
	else
		echo "linuxloops: ChromeOS loopfile \$img_path not found on device \$img_part..." > /dev/kmsg
		exec sh
	fi
fi

if [ ! -z "\$linuxloops_debug" ] && [ "\$linuxloops_debug" -eq 2 ]; then
	echo 0 0 0 0 > /proc/sys/kernel/printk
	exec sh
fi

if [ "\$bootimage" == "B" ]; then bootpart=5; else bootpart=3; fi
printf '\000' | dd of="\$bootdevice"p"\$bootpart" seek=\$((0x464 + 3)) conv=notrunc count=1 bs=1 status=none
mkdir -p chromeosroot
mount "\$bootdevice"p"\$bootpart" /chromeosroot

touch /chromeosroot/.nodelta
cat >/chromeosroot/sbin/chromeos_startup <<'STARTUP'
#!/bin/bash

mount_or_fail()
{
	echo "mount_or_fail was called with the following arguments: \$@"
	if ! mount \$@; then reboot -f; fi
}

mount_with_log()
{
	echo "mount_with_log was called with the following arguments: \$@"
	mount \$@
}

exec 1>>/root/brunch_startup_log
exec 2>>/root/brunch_startup_log
echo "Brunch startup:"

systemd-tmpfiles --create --remove --boot --prefix /dev --prefix /proc --prefix /run

mount_with_log -t debugfs -o nosuid,nodev,noexec,mode=0750,uid=0,gid=\$(cat /etc/group | grep '^debugfs-access:' | cut -d':' -f3) debugfs /sys/kernel/debug
mount_with_log -t tracefs -o nosuid,nodev,noexec,mode=0755 tracefs /sys/kernel/tracing
mount_with_log -t configfs -o nosuid,nodev,noexec configfs /sys/kernel/config
mount_with_log -t bpf -o nosuid,nodev,noexec,mode=0770,gid=\$(cat /etc/group | grep '^bpf-access:' | cut -d':' -f3) bpf /sys/fs/bpf
mount_with_log -t securityfs -o nosuid,nodev,noexec securityfs /sys/kernel/security
sysctl -q --system
mount_with_log -o bind /run/namespaces /run/namespaces
mount_with_log --make-private /run/namespaces

#sed '/^#/d' /usr/share/cros/startup/process_management_policies/*gid_allowlist.txt 2>/dev/null | sed -r '/^\s*\$/d' > /sys/kernel/security/safesetid/gid_allowlist_policy
#sed '/^#/d' /usr/share/cros/startup/process_management_policies/*uid_allowlist.txt 2>/dev/null | sed -r '/^\s*\$/d' > /sys/kernel/security/safesetid/uid_allowlist_policy
#echo '/var' > /sys/kernel/security/chromiumos/inode_security_policies/block_symlink
#echo '/var' > /sys/kernel/security/chromiumos/inode_security_policies/block_fifo
#echo '/var/lib/timezone' > /sys/kernel/security/chromiumos/inode_security_policies/allow_symlink
#echo '/var/log' > /sys/kernel/security/chromiumos/inode_security_policies/allow_symlink
#echo '/home' > /sys/kernel/security/chromiumos/inode_security_policies/allow_symlink
#cat /dev/null > /sys/kernel/security/loadpin/dm-verity

data_partition="\$(df -h --output=source / | tail -1 | sed 's/.\$//')1"
if [ ! -b \$data_partition ]; then echo "data partition \$data_partition was not found."; reboot -f; fi
tune2fs -g 20119 -O encrypt,project,quota,verity -Q usrquota,grpquota,prjquota \$data_partition
mount_or_fail -o nosuid,nodev,noexec,noatime,commit=600,discard \$data_partition /mnt/stateful_partition
if [ -f /mnt/stateful_partition/factory_install_reset ]; then echo "the factory_install_reset file triggered a powerwash."; rm -rf /mnt/stateful_partition/{*,.*}; fi
mount_with_log -o ro,nosuid,nodev,noexec /dev/loop0p8 /usr/share/oem
systemd-tmpfiles --create --remove --boot --prefix /mnt/stateful_partition
mount_or_fail -o bind /mnt/stateful_partition/home /home
mount_with_log -o remount,nosuid,nodev,noexec,nosymfollow /home
if [ -f /etc/init/tpm2-simulator.conf ]; then initctl start tpm2-simulator; fi
mkdir -p /mnt/stateful_partition/encrypted/chronos /mnt/stateful_partition/encrypted/var
chmod 0755 /mnt/stateful_partition/encrypted/chronos /mnt/stateful_partition/encrypted/var
mount_or_fail -o bind /mnt/stateful_partition/encrypted /mnt/stateful_partition/encrypted
mount_or_fail -o bind /mnt/stateful_partition/encrypted/chronos /home/chronos
mount_or_fail -o bind /mnt/stateful_partition/encrypted/var /var
rm -r /var/log
systemd-tmpfiles --create --remove --boot --prefix /home --prefix /var
mount_with_log -o bind /run /var/run
mount_with_log -o bind /run/lock /var/lock

for d in /etc/daemon-store/*/; do
	mkdir -p /run/daemon-store/\$(basename \$d)
	chmod 0755 /run/daemon-store/\$(basename \$d)
	mount_with_log -o bind /run/daemon-store/\$(basename \$d) /run/daemon-store/\$(basename \$d)
	mount_with_log --make-shared /run/daemon-store/\$(basename \$d)
	mkdir -p /run/daemon-store-cache/\$(basename \$d)
	chmod 0755 /run/daemon-store-cache/\$(basename \$d)
	mount_with_log -o bind /run/daemon-store-cache/\$(basename \$d) /run/daemon-store-cache/\$(basename \$d)
	mount_with_log --make-shared /run/daemon-store-cache/\$(basename \$d)
done

mount_with_log -t tmpfs -o nosuid,nodev,noexec media /media
mount_with_log --make-shared /media
systemd-tmpfiles --create --remove --boot --prefix /media

restorecon -r /home/chronos /home/root /home/user /sys/devices/system/cpu /var
for f in /home/.shadow/*; do if [ -f \$f ]; then restorecon \$f; fi; done
for f in /home/.shadow/.*; do if [ -f \$f ]; then restorecon \$f; fi; done
for f in /home/.shadow/*/*; do if [ -f \$f ]; then restorecon \$f; fi; done

mkdir -p /var/log/asan
chmod 1777 /var/log/asan
mkdir -p /mnt/stateful_partition/dev_image
chmod 0755 /mnt/stateful_partition/dev_image
mount_with_log -o bind /mnt/stateful_partition/dev_image /usr/local
mount_with_log -o remount,suid,dev,exec /usr/local
if [ -d /mnt/stateful_partition/var_overlay/cache/dlc-images ]; then mount_with_log -o bind /mnt/stateful_partition/var_overlay/cache/dlc-images /var/cache/dlc-images; fi
if [ -d /mnt/stateful_partition/var_overlay/db/pkg ]; then mount_with_log -o bind /mnt/stateful_partition/var_overlay/db/pkg /var/db/pkg; fi
if [ -d /mnt/stateful_partition/var_overlay/lib/portage ]; then mount_with_log -o bind /mnt/stateful_partition/var_overlay/lib/portage /var/lib/portage; fi

mount_with_log -o remount,ro /sys/kernel/security

exit 0
STARTUP
chmod 0755 /chromeosroot/sbin/chromeos_startup
if [ ! -f /chromeosroot/usr/bin/chroot.real ]; then
	mv /chromeosroot/usr/bin/chroot /chromeosroot/usr/bin/chroot.real
	cat >/chromeosroot/usr/bin/chroot <<'CHROOT'
#!/bin/bash
set -e
if [ "\$EUID" -eq 0 ] && [ "\${1}" == "." ] && [ "\${2}" == "/usr/bin/cros_installer" ]; then
	rootpath=\$(echo "\$(rootdev)" | sed 's/.\$//')
	rm -rf /mnt/stateful_partition/newroot /mnt/stateful_partition/rootc
	mkdir -p /mnt/stateful_partition/newroot /mnt/stateful_partition/rootc
	mount "\$rootpath"7 /mnt/stateful_partition/rootc
	find ./lib/firmware | bsdcpio -o -H newc > /mnt/stateful_partition/rootc/firmwares.img
	find ./lib/modules | bsdcpio -o -H newc > /mnt/stateful_partition/rootc/modules.img
	if [ "\$(rootdev)" == "\$rootpath"3 ]; then
		echo "bootimage=B" > /mnt/stateful_partition/rootc/bootimage.cfg
	else
		echo "bootimage=A" > /mnt/stateful_partition/rootc/bootimage.cfg
	fi
	umount /mnt/stateful_partition/rootc
	chroot.real "\$@"
else
	chroot.real "\$@"
fi
CHROOT
	chmod 0755 /chromeosroot/usr/bin/chroot
fi

umount /chromeosroot
printf '\377' | dd of="\$bootdevice"p"\$bootpart" seek=\$((0x464 + 3)) conv=notrunc count=1 bs=1 status=none
mount -o ro "\$bootdevice"p"\$bootpart" /chromeosroot

mount --move /dev /chromeosroot/dev
mount --move /sys /chromeosroot/sys
mount --move /proc /chromeosroot/proc

sync

if [ ! -z "\$linuxloops_debug" ] && [ "\$linuxloops_debug" -eq 3 ]; then
	echo 0 0 0 0 > /roota/proc/sys/kernel/printk
	exec sh
fi

exec switch_root /chromeosroot /sbin/init "\$@"
INITSCRIPT
	chmod 0755 ./init
	find . | cpio -o -H newc > /isomount/rootc/initramfs.img
	mount -o ro "${partition_path}"3 /isomount/roota
	(cd /isomount/roota; find ./lib/firmware | cpio -o -H newc > /isomount/rootc/firmwares.img)
	(cd /isomount/roota; find ./lib/modules | cpio -o -H newc > /isomount/rootc/modules.img)
	umount /isomount/roota
	cd ../../..
	rm -r /isomount/rootc/initramfs
	umount /isomount/rootc
fi
INSTALL_SCRIPT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_script
}

chroot_Debian-Stable()
{
if [ -z "${mirror_Debian}" ]; then mirror_Debian="http://deb.debian.org/debian"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://deb.debian.org/debian @${mirror_Debian} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${debian_version} | tr A-Z a-z) /mnt ${mirror_Debian}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware
# deb-src ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware

deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware
# deb-src ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware

deb http://deb.debian.org/debian-security $(echo ${debian_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian-security $(echo ${debian_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
SOURCESLIST
apt update
DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-amd64 linux-headers-amd64 initramfs-tools dkms firmware-linux firmware-amd-graphics firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-topology-conf alsa-ucm-conf alsa-utils at-spi2-core avahi-discover cups cups-browsed dbus-user-session dbus-x11 desktop-base ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire-alsa pipewire-audio pipewire-jack pipewire-pulse plymouth-themes system-config-printer udisks2 wireplumber xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-desktop arc-theme nemo network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal paper-icon-theme mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter cinnamon cinnamon-core gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter enlightenment terminology mate-polkit xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt install --purge -y network-manager- connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal nautilus gnome-icon-theme xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 task-gnome-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter i3 i3lock i3status dmenu rxvt-unicode volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde-core lxappearance lxterminal pcmanfm lxde-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxqt-core openbox lxqt-powermanagement lxqt-themes qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-media mate-power-manager mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-mate-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasmawayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop plasma-workspace-wayland kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasmawayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze task-kde-desktop plasma-workspace-wayland polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter xfce4 xfce4-whiskermenu-plugin xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-xfce-desktop xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
[org.mate.interface]
icon-theme='Papirus'
gtk-theme='Adwaita'
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-driver-libs:i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Debian-Testing()
{
if [ -z "${mirror_Debian}" ]; then mirror_Debian="http://deb.debian.org/debian"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://deb.debian.org/debian @${mirror_Debian} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,linux-sysctl-defaults,locales,xz-utils $(echo ${debian_version} | tr A-Z a-z) /mnt ${mirror_Debian}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware
# deb-src ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware

deb http://deb.debian.org/debian-security $(echo ${debian_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian-security $(echo ${debian_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
SOURCESLIST
apt update
DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-amd64 linux-headers-amd64 initramfs-tools dkms firmware-linux firmware-amd-graphics firmware-atheros firmware-intel-graphics firmware-iwlwifi firmware-mediatek firmware-nvidia-graphics firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez systemd-cryptsetup cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-topology-conf alsa-ucm-conf alsa-utils at-spi2-core avahi-discover cups cups-browsed dbus-user-session dbus-x11 desktop-base ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire-alsa pipewire-audio pipewire-jack pipewire-pulse plymouth-themes system-config-printer udisks2 wireplumber xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-desktop-environment arc-theme nemo network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal paper-icon-theme mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter cinnamon cinnamon-core gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter enlightenment terminology mate-polkit xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt install --purge -y network-manager- connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome-session gnome-shell network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-control-center gnome-backgrounds gnome-screensaver gnome-terminal nautilus gnome-icon-theme xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 task-gnome-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter i3 i3lock i3status dmenu rxvt-unicode volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde-core lxterminal pcmanfm lxappearance lxde-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxqt-core openbox lxqt-powermanagement lxqt-themes qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-media mate-power-manager mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-mate-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze task-kde-desktop polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter xfce4 xfce4-whiskermenu-plugin xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-xfce-desktop xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
[org.mate.interface]
icon-theme='Papirus'
gtk-theme='Adwaita'
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-driver-libs:i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Debian-Unstable()
{
if [ -z "${mirror_Debian}" ]; then mirror_Debian="http://deb.debian.org/debian"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://deb.debian.org/debian @${mirror_Debian} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,linux-sysctl-defaults,locales,xz-utils $(echo ${debian_version} | tr A-Z a-z) /mnt ${mirror_Debian}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware
# deb-src ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware
SOURCESLIST
apt update
DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-amd64 linux-headers-amd64 initramfs-tools dkms firmware-linux firmware-amd-graphics firmware-atheros firmware-intel-graphics firmware-iwlwifi firmware-mediatek firmware-nvidia-graphics firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez systemd-cryptsetup cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-topology-conf alsa-ucm-conf alsa-utils at-spi2-core avahi-discover cups cups-browsed dbus-user-session dbus-x11 desktop-base ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire-alsa pipewire-audio pipewire-jack pipewire-pulse plymouth-themes system-config-printer udisks2 wireplumber xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-desktop-environment arc-theme nemo network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal paper-icon-theme mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter cinnamon cinnamon-core gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter enlightenment terminology mate-polkit xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt install --purge -y network-manager- connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal nautilus gnome-icon-theme xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 task-gnome-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter i3 i3lock i3status dmenu rxvt-unicode volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde-core lxappearance lxterminal pcmanfm lxde-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxqt-core openbox lxqt-powermanagement lxqt-themes qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-media mate-power-manager mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-mate-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze task-kde-desktop polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter xfce4 xfce4-whiskermenu-plugin xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-xfce-desktop xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
[org.mate.interface]
icon-theme='Papirus'
gtk-theme='Adwaita'
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-driver-libs:i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Devuan-Stable()
{
if [ -z "${mirror_Devuan}" ]; then mirror_Devuan="http://deb.devuan.org"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://deb.devuan.org/merged @${mirror_Devuan}/merged @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${devuan_version} | tr A-Z a-z) /mnt ${mirror_Devuan}/merged
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Devuan}/merged $(echo ${devuan_version} | tr A-Z a-z) main contrib non-free non-free-firmware
deb ${mirror_Devuan}/merged $(echo ${devuan_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware
deb http://deb.devuan.org/merged $(echo ${devuan_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
#deb ${mirror_Devuan}/merged $(echo ${devuan_version} | tr A-Z a-z)-backports main contrib non-free non-free-firmware
SOURCESLIST
apt update
DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-amd64 linux-headers-amd64 initramfs-tools dkms firmware-linux firmware-amd-graphics firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-topology-conf alsa-ucm-conf alsa-utils at-spi2-core avahi-discover cups cups-browsed dbus-x11 desktop-base devuan-baseconf ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse udisks2 wireplumber system-config-printer xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-desktop budgie-desktop-view arc-theme nemo network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter cinnamon gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter enlightenment terminology mate-polkit xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt install --purge -y network-manager- connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal nautilus gnome-icon-theme xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 task-gnome-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter i3 i3lock i3status dmenu rxvt-unicode volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde-core lxappearance lxterminal pcmanfm lxde-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxqt-core openbox lxqt-powermanagement lxqt-themes qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-media mate-power-manager mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-mate-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasmawayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop plasma-workspace-wayland kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasmawayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze task-kde-desktop plasma-workspace-wayland polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter xfce4 xfce4-whiskermenu-plugin xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-xfce-desktop xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt purge -y slim
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/your-way_deepsea-wide-large.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/your-way_deepsea-wide-large.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/images/desktop-base/your-way_deepsea-wide-large.svg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-driver-libs:i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Devuan-Testing()
{
if [ -z "${mirror_Devuan}" ]; then mirror_Devuan="http://deb.devuan.org"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://deb.devuan.org/merged @${mirror_Devuan}/merged @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${devuan_version} | tr A-Z a-z) /mnt ${mirror_Devuan}/merged
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Devuan}/merged $(echo ${devuan_version} | tr A-Z a-z) main contrib non-free non-free-firmware
SOURCESLIST
apt update
DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-amd64 linux-headers-amd64 initramfs-tools dkms firmware-linux firmware-amd-graphics firmware-atheros firmware-intel-graphics firmware-iwlwifi firmware-mediatek firmware-nvidia-graphics firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-topology-conf alsa-ucm-conf alsa-utils at-spi2-core avahi-discover cups cups-browsed dbus-x11 desktop-base devuan-baseconf ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse udisks2 wireplumber system-config-printer xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-desktop-environment budgie-desktop-view arc-theme nemo network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter cinnamon gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter enlightenment terminology mate-polkit xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt install --purge -y network-manager- connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal nautilus gnome-icon-theme xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 task-gnome-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter i3 i3lock i3status dmenu rxvt-unicode volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde-core lxappearance lxterminal pcmanfm lxde-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxqt-core openbox lxqt-powermanagement lxqt-themes qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-media mate-power-manager mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-mate-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze task-kde-desktop polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter xfce4 xfce4-whiskermenu-plugin xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-xfce-desktop xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt purge -y slim
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/your-way_deepsea-wide-large.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/your-way_deepsea-wide-large.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		mkdir -p /etc/sddm.conf.d
		echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/images/desktop-base/your-way_deepsea-wide-large.svg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-driver-libs:i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Elementary()
{
if [ -z "${mirror_Ubuntu}" ]; then mirror_Ubuntu="http://archive.ubuntu.com/ubuntu"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://archive.ubuntu.com/ubuntu @${mirror_Ubuntu} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${ubuntu_version} | tr A-Z a-z) /mnt ${mirror_Ubuntu}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y software-properties-common
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse
# deb-src ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse

deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse
# deb-src ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
# deb-src http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
SOURCESLIST
echo -e 'Package: *\nPin: release o=LP-PPA-elementary-os-*\nPin-Priority: 1000' > /etc/apt/preferences.d/elementary.pref
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
add-apt-repository ppa:elementary-os/stable -y
add-apt-repository ppa:elementary-os/os-patches -y
apt clean
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') elementary-standard
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-generic linux-headers-generic initramfs-tools dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed update-manager-core sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap language-selector-common
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

case "${environment}" in
	'Full')
	default_session="pantheon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y pantheon pantheon-shell elementary-desktop elementary-artwork
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
if [ "${useraccount_autologin}" == "Yes" ]; then
	groupadd -r autologin
	usermod -aG autologin '${useraccount_name}'
	mkdir -p /etc/lightdm/lightdm.conf.d
	echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} \$(apt search nvidia | grep libnvidia-gl | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(libnvidia-gl-).*' | cut -d' ' -f1 | cut -d '/' -f1):i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Fedora()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
if [ ! -z "${mirror_Fedora}" ]; then
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora-updates-testing.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora-updates-testing.repo
fi
dnf update -y
dnf install -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
mkdir -p /mnt/proc /mnt/sys
mount -t proc none /mnt/proc
mount --bind -o ro /mnt/proc/sys /mnt/proc/sys
mount --make-slave /mnt/proc/sys
mount --bind /sys /mnt/sys
mount --make-slave /mnt/sys
dnf install --installroot=/mnt --use-host-config --releasever $(echo ${fedora_version} | tr A-Z a-z) -y @core dnf-plugin-system-upgrade akmods grubby openssl tar
if [ ! -z "${mirror_Fedora}" ]; then
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /mnt/etc/yum.repos.d/fedora.repo
	sed -i 's@^metalink=@#metalink=@g' /mnt/etc/yum.repos.d/fedora.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /mnt/etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^metalink=@#metalink=@g' /mnt/etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /mnt/etc/yum.repos.d/fedora-updates-testing.repo
	sed -i 's@^metalink=@#metalink=@g' /mnt/etc/yum.repos.d/fedora-updates-testing.repo
fi
umount /mnt/sys
umount /mnt/proc/sys
umount /mnt/proc
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
dnf upgrade --refresh -y
dnf install -y kernel kernel-headers dracut dkms linux-firmware iwlegacy-firmware iwlwifi-dvm-firmware iwlwifi-mvm-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-tui NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr nss-mdns grub2-efi-x64 os-prober shim microcode_ctl sbsigntools mokutil selinux-policy-targeted dosfstools btrfs-progs cpio bubblewrap langpacks-${packages_locale}
dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(echo ${fedora_version} | tr A-Z a-z).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(echo ${fedora_version} | tr A-Z a-z).noarch.rpm
dnf upgrade --refresh -y
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-lib alsa-sof-firmware alsa-topology alsa-utils at-spi2-core avahi cups cups-browsed dbus-x11 dejavu-sans-fonts desktop-backgrounds dnfdragora google-roboto-fonts gvfs-fuse iio-sensor-proxy intel-media-driver mesa-va-drivers mesa-vulkan-drivers nss-mdns plymouth-system-theme system-config-printer udisks2 xdg-user-dirs-gtk xorg-x11-drivers"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter budgie-desktop budgie-desktop-defaults network-manager-applet gnome-keyring gnome-keyring-pam gnome-terminal nemo blueman dnfdragora-updater papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Budgie/Full')
	default_session="budgie-desktop"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @budgie-desktop @budgie-desktop-apps network-manager-applet gnome-keyring gnome-keyring-pam dnfdragora-updater papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter cinnamon clutter-gtk network-manager-applet gnome-keyring gnome-keyring-pam gnome-terminal nemo paper-icon-theme blueman dnfdragora-updater papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @cinnamon-desktop-environment network-manager-applet gnome-keyring gnome-keyring-pam dnfdragora-updater papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
dnf install -y ${desktop_base} gdm gnome-shell network-manager-applet gnome-keyring gnome-keyring-pam gnome-backgrounds gnome-icon-theme nautilus gnome-terminal gnome-software xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
dnf install -y ${desktop_base} gdm @gnome-desktop network-manager-applet gnome-keyring gnome-keyring-pam xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @i3 volumeicon network-manager-applet gnome-keyring gnome-keyring-pam blueman dnfdragora-updater xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @lxde-desktop-environment network-manager-applet gnome-keyring gnome-keyring-pam lxde-icon-theme blueman dnfdragora-updater xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @lxqt-desktop-environment network-manager-applet gnome-keyring gnome-keyring-pam lxqt-themes blueman xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter mate-desktop marco network-manager-applet gnome-keyring gnome-keyring-pam blueman mate-session-manager mate-media mate-power-manager caja mate-terminal mate-themes dnfdragora-updater xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @mate-desktop-environment network-manager-applet gnome-keyring gnome-keyring-pam dnfdragora-updater xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
dnf install -y ${desktop_base} sddm sddm-breeze plasma-desktop plasma-discover plasma-nm bluedevil dolphin konsole pam-kwallet kscreen kde-gtk-config xsettingsd breeze-gtk breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
dnf install -y ${desktop_base} sddm sddm-breeze @kde-desktop-environment xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter xfdesktop xfce4-session xfce4-settings xfce4-notifyd yaru-theme network-manager-applet gnome-keyring gnome-keyring-pam blueman thunar xfce4-appfinder xfce4-pulseaudio-plugin xfce4-power-manager xfce4-terminal  xfce4-settings dnfdragora-updater papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @xfce-desktop-environment network-manager-applet gnome-keyring gnome-keyring-pam dnfdragora-updater papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
dnf install --allowerasing -y rpmfusion-free-appstream-data rpmfusion-nonfree-appstream-data ffmpeg-free gstreamer1-plugins-bad-free-extras libavcodec-free libavdevice-free libavfilter-free libavformat-free libavutil-free libpostproc-free libswresample-free libswscale-free mozilla-openh264 openh264 x264-libs x265-libs
${install_desktop}
systemctl enable ${desktop_services}
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/default.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			mkdir -p /etc/lightdm/lightdm.conf.d
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y ${custom_packages}" > "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Fedora-Atomic()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
if [ ! -z "${mirror_Fedora}" ]; then
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora-updates-testing.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora-updates-testing.repo
fi
dnf update -y
dnf install -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl ostree sbsigntools strace sudo tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
ostree admin init-fs /mnt
if [ ! -z "${mirror_Fedora_Atomic}" ]; then
	ostree --repo=/mnt/ostree/repo remote add --if-not-exists --set=gpgkeypath=/etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$(echo ${fedora_version} | tr A-Z a-z)-primary atomic ${mirror_Fedora_Atomic}
else
	ostree --repo=/mnt/ostree/repo remote add --if-not-exists --set=gpgkeypath=/etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$(echo ${fedora_version} | tr A-Z a-z)-primary atomic $(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://ostree.fedoraproject.org/mirrorlist)
fi
ostree --repo=/mnt/ostree/repo pull --depth 1 atomic:fedora/$(echo ${fedora_version} | tr A-Z a-z)/$(uname -m)/$(echo ${environment} | tr A-Z a-z)
ostree admin --sysroot=/mnt os-init fedora
ostree admin --sysroot=/mnt deploy --os=fedora atomic:fedora/$(echo ${fedora_version} | tr A-Z a-z)/$(uname -m)/$(echo ${environment} | tr A-Z a-z)
mkdir /atomic
mount --move /mnt /atomic
ostreedir=\$(find /atomic/ostree/deploy/fedora/deploy/ -maxdepth 1 | grep "\.0$")
mount --bind \${ostreedir} /mnt
mount --bind /atomic /mnt/sysroot
mount --bind /mnt/sysroot/ostree/deploy/fedora/var /mnt/var
mount --move /atomic/boot /mnt/boot
mkdir -p "\$(realpath /mnt/home)" "\$(realpath /mnt/root)"
chmod 0750 "\$(realpath /mnt/root)"
if mountpoint -q /atomic/home; then mount --move /atomic/home /mnt/home; fi
if [ ! -z ${swap_size} ] && [ ${swap_size} -ne 0 ]; then
	mkdir -p "\$(realpath /mnt/var/swap)"
	if mountpoint -q /atomic/var/swap; then mount --move /atomic/var/swap /mnt/var/swap; fi
fi
$(if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		if [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home/*" ]] && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root/*" ]] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/var/*" ]]; then
			cat <<CUSTOM_MOUNTS
mkdir -p /mnt/var$(get_extra_partitions_attribute mountpoint ${i})
if mountpoint -q /atomic$(get_extra_partitions_attribute mountpoint ${i}); then mount --move /atomic$(get_extra_partitions_attribute mountpoint ${i}) /mnt/var$(get_extra_partitions_attribute mountpoint ${i}); fi
CUSTOM_MOUNTS
		else
			cat <<CUSTOM_MOUNTS
mkdir -p /mnt$(get_extra_partitions_attribute mountpoint ${i})
if mountpoint -q /atomic$(get_extra_partitions_attribute mountpoint ${i}); then mount --move /atomic$(get_extra_partitions_attribute mountpoint ${i}) /mnt$(get_extra_partitions_attribute mountpoint ${i}); fi
CUSTOM_MOUNTS
		fi
	done
fi)
if [ -f /atomic/root/encryption.key ]; then mv /atomic/root/encryption.key /mnt/root/encryption.key; fi
mkdir -p /mnt/etc/secureboot_key
sbattach --signum 1 --detach /mnt/etc/secureboot_key/MOK.tmp /mnt/usr/lib/bootupd/updates/EFI/fedora/grubx64.efi
openssl pkcs7 -print_certs -inform der -in /mnt/etc/secureboot_key/MOK.tmp -out /mnt/etc/secureboot_key/MOK.pem
openssl x509 -outform DER -in /mnt/etc/secureboot_key/MOK.pem -out /mnt/etc/secureboot_key/MOK.der
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

# Add firefox as flatpak, the rest of the flatpak list is sourced from https://pagure.io/pungi-fedora/blob/main/f/fedora.conf
case "${environment}" in
	'Kinoite')
	default_session="plasma"
	flatpaks="app/org.mozilla.firefox app/org.kde.elisa/x86_64/stable app/org.kde.gwenview/x86_64/stable app/org.kde.kcalc/x86_64/stable app/org.kde.kmahjongg/x86_64/stable app/org.kde.kmines/x86_64/stable app/org.kde.kolourpaint/x86_64/stable app/org.kde.krdc/x86_64/stable app/org.kde.okular/x86_64/stable app/org.kde.skanpage/x86_64/stable"
	;;
	'Onyx')
	default_session="budgie-desktop"
	flatpaks="app/org.mozilla.firefox"
	;;
	'Sericea')
	default_session="sway"
	flatpaks="app/org.mozilla.firefox"
	;;
	'Silverblue')
	default_session="gnome-wayland"
	flatpaks="app/org.mozilla.firefox app/org.gnome.baobab/x86_64/stable app/org.gnome.Calculator/x86_64/stable app/org.gnome.Calendar/x86_64/stable app/org.gnome.Characters/x86_64/stable app/org.gnome.Snapshot/x86_64/stable app/org.gnome.clocks/x86_64/stable app/org.gnome.Connections/x86_64/stable app/org.gnome.Contacts/x86_64/stable app/org.gnome.Evince/x86_64/stable app/org.gnome.Extensions/x86_64/stable app/org.gnome.font-viewer/x86_64/stable app/org.gnome.TextEditor/x86_64/stable app/org.gnome.Loupe/x86_64/stable app/org.gnome.Logs/x86_64/stable app/org.gnome.Maps/x86_64/stable app/org.fedoraproject.MediaWriter/x86_64/stable app/org.gnome.NautilusPreviewer/x86_64/stable app/org.gnome.Weather/x86_64/stable"
	;;
esac

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
mkdir /boot/linuxloops
if [ "${install_type}" == "image" ]; then
	mv /tmp/linuxloops/install_initramfs /boot/linuxloops/linuxloops
	chmod 0755 /boot/linuxloops/linuxloops
	(cd /boot/linuxloops && find . | cpio -o -H newc | gzip > /boot/linuxloops/linuxloops.img)
else
	rm /tmp/linuxloops/install_initramfs
fi
/usr/lib/ostree/ostree-remount
rpm-ostree start-daemon
rpm-ostree -y install --apply-live https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-\$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-\$(rpm -E %fedora).noarch.rpm
rpm-ostree update --uninstall rpmfusion-free-release --uninstall rpmfusion-nonfree-release --install rpmfusion-free-release --install rpmfusion-nonfree-release
rpm-ostree override remove firefox firefox-langpacks
flatpak remote-add --if-not-exists --system flathub https://dl.flathub.org/repo/flathub.flatpakrepo
chmod u+s /usr/bin/bwrap
flatpak install --noninteractive --assumeyes ${flatpaks}
chmod u-s /usr/bin/bwrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Silverblue')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Kinoite'|'Sericea')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/default.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			mkdir -p /etc/lightdm/lightdm.conf.d
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="iso_init"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nrpm-ostree -y install ${custom_packages}" > "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_FoxFlake()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<NIXOS_PREPARE_CHROOT
#!/bin/bash
set -e
if [ -f /tmp/linuxloops/install_swap ] && [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then /tmp/linuxloops/install_swap; fi
/tmp/linuxloops/install_secureboot /mnt
/tmp/linuxloops/install_fstab
/tmp/linuxloops/install_initramfs
groupadd -g 30000 nixbld
useradd -u 30000 -g nixbld -G nixbld nixbld
useradd -s /bin/bash -m 'temp'
echo -e 'temp\ntemp' | passwd 'temp'
echo 'temp      ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/90-wheel
sudo -u temp bash << 'NIXOSINSTALL'
set -e
ulimit -n 4096
sudo mkdir -p /nix
sudo chown -R temp /nix
curl --proto '=https' --tlsv1.2 --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://nixos.org/nix/install | sh
source \$HOME/.nix-profile/etc/profile.d/nix.sh
nix-channel --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixpkgs
nix-channel --update
nix-env -iA nixpkgs.coreutils nixpkgs.util-linux nixpkgs.nixos-install-tools
nix-channel --remove nixpkgs
sudo \$(command -v nix-channel) --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixos
sudo \$(command -v nix-channel) --update
sudo \$(command -v nix) --extra-experimental-features "nix-command flakes" flake update --flake /mnt/etc/nixos
sudo NIX_PATH=\$HOME/.nix-defexpr/channels_root/nixos NIX_PROFILES=\$HOME/.nix-profile PATH=\$HOME/.nix-profile/bin:/run/current-system/sw/bin \$(command -v nixos-install) --flake /mnt/etc/nixos#$(echo ${distribution} | tr A-Z a-z) --no-root-passwd
NIXOSINSTALL
NIXOS_PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

if [ "${useraccount_autologin}" == "Yes" ]; then
	autologin_commands="
  # Autologin
  foxflake.environment.autologinUser = \"${useraccount_name}\";
"
fi

initramfs_type="nixos_config"
}

chroot_Gentoo-Openrc()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
stage3="\$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gentoo.osuosl.org/releases/amd64/autobuilds/latest-stage3-amd64-openrc.txt | grep 'stage3' | cut -d' ' -f1)"
echo "Downloading Gentoo stage 3"
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gentoo.osuosl.org/releases/amd64/autobuilds/"\${stage3}" -o /gentoo-stage3.tar.xz || { echo -e "Gentoo stage 3 image download failed."; exit 1; }
echo "Downloading Gentoo stage 3 sha256sum"
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gentoo.osuosl.org/releases/amd64/autobuilds/"\${stage3}".sha256 -o /gentoo-stage3.tar.xz.sha256 || { echo -e "Gentoo stage 3 sha256 download failed."; exit 1; }
echo "Verifying Gentoo stage 3 sha256sum"
sed -i "s@\$(basename \${stage3})@gentoo-stage3.tar.xz@g" /gentoo-stage3.tar.xz.sha256
sha256sum -c /gentoo-stage3.tar.xz.sha256 || { echo -e "Gentoo stage 3 checksum failed."; exit 1; }
echo "Importing Gentoo master key"
gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv 534E4209AB49EEE1C19D96162C44695DB9F6043D || { echo -e "Gentoo stage 3 master key download failed."; exit 1; }
echo "Downloading Gentoo stage 3 signature"
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gentoo.osuosl.org/releases/amd64/autobuilds/"\${stage3}".asc -o /gentoo-stage3.tar.xz.asc || { echo -e "Gentoo stage 3 signature download failed."; exit 1; }
echo "Verifying Gentoo stage 3 signature"
gpg --verify /gentoo-stage3.tar.xz.asc /gentoo-stage3.tar.xz || { echo -e "Gentoo stage 3 signature verification failed."; exit 1; }
tar xf /gentoo-stage3.tar.xz -C /mnt || { echo -e "Gentoo stage 3 extraction failed."; exit 1; }
rm /gentoo-stage3.tar.xz
if [ ! -z "${mirror_Gentoo}" ]; then
	sed -i 's@https://distfiles.gentoo.org@${mirror_Gentoo}@g' /mnt/etc/portage/binrepos.conf/gentoobinhost.conf
fi
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
localedef -i en_US -f UTF-8 en_US.UTF-8
echo "LANG=en_US.UTF-8" > /etc/locale.conf
emerge-webrsync
getuto
/tmp/linuxloops/install_secureboot
rm /tmp/linuxloops/install_secureboot
mkdir /etc/portage/package.license
echo -e "*/* *" >> /etc/portage/package.license/custom
if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
	echo 'ABI_X86="32 64"' >> /etc/portage/make.conf
else
	echo 'ABI_X86="64"' >> /etc/portage/make.conf
fi
echo -e "\nMAKEOPTS=\"--jobs 2\"\nEMERGE_DEFAULT_OPTS=\"--jobs 2\"" >> /etc/portage/make.conf
echo -e "FEATURES=\"getbinpkg\"" >> /etc/portage/make.conf
echo -e "\nGRUB_PLATFORMS=\"efi-64\"" >> /etc/portage/make.conf
echo -e "SECUREBOOT_SIGN_KEY=\"/etc/secureboot_key/MOK.key\"" >> /etc/portage/make.conf
echo -e "SECUREBOOT_SIGN_CERT=\"/etc/secureboot_key/MOK.crt\"" >> /etc/portage/make.conf
echo -e "\nVIDEO_CARDS=\"amdgpu dummy fbdev intel nouveau qxl radeon radeonsi vesa virtualbox\"" >> /etc/portage/make.conf
echo -e "INPUT_DEVICES=\"libinput\"" >> /etc/portage/make.conf
if [ "${environment}" == "None" ]; then
	echo -e "USE=\"bluetooth cryptsetup dbus dracut elogind policykit mount pam -systemd truetype X\"" >> /etc/portage/make.conf
	emerge app-portage/gentoolkit app-eselect/eselect-repository
else
	echo -e "USE=\"a52 aac accessibility acl alsa appindicator bindist bluetooth boost branding cairo cdda cdr chromium client colord cryptsetup cups dbus dracut drm dts dvd eds egl elogind exif flac gif gles2 grub gstreamer gtk gtk3 icu initramfs inspector introspection jpeg keyring lcms libei libnotify lock mbim mdnsresponder-compat minizip modemmanager mount mp3 mpeg networkmanager nss ogg opengl opus pam pango pdf png policykit profiler pulseaudio python qml quick sdl secureboot spell svg sysprof -systemd text theora tiff tracker truetype udev udisks usb vaapi vala vorbis vpx vulkan wayland webchannel webp wpasupplicant X x264 xml xorg xvid zeroconf\"" >> /etc/portage/make.conf
	if [ "${environment}" == "Lxqt" ] || [ "${environment}" == "Plasma" ]; then echo -e 'dev-qt/qtbase libproxy\napp-crypt/qca qt6\napp-text/poppler qt6\nmedia-libs/opencv -gtk3 qt6' > /etc/portage/package.use/linuxloops; fi
	echo -e 'app-crypt/pinentry -gtk\nmedia-libs/tiff -webp\nnet-print/cups -zeroconf' > /etc/portage/package.use/dep_cycle_fix
	emerge app-crypt/pinentry app-portage/gentoolkit app-eselect/eselect-repository dev-util/sysprof dev-util/vulkan-headers dev-util/wayland-scanner media-libs/libsdl2 media-libs/tiff net-print/cups x11-base/xorg-server
	rm /etc/portage/package.use/dep_cycle_fix
fi
emerge -uDN --noconfmem @world sys-kernel/gentoo-kernel-bin sys-kernel/linux-firmware sys-firmware/intel-microcode sys-kernel/dracut net-wireless/wireless-regdb app-admin/sudo sys-fs/ntfs3g net-misc/networkmanager sys-fs/cryptsetup app-editors/nano dev-vcs/git sys-power/acpid net-misc/curl sys-power/thermald app-shells/bash-completion app-crypt/gnupg sys-auth/polkit app-arch/zstd sys-auth/pambase sys-boot/grub sys-boot/os-prober sys-boot/shim app-crypt/sbsigntools sys-fs/dosfstools sys-fs/btrfs-progs app-arch/cpio sys-apps/bubblewrap
echo -e '[main]\nhostname-mode=none' > /etc/NetworkManager/NetworkManager.conf
rc-update add dmcrypt boot
rc-update add bluetooth default
rc-update add NetworkManager default
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="app-admin/system-config-printer gnome-base/gvfs media-fonts/dejavu media-fonts/liberation-fonts media-fonts/roboto media-libs/libva-intel-media-driver media-video/ffmpeg net-print/cups net-print/cups-filters sys-firmware/sof-firmware sys-fs/udisks x11-base/xorg-drivers x11-misc/xdg-user-dirs-gtk"
case "${environment}" in
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} gui-libs/display-manager-init x11-misc/lightdm gnome-extra/cinnamon x11-terms/gnome-terminal gnome-extra/nemo net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} gui-libs/display-manager-init x11-misc/lightdm x11-wm/enlightenment x11-terms/terminology sys-apps/xdg-desktop-portal-gtk
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} gui-libs/display-manager-init gnome-base/gdm gnome-base/gnome x11-terms/gnome-terminal gnome-base/nautilus sys-apps/xdg-desktop-portal-gnome
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"gdm\"@g' /etc/conf.d/display-manager
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} gui-libs/display-manager-init x11-misc/lightdm x11-wm/i3 x11-misc/i3lock x11-misc/i3status x11-misc/dmenu x11-terms/rxvt-unicode media-sound/volumeicon gnome-extra/nm-applet gnome-base/gnome-keyring net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} gui-libs/display-manager-init x11-misc/lightdm lxqt-base/lxqt-meta x11-terms/qterminal gnome-extra/nm-applet gnome-base/gnome-keyring lxqt-base/lxqt-powermanagement net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} gui-libs/display-manager-init x11-misc/lightdm mate-base/mate x11-terms/mate-terminal gnome-extra/nm-applet gnome-base/gnome-keyring mate-extra/mate-power-manager mate-extra/mate-media net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} gui-libs/display-manager-init x11-misc/sddm kde-plasma/plasma-meta kde-apps/konsole kde-plasma/plasma-nm kde-apps/dolphin kde-plasma/xdg-desktop-portal-kde
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"sddm\"@g' /etc/conf.d/display-manager
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} gui-libs/display-manager-init x11-misc/lightdm xfce-base/xfce4-meta x11-terms/xfce4-terminal gnome-extra/nm-applet gnome-base/gnome-keyring net-wireless/blueman xfce-base/xfce4-power-manager net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" != "None" ]; then
	${install_desktop}
	rc-update add elogind boot
	rc-update add dbus default
	rc-update add display-manager default
	rc-update add cupsd default
fi
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
sed -i 's/^password/#password/g' /etc/pam.d/system-auth
echo 'password       required        pam_unix.so nullok sha512 shadow' >> /etc/pam.d/system-auth
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
if [ ! -d /etc/sudoers.d ]; then mkdir -p /etc/sudoers.d; chmod 0750 /etc/sudoers.d; fi
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			mkdir -p /etc/lightdm/lightdm.conf.d
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -q 'steam-launcher'; then
		echo -e "eselect repository enable steam-overlay" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo -e "emerge --sync" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nemerge ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Gentoo-Systemd()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
stage3="\$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gentoo.osuosl.org/releases/amd64/autobuilds/latest-stage3-amd64-systemd.txt | grep 'stage3' | cut -d' ' -f1)"
echo "Downloading Gentoo stage 3"
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gentoo.osuosl.org/releases/amd64/autobuilds/"\${stage3}" -o /gentoo-stage3.tar.xz || { echo -e "Gentoo stage 3 image download failed."; exit 1; }
echo "Downloading Gentoo stage 3 sha256sum"
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gentoo.osuosl.org/releases/amd64/autobuilds/"\${stage3}".sha256 -o /gentoo-stage3.tar.xz.sha256 || { echo -e "Gentoo stage 3 sha256 download failed."; exit 1; }
echo "Verifying Gentoo stage 3 sha256sum"
sed -i "s@\$(basename \${stage3})@gentoo-stage3.tar.xz@g" /gentoo-stage3.tar.xz.sha256
sha256sum -c /gentoo-stage3.tar.xz.sha256 || { echo -e "Gentoo stage 3 checksum failed."; exit 1; }
echo "Importing Gentoo master key"
gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv 534E4209AB49EEE1C19D96162C44695DB9F6043D || { echo -e "Gentoo stage 3 master key download failed."; exit 1; }
echo "Downloading Gentoo stage 3 signature"
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gentoo.osuosl.org/releases/amd64/autobuilds/"\${stage3}".asc -o /gentoo-stage3.tar.xz.asc || { echo -e "Gentoo stage 3 signature download failed."; exit 1; }
echo "Verifying Gentoo stage 3 signature"
gpg --verify /gentoo-stage3.tar.xz.asc /gentoo-stage3.tar.xz || { echo -e "Gentoo stage 3 signature verification failed."; exit 1; }
tar xf /gentoo-stage3.tar.xz -C /mnt || { echo -e "Gentoo stage 3 extraction failed."; exit 1; }
rm /gentoo-stage3.tar.xz
if [ ! -z "${mirror_Gentoo}" ]; then
	sed -i 's@https://distfiles.gentoo.org@${mirror_Gentoo}@g' /mnt/etc/portage/binrepos.conf/gentoobinhost.conf
fi
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
localedef -i en_US -f UTF-8 en_US.UTF-8
echo "LANG=en_US.UTF-8" > /etc/locale.conf
emerge-webrsync
getuto
/tmp/linuxloops/install_secureboot
rm /tmp/linuxloops/install_secureboot
mkdir /etc/portage/package.license
echo -e "*/* *" >> /etc/portage/package.license/custom
if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
	echo 'ABI_X86="32 64"' >> /etc/portage/make.conf
else
	echo 'ABI_X86="64"' >> /etc/portage/make.conf
fi
echo -e "\nMAKEOPTS=\"--jobs 2\"\nEMERGE_DEFAULT_OPTS=\"--jobs 2\"" >> /etc/portage/make.conf
echo -e "FEATURES=\"getbinpkg\"" >> /etc/portage/make.conf
echo -e "\nGRUB_PLATFORMS=\"efi-64\"" >> /etc/portage/make.conf
echo -e "SECUREBOOT_SIGN_KEY=\"/etc/secureboot_key/MOK.key\"" >> /etc/portage/make.conf
echo -e "SECUREBOOT_SIGN_CERT=\"/etc/secureboot_key/MOK.crt\"" >> /etc/portage/make.conf
echo -e "\nVIDEO_CARDS=\"amdgpu dummy fbdev intel nouveau qxl radeon radeonsi vesa virtualbox\"" >> /etc/portage/make.conf
echo -e "INPUT_DEVICES=\"libinput\"" >> /etc/portage/make.conf
if [ "${environment}" == "None" ]; then
	echo -e "USE=\"bluetooth cryptsetup dbus dracut -elogind policykit mount pam systemd truetype X\"" >> /etc/portage/make.conf
	echo "SYSTEMD_KERNEL_INSTALL=0" > /etc/env.d/99no-systemd-kernel-install
	emerge app-portage/gentoolkit app-eselect/eselect-repository
else
	echo -e "USE=\"a52 aac accessibility acl alsa appindicator bindist bluetooth boost branding cairo cdda cdr chromium client colord cryptsetup cups dbus dracut drm dts dvd eds egl -elogind exif flac gif gles2 grub gstreamer gtk gtk3 icu initramfs inspector introspection jpeg keyring lcms libei libnotify lock mbim mdnsresponder-compat minizip modemmanager mount mp3 mpeg networkmanager nss ogg opengl opus pam pango pdf png policykit profiler pulseaudio python qml quick sdl secureboot spell svg sysprof systemd text theora tiff tracker truetype udev udisks usb vaapi vala vorbis vpx vulkan wayland webchannel webp wpasupplicant X x264 xml xorg xvid zeroconf\"" >> /etc/portage/make.conf
	if [ "${environment}" == "Lxqt" ] || [ "${environment}" == "Plasma" ]; then echo -e 'dev-qt/qtbase libproxy\napp-crypt/qca qt6\napp-text/poppler qt6\nmedia-libs/opencv -gtk3 qt6' > /etc/portage/package.use/linuxloops; fi
	echo "SYSTEMD_KERNEL_INSTALL=0" > /etc/env.d/99no-systemd-kernel-install
	echo -e 'app-crypt/pinentry -gtk\nmedia-libs/tiff -webp\nnet-print/cups -zeroconf' > /etc/portage/package.use/dep_cycle_fix
	emerge app-crypt/pinentry app-portage/gentoolkit app-eselect/eselect-repository dev-util/sysprof dev-util/vulkan-headers dev-util/wayland-scanner media-libs/libsdl2 media-libs/tiff net-print/cups x11-base/xorg-server
	rm /etc/portage/package.use/dep_cycle_fix
fi
emerge -uDN --noconfmem @world sys-kernel/gentoo-kernel-bin sys-kernel/linux-firmware sys-firmware/intel-microcode sys-kernel/dracut net-wireless/wireless-regdb app-admin/sudo sys-fs/ntfs3g net-misc/networkmanager sys-fs/cryptsetup app-editors/nano dev-vcs/git sys-power/acpid net-misc/curl sys-power/thermald app-shells/bash-completion app-crypt/gnupg sys-auth/polkit app-arch/zstd sys-auth/pambase sys-boot/grub sys-boot/os-prober sys-boot/shim app-crypt/sbsigntools sys-fs/dosfstools sys-fs/btrfs-progs app-arch/cpio sys-apps/bubblewrap
echo -e '[main]\nhostname-mode=none' > /etc/NetworkManager/NetworkManager.conf
systemctl enable bluetooth.service NetworkManager.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="app-admin/system-config-printer gnome-base/gvfs media-fonts/dejavu media-fonts/liberation-fonts media-fonts/roboto media-libs/libva-intel-media-driver media-video/ffmpeg net-print/cups net-print/cups-filters sys-firmware/sof-firmware sys-fs/udisks x11-base/xorg-drivers x11-misc/xdg-user-dirs-gtk"
case "${environment}" in
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} x11-misc/lightdm gnome-extra/cinnamon x11-terms/gnome-terminal gnome-extra/nemo net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} x11-misc/lightdm x11-wm/enlightenment x11-terms/terminology sys-apps/xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} gnome-base/gdm gnome-base/gnome x11-terms/gnome-terminal gnome-base/nautilus sys-apps/xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} x11-misc/lightdm x11-wm/i3 x11-misc/i3lock x11-misc/i3status x11-misc/dmenu x11-terms/rxvt-unicode media-sound/volumeicon gnome-extra/nm-applet gnome-base/gnome-keyring net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} x11-misc/lightdm lxqt-base/lxqt-meta x11-terms/qterminal gnome-extra/nm-applet gnome-base/gnome-keyring lxqt-base/lxqt-powermanagement net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} x11-misc/lightdm mate-base/mate x11-terms/mate-terminal gnome-extra/nm-applet gnome-base/gnome-keyring mate-extra/mate-power-manager mate-extra/mate-media net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} x11-misc/sddm kde-plasma/plasma-meta kde-apps/konsole kde-plasma/plasma-nm kde-apps/dolphin kde-plasma/xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
emerge -uDN --noconfmem @world ${desktop_base} x11-misc/lightdm xfce-base/xfce4-meta x11-terms/xfce4-terminal gnome-extra/nm-applet gnome-base/gnome-keyring net-wireless/blueman xfce-base/xfce4-power-manager net-wireless/blueman sys-apps/xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" != "None" ]; then
	${install_desktop}
	systemctl enable cups.service
	systemctl --global enable pulseaudio.service pulseaudio.socket
fi
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
sed -i 's/^password/#password/g' /etc/pam.d/system-auth
echo 'password       required        pam_unix.so nullok sha512 shadow' >> /etc/pam.d/system-auth
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
if [ ! -d /etc/sudoers.d ]; then mkdir -p /etc/sudoers.d; chmod 0750 /etc/sudoers.d; fi
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			mkdir -p /etc/lightdm/lightdm.conf.d
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -q 'steam-launcher'; then
		echo -e "eselect repository enable steam-overlay" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo -e "emerge --sync" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nemerge ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_GLF-OS()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<NIXOS_PREPARE_CHROOT
#!/bin/bash
set -e
if [ -f /tmp/linuxloops/install_swap ] && [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then /tmp/linuxloops/install_swap; fi
/tmp/linuxloops/install_secureboot /mnt
/tmp/linuxloops/install_fstab
/tmp/linuxloops/install_initramfs
groupadd -g 30000 nixbld
useradd -u 30000 -g nixbld -G nixbld nixbld
useradd -s /bin/bash -m 'temp'
echo -e 'temp\ntemp' | passwd 'temp'
echo 'temp      ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/90-wheel
sudo -u temp bash << 'NIXOSINSTALL'
set -e
ulimit -n 4096
sudo mkdir -p /nix
sudo chown -R temp /nix
curl --proto '=https' --tlsv1.2 --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://nixos.org/nix/install | sh
source \$HOME/.nix-profile/etc/profile.d/nix.sh
nix-channel --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixpkgs
nix-channel --update
nix-env -iA nixpkgs.coreutils nixpkgs.util-linux nixpkgs.nixos-install-tools
nix-channel --remove nixpkgs
sudo \$(command -v nix-channel) --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixos
sudo \$(command -v nix-channel) --update
sudo \$(command -v nix) --extra-experimental-features "nix-command flakes" flake update --flake /mnt/etc/nixos
sudo NIX_PATH=\$HOME/.nix-defexpr/channels_root/nixos NIX_PROFILES=\$HOME/.nix-profile PATH=\$HOME/.nix-profile/bin:/run/current-system/sw/bin \$(command -v nixos-install) --flake /mnt/etc/nixos#${distribution} --no-root-passwd
/tmp/linuxloops/install_flatpak
NIXOSINSTALL
NIXOS_PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

if [ "${useraccount_autologin}" == "Yes" ]; then
	autologin_commands="
  services.displayManager.autoLogin.enable = true;
  services.displayManager.autoLogin.user = \"${useraccount_name}\";"
fi

cat >"${bootstrapdir}"/tmp/linuxloops/install_flatpak <<INSTALL_FLATPAK
sudo \$(command -v nixos-enter) << 'NIXOSCHROOT'
set -e
flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
chmod u+s \$(find /nix/store | grep bubblewrap | grep /bin/bwrap)
flatpak install --noninteractive flathub org.dupot.easyflatpak
chmod u-s \$(find /nix/store | grep bubblewrap | grep /bin/bwrap)
NIXOSCHROOT
INSTALL_FLATPAK
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_flatpak

initramfs_type="nixos_config"
}

chroot_Kali()
{
if [ -z "${mirror_Debian}" ]; then mirror_Debian="http://deb.debian.org/debian"; fi
if [ -z "${mirror_Kali}" ]; then mirror_Kali="http://http.kali.org/kali"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://deb.debian.org/debian @${mirror_Debian} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils kali-$(echo ${kali_version} | tr A-Z a-z) /mnt ${mirror_Kali}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
echo 'deb ${mirror_Kali} kali-$(echo ${kali_version} | tr A-Z a-z) main contrib non-free non-free-firmware' > /etc/apt/sources.list
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-amd64 linux-headers-amd64 initramfs-tools dkms firmware-linux firmware-amd-graphics firmware-atheros firmware-intel-graphics firmware-iwlwifi firmware-mediatek firmware-nvidia-graphics firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-bin os-prober shim-signed amd64-microcode intel-microcode lsb-release kali-themes sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap kali-linux-core
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover avahi-dnsconfd cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver kali-defaults-desktop kali-themes-common libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth-themes wireplumber system-config-printer udisks2 xdg-user-dirs-gtk xserver-xorg"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop gnome-terminal network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop gnome-terminal network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme kali-linux-default xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 kali-desktop-gnome gnome-backgrounds gnome-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 kali-desktop-gnome gnome-backgrounds gnome-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring kali-linux-default xdg-desktop-portal-gnome
"
	;;
	'i3')
	desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover avahi-dnsconfd cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver kali-defaults-desktop kali-themes-common libnss-mdns mesa-va-drivers mesa-vulkan-drivers pulseaudio pulseaudio-module-bluetooth plymouth-themes system-config-printer udisks2 xdg-user-dirs-gtk xserver-xorg"
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter kali-desktop-i3 volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'i3/Full')
	desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover avahi-dnsconfd cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver kali-defaults-desktop kali-themes-common libnss-mdns mesa-va-drivers mesa-vulkan-drivers pulseaudio pulseaudio-module-bluetooth plymouth-themes system-config-printer udisks2 xdg-user-dirs-gtk xserver-xorg"
	default_session="i3"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter kali-desktop-i3 volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit kali-linux-default xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter kali-desktop-lxde network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter kali-desktop-lxde network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter kali-desktop-mate mate-media network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter kali-desktop-mate mate-media network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit kali-linux-default xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm kali-desktop-kde kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm kali-desktop-kde kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme kali-linux-default xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter kali-desktop-xfce xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter kali-desktop-xfce xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme kali-linux-default xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/kali/login.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/kali/login.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Kali-Light"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-driver-libs:i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_KDE()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
pacstrap -G /mnt base base-devel
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >> /etc/pacman.conf  <<REPOS
[kde-linux]
# Signature checking is not needed beacuse the packages are served over HTTPS and we have no mirrors
SigLevel = Never
Server = https://cdn.kde.org/kde-linux/packaging/packages/

[kde-linux-debug]
SigLevel = Never
Server = https://cdn.kde.org/kde-linux/packaging/packages-debug/
REPOS
pacman-key --init
pacman-key --populate
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
sed -i 's@#DisableSandbox@#DisableSandbox\nDisableDownloadTimeout@g' /etc/pacman.conf
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service ModemManager.service NetworkManager.service thermald.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf archlinux-wallpaper at-spi2-core avahi cups ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth sof-firmware system-config-printer ttf-dejavu ttf-roboto udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio wireplumber xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm kde-linux breeze-plymouth flatpak git xdg-desktop-portal-kde xdg-desktop-portal-gtk
systemctl enable sddm.service
chmod u+s /usr/bin/bwrap
flatpak install --noninteractive --assumeyes org.kde.ark org.kde.dolphin org.kde.elisa org.kde.gwenview org.kde.haruna org.kde.kate org.kde.konsole org.kde.kwalletmanager5 org.kde.kwrite org.kde.okular org.mozilla.firefox
chmod u-s /usr/bin/bwrap
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
git clone --depth=1 -b master https://invent.kde.org/kde-linux/kde-linux.git /tmp/kde-linux
cp -r /tmp/kde-linux/mkosi.extra/usr/share/plymouth/themes/breeze-bgrt /usr/share/plymouth/themes/
plymouth-set-default-theme breeze-bgrt
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
mkdir -p /etc/sddm.conf.d
echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/zz_linuxloops.conf
if [ "${useraccount_autologin}" == "Yes" ]; then
	echo -e '\n[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
	sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux linux-headers"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist@[multilib]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "pacman -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Linuxmint()
{
if [ -z "${mirror_Linuxmint}" ]; then mirror_Linuxmint="https://fastly.linuxmint.io"; fi
if [ -z "${mirror_Ubuntu}" ]; then mirror_Ubuntu="http://archive.ubuntu.com/ubuntu"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://archive.ubuntu.com/ubuntu @${mirror_Ubuntu} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${ubuntu_version} | tr A-Z a-z) /mnt ${mirror_Ubuntu}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
echo '' > /etc/apt/sources.list
cat >/etc/apt/sources.list.d/official-package-repositories.list <<'REPOS'
deb [signed-by=/tmp/linuxmint-keyring.gpg] ${mirror_Linuxmint} $(echo ${linuxmint_version} | tr A-Z a-z) main upstream import backport #id:linuxmint_main

deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse
deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse
deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-backports main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
REPOS
cat >/etc/apt/preferences.d/official-package-repositories.pref <<'PRIORITY'
Package: *
Pin: origin live.linuxmint.com
Pin-Priority: 750

Package: *
Pin: release o=linuxmint,c=upstream
Pin-Priority: 700

Package: *
Pin: release o=LP-PPA-linuxmint-daily-build-team-daily-builds
Pin-Priority: 700
PRIORITY
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f ${mirror_Linuxmint}/pool/main/l/linuxmint-keyring/linuxmint-keyring_2022.06.21.tar.gz | tar -zx -C /tmp linuxmint-keyring-2016.05.26ubuntu1/etc/apt/trusted.gpg.d/linuxmint-keyring.gpg --strip-components 4
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linuxmint-keyring
rm /tmp/linuxmint-keyring.gpg
sed -i 's@ \[signed-by=/tmp/linuxmint-keyring.gpg]@@g' /etc/apt/sources.list.d/official-package-repositories.list
apt clean
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') mintsources
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-generic linux-headers-generic initramfs-tools dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap language-selector-common
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-user-session dbus-x11 firmware-sof-signed ffmpeg fonts-dejavu fonts-roboto fonts-ubuntu grub2-theme-mint gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers mint-artwork mint-backgrounds-wilma mintdesktop mintinstall mintsystem mintupdate mintupgrade mint-themes mint-x-icons mint-y-icons packagekit pipewire pipewire-audio-client-libraries pipewire-pulse plymouth-themes system-config-printer ubuntu-system-adjustments udisks2 wireplumber xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mint-meta-cinnamon mint-info-cinnamon cinnamon-desktop-environment gnome-panel gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mint-meta-cinnamon mint-info-cinnamon cinnamon-desktop-environment gnome-panel gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mint-meta-mate mint-info-mate mate-desktop-environment gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mint-meta-mate mint-info-mate mate-desktop-environment gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mint-meta-xfce mint-info-xfce xfce4 xfce4-whiskermenu-plugin xfce4-power-manager xfce4-terminal thunar greybird-gtk-theme elementary-xfce-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mint-meta-xfce mint-info-xfce xfce4 xfce4-whiskermenu-plugin xfce4-goodies xfce4-power-manager xfce4-terminal thunar greybird-gtk-theme elementary-xfce-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
echo -e '[Greeter]\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
if [ "${useraccount_autologin}" == "Yes" ]; then
	groupadd -r autologin
	usermod -aG autologin '${useraccount_name}'
	mkdir -p /etc/lightdm/lightdm.conf.d
	echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} \$(apt search nvidia | grep libnvidia-gl | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(libnvidia-gl-).*' | cut -d' ' -f1 | cut -d '/' -f1):i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_LMDE()
{
if [ -z "${mirror_Debian}" ]; then mirror_Debian="http://deb.debian.org/debian"; fi
if [ -z "${mirror_Linuxmint}" ]; then mirror_Linuxmint="https://fastly.linuxmint.io"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${debian_version} | tr A-Z a-z) /mnt ${mirror_Debian}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
echo '' > /etc/apt/sources.list
cat >/etc/apt/sources.list.d/official-package-repositories.list <<'REPOS'
deb [signed-by=/tmp/linuxmint-keyring.gpg] ${mirror_Linuxmint} $(echo ${lmde_version} | tr A-Z a-z) main upstream import backport #id:linuxmint_main

deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware
deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware
deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z)-backports main contrib non-free non-free-firmware

deb http://security.debian.org $(echo ${debian_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
REPOS
cat >/etc/apt/preferences.d/official-package-repositories.pref <<'PRIORITY'
Package: *
Pin: origin live.linuxmint.com
Pin-Priority: 750

Package: *
Pin: release o=linuxmint,c=upstream
Pin-Priority: 700
PRIORITY
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://fastly.linuxmint.io/pool/main/l/linuxmint-keyring/linuxmint-keyring_2022.06.21.tar.gz | tar -zx -C /tmp linuxmint-keyring-2016.05.26ubuntu1/etc/apt/trusted.gpg.d/linuxmint-keyring.gpg --strip-components 4
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linuxmint-keyring
rm /tmp/linuxmint-keyring.gpg
sed -i 's@ \[signed-by=/tmp/linuxmint-keyring.gpg]@@g' /etc/apt/sources.list.d/official-package-repositories.list
apt clean
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') mintsources
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-amd64 linux-headers-amd64 initramfs-tools dkms firmware-linux firmware-amd-graphics firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-topology-conf alsa-ucm-conf alsa-utils at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-user-session dbus-x11 firmware-sof-signed gvfs-fuse ffmpeg fonts-ubuntu grub2-theme-mint iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers mintinstall mintsystem mintupdate mintupgrade mint-artwork mint-themes mint-x-icons mint-y-icons packagekit pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth-themes wireplumber system-config-printer udisks2 xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mint-meta-cinnamon cinnamon-desktop-environment gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mint-meta-cinnamon cinnamon-desktop-environment gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
if [ "${useraccount_autologin}" == "Yes" ]; then
	groupadd -r autologin
	usermod -aG autologin '${useraccount_name}'
	echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-driver-libs:i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Manjaro-Stable()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.manjaro.org/packages/core/pacman/-/raw/master/pacman.conf?inline=false -o /etc/pacman_manjaro.conf
sed -i '/SyncFirst/d' /etc/pacman_manjaro.conf
if [ ! -z "${mirror_Manjaro}" ]; then
	echo 'Server = ${mirror_Manjaro}/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' > /etc/pacman.d/mirrorlist
else
	echo '#Server = https://mirrors.ocf.berkeley.edu/manjaro/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' > /etc/pacman.d/mirrorlist
	echo '#Server = https://mirror.math.princeton.edu/pub/manjaro/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' >> /etc/pacman.d/mirrorlist
	echo '#Server = https://repo.ialab.dsu.edu/manjaro/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' >> /etc/pacman.d/mirrorlist
	cur_speed=0; for i in https://mirrors.ocf.berkeley.edu/manjaro https://mirror.math.princeton.edu/pub/manjaro https://repo.ialab.dsu.edu/manjaro; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/$(echo ${manjaro_version} | tr A-Z a-z)/core/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f 'https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro.gpg?ref_type=heads&inline=false' -o /usr/share/pacman/keyrings/manjaro.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f 'https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-trusted?ref_type=heads&inline=false' -o /usr/share/pacman/keyrings/manjaro-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f 'https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-revoked?ref_type=heads&inline=false' -o /usr/share/pacman/keyrings/manjaro-revoked
pacman-key --populate manjaro
pacstrap -M -C /etc/pacman_manjaro.conf -G /mnt base base-devel manjaro-system archlinux-keyring manjaro-keyring manjaro-base-skel systemd
sed -i 's@^Server@#Server@g' /mnt/etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Manjaro}" ]; then
	echo 'Server = ${mirror_Manjaro}/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' >> /mnt/etc/pacman.d/mirrorlist
else
	sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /mnt/etc/pacman.d/mirrorlist
fi
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm --needed linux-meta linux-headers-meta mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service ModemManager.service NetworkManager.service thermald.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cups cups-filters ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver manjaro-settings-manager manjaro-wallpapers-18.0 matcha-gtk-theme nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth-theme-manjaro sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-meslo-nerd-font-powerlevel10k udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio wireplumber xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter budgie-desktop network-manager-applet gnome-keyring gnome-terminal nemo papirus-maia-icon-theme pamac-gtk papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter cinnamon cinnamon-settings-daemon manjaro-cinnamon-settings network-manager-applet gnome-keyring gnome-terminal nemo pamac-gtk blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
systemctl enable lightdm.service
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic packagekit xdg-desktop-portal-gtk
systemctl enable greetd.service
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter enlightenment terminology pamac-gtk connman xdg-desktop-portal-gtk
systemctl enable lightdm.service connman.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-software gnome-terminal gnome-backgrounds nautilus manjaro-gnome-settings xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome gnome-extra manjaro-gnome-settings network-manager-applet gnome-keyring xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter i3-manjaro i3-wm i3lock i3status dmenu rxvt-unicode manjaro-i3-settings volumeicon network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox kvantum-manjaro lxterminal pcmanfm network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde kvantum-manjaro lxterminal pcmanfm network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox papirus-maia-icon-theme qterminal pcmanfm-qt network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt papirus-maia-icon-theme qterminal pcmanfm-qt network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet gnome-keyring blueman mate-media mate-power-manager pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate mate-extra papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet gnome-keyring blueman mate-media mate-power-manager pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma-desktop manjaro-kde-settings plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 pamac-tray-icon-plasma breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma manjaro-kde-settings dolphin discover packagekit-qt5 konsole packagekit-qt6 pamac-tray-icon-plasma manjaro-kde-settings breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-battery-plugin xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet gnome-keyring blueman pamac-gtk papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 xfce4-goodies manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-battery-plugin xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet gnome-keyring blueman pamac-gtk papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-meta linux-headers-meta"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Manjaro-Testing()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.manjaro.org/packages/core/pacman/-/raw/master/pacman.conf?inline=false -o /etc/pacman_manjaro.conf
sed -i '/SyncFirst/d' /etc/pacman_manjaro.conf
if [ ! -z "${mirror_Manjaro}" ]; then
	echo 'Server = ${mirror_Manjaro}/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' > /etc/pacman.d/mirrorlist
else
	echo '#Server = https://mirrors.ocf.berkeley.edu/manjaro/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' > /etc/pacman.d/mirrorlist
	echo '#Server = https://mirror.math.princeton.edu/pub/manjaro/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' >> /etc/pacman.d/mirrorlist
	echo '#Server = https://repo.ialab.dsu.edu/manjaro/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' >> /etc/pacman.d/mirrorlist
	cur_speed=0; for i in https://mirrors.ocf.berkeley.edu/manjaro https://mirror.math.princeton.edu/pub/manjaro https://repo.ialab.dsu.edu/manjaro; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/$(echo ${manjaro_version} | tr A-Z a-z)/core/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f 'https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro.gpg?ref_type=heads&inline=false' -o /usr/share/pacman/keyrings/manjaro.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f 'https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-trusted?ref_type=heads&inline=false' -o /usr/share/pacman/keyrings/manjaro-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f 'https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-revoked?ref_type=heads&inline=false' -o /usr/share/pacman/keyrings/manjaro-revoked
pacman-key --populate manjaro
pacstrap -M -C /etc/pacman_manjaro.conf -G /mnt base base-devel manjaro-system archlinux-keyring manjaro-keyring manjaro-base-skel systemd
sed -i 's@^Server@#Server@g' /mnt/etc/pacman.d/mirrorlist
sed -i 's@/stable@/$(echo ${manjaro_version} | tr A-Z a-z)@g' /mnt/etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Manjaro}" ]; then
	echo 'Server = ${mirror_Manjaro}/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' >> /mnt/etc/pacman.d/mirrorlist
else
	sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /mnt/etc/pacman.d/mirrorlist
fi
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm --needed linux-meta linux-headers-meta mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service ModemManager.service NetworkManager.service thermald.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cups cups-filters ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver manjaro-settings-manager manjaro-wallpapers-18.0 matcha-gtk-theme nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth-theme-manjaro sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-meslo-nerd-font-powerlevel10k udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio wireplumber xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter budgie-desktop network-manager-applet gnome-keyring gnome-terminal nemo papirus-maia-icon-theme pamac-gtk papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter cinnamon cinnamon-settings-daemon manjaro-cinnamon-settings network-manager-applet gnome-keyring gnome-terminal nemo pamac-gtk blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
systemctl enable lightdm.service
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic packagekit xdg-desktop-portal-gtk
systemctl enable greetd.service
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter enlightenment terminology pamac-gtk connman xdg-desktop-portal-gtk
systemctl enable lightdm.service connman.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-software gnome-terminal gnome-backgrounds nautilus manjaro-gnome-settings xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome gnome-extra network-manager-applet gnome-keyring manjaro-gnome-settings xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter i3-manjaro i3-wm i3lock i3status dmenu rxvt-unicode manjaro-i3-settings volumeicon network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox kvantum-manjaro lxterminal pcmanfm network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde kvantum-manjaro lxterminal pcmanfm network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox papirus-maia-icon-theme qterminal pcmanfm-qt network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt papirus-maia-icon-theme qterminal pcmanfm-qt network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet gnome-keyring blueman mate-media mate-power-manager pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate mate-extra papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet gnome-keyring blueman mate-media mate-power-manager pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma-desktop manjaro-kde-settings plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 pamac-tray-icon-plasma breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma manjaro-kde-settings dolphin discover packagekit-qt5 konsole packagekit-qt6 pamac-tray-icon-plasma manjaro-kde-settings breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-battery-plugin xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet gnome-keyring blueman pamac-gtk papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 xfce4-goodies manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-battery-plugin xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet gnome-keyring blueman pamac-gtk papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-meta linux-headers-meta"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Manjaro-Unstable()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.manjaro.org/packages/core/pacman/-/raw/master/pacman.conf?inline=false -o /etc/pacman_manjaro.conf
sed -i '/SyncFirst/d' /etc/pacman_manjaro.conf
if [ ! -z "${mirror_Manjaro}" ]; then
	echo 'Server = ${mirror_Manjaro}/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' > /etc/pacman.d/mirrorlist
else
	echo '#Server = https://mirrors.ocf.berkeley.edu/manjaro/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' > /etc/pacman.d/mirrorlist
	echo '#Server = https://mirror.math.princeton.edu/pub/manjaro/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' >> /etc/pacman.d/mirrorlist
	echo '#Server = https://repo.ialab.dsu.edu/manjaro/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' >> /etc/pacman.d/mirrorlist
	cur_speed=0; for i in https://mirrors.ocf.berkeley.edu/manjaro https://mirror.math.princeton.edu/pub/manjaro https://repo.ialab.dsu.edu/manjaro; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/$(echo ${manjaro_version} | tr A-Z a-z)/core/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f 'https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro.gpg?ref_type=heads&inline=false' -o /usr/share/pacman/keyrings/manjaro.gpg
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f 'https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-trusted?ref_type=heads&inline=false' -o /usr/share/pacman/keyrings/manjaro-trusted
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f 'https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-revoked?ref_type=heads&inline=false' -o /usr/share/pacman/keyrings/manjaro-revoked
pacman-key --populate manjaro
pacstrap -M -C /etc/pacman_manjaro.conf -G /mnt base base-devel manjaro-system archlinux-keyring manjaro-keyring manjaro-base-skel systemd
sed -i 's@^Server@#Server@g' /mnt/etc/pacman.d/mirrorlist
sed -i 's@/stable@/$(echo ${manjaro_version} | tr A-Z a-z)@g' /mnt/etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Manjaro}" ]; then
	echo 'Server = ${mirror_Manjaro}/$(echo ${manjaro_version} | tr A-Z a-z)/\$repo/\$arch' >> /mnt/etc/pacman.d/mirrorlist
else
	sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /mnt/etc/pacman.d/mirrorlist
fi
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm --needed linux-meta linux-headers-meta mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service ModemManager.service NetworkManager.service thermald.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cups cups-filters ffmpeg gvfs iio-sensor-proxy intel-media-driver libva-mesa-driver manjaro-settings-manager manjaro-wallpapers-18.0 matcha-gtk-theme nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth-theme-manjaro sof-firmware system-config-printer ttf-dejavu ttf-roboto ttf-meslo-nerd-font-powerlevel10k udisks2 vulkan-intel vulkan-nouveau vulkan-radeon vulkan-swrast vulkan-virtio wireplumber xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter budgie-desktop network-manager-applet gnome-keyring gnome-terminal nemo papirus-maia-icon-theme pamac-gtk papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter cinnamon cinnamon-settings-daemon manjaro-cinnamon-settings network-manager-applet gnome-keyring gnome-terminal nemo pamac-gtk blueman papirus-icon-theme xdg-desktop-portal-gtk cinnamon-translations
systemctl enable lightdm.service
"
	;;
	'Cosmic')
	default_session="cosmic"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} cosmic packagekit xdg-desktop-portal-gtk
systemctl enable greetd.service
ln -sf cosmic-greeter.toml /etc/greetd/config.toml
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter enlightenment terminology pamac-gtk connman xdg-desktop-portal-gtk
systemctl enable lightdm.service connman.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome-shell gnome-control-center network-manager-applet gnome-keyring gnome-software gnome-terminal gnome-backgrounds nautilus manjaro-gnome-settings xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} gdm gnome gnome-extra network-manager-applet gnome-keyring manjaro-gnome-settings xdg-desktop-portal-gnome
systemctl enable gdm.service
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter i3-manjaro i3-wm i3lock i3status dmenu rxvt-unicode manjaro-i3-settings volumeicon network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox kvantum-manjaro lxterminal pcmanfm network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxde kvantum-manjaro lxterminal pcmanfm network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox papirus-maia-icon-theme qterminal pcmanfm-qt network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter lxqt papirus-maia-icon-theme qterminal pcmanfm-qt network-manager-applet gnome-keyring blueman pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet gnome-keyring blueman mate-media mate-power-manager pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter mate mate-extra papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet gnome-keyring blueman mate-media mate-power-manager pamac-gtk xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma-desktop manjaro-kde-settings plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam kscreen kde-gtk-config xsettingsd packagekit-qt6 pamac-tray-icon-plasma breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma manjaro-kde-settings dolphin discover packagekit-qt5 konsole packagekit-qt6 pamac-tray-icon-plasma manjaro-kde-settings breeze-gtk breeze-icons xdg-desktop-portal-kde
systemctl enable sddm.service
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-battery-plugin xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet gnome-keyring blueman pamac-gtk papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} lightdm lightdm-slick-greeter xfce4 xfce4-goodies manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-battery-plugin xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet gnome-keyring blueman pamac-gtk papirus-icon-theme xdg-desktop-portal-gtk
systemctl enable lightdm.service
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-meta linux-headers-meta"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'lib32\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} lib32-mesa lib32-vulkan-intel lib32-vulkan-nouveau lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio ttf-liberation"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} lib32-nvidia-utils"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
	fi
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_MX()
{
if [ -z "${mirror_Debian}" ]; then mirror_Debian="http://deb.debian.org/debian"; fi
if [ -z "${mirror_MX}" ]; then mirror_MX="http://mxrepo.com"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${debian_version} | tr A-Z a-z) /mnt ${mirror_Debian}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware
# deb-src ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware

deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware
# deb-src ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware

deb http://deb.debian.org/debian-security $(echo ${debian_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian-security $(echo ${debian_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
SOURCESLIST
cat >/etc/apt/sources.list.d/mx.list <<'SOURCES'
deb [signed-by=/tmp/mx-$(echo ${mx_version} | tr A-Z a-z)-archive-keyring.gpg] ${mirror_MX}/mx/repo $(echo ${debian_version} | tr A-Z a-z) main non-free
#deb ${mirror_MX}/mx/repo $(echo ${debian_version} | tr A-Z a-z) ahs
SOURCES
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://mxrepo.com/mx/repo/pool/main/m/mx$(echo ${mx_version} | tr A-Z a-z)-archive-keyring/\$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://mxrepo.com/mx/repo/pool/main/m/mx$(echo ${mx_version} | tr A-Z a-z)-archive-keyring | tr '>' '\n' | grep '<a href=' | grep 'mx$(echo ${mx_version} | tr A-Z a-z)' | grep '\.tar\.xz' | cut -d'"' -f2 | tail -1) | tar -Jx -C /tmp mx$(echo ${mx_version} | tr A-Z a-z)-archive-keyring-2023.6.6/mx$(echo ${mx_version} | tr A-Z a-z)-archive-keyring/mx-$(echo ${mx_version} | tr A-Z a-z)-archive-keyring.gpg --strip-components 2
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y mx$(echo ${mx_version} | tr A-Z a-z)-archive-keyring
rm /tmp/mx-$(echo ${mx_version} | tr A-Z a-z)-archive-keyring.gpg
sed -i 's@ \[signed-by=/tmp/mx-$(echo ${mx_version} | tr A-Z a-z)-archive-keyring.gpg]@@g' /etc/apt/sources.list.d/mx.list
echo "firmware-ipw2x00 firmware-ipw2x00/license/accepted boolean true" | debconf-set-selections
echo "firmware-ivtv firmware-ivtv/license/accepted boolean true" | debconf-set-selections
apt clean
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') initramfs-tools mx-system
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-amd64 linux-headers-amd64 initramfs-tools dkms firmware-linux firmware-amd-graphics firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups dbus-user-session dbus-x11 desktop-defaults-mx-applications desktop-defaults-mx-common ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto grub-themes-mx gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers mx-greybird-themes mx-comfort-themes mx-icons-start mx-sound-theme-borealis mx-sound-theme-fresh-and-clean mx23-artwork pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse pipewire-setup-mx plymouth-themes-mx wireplumber system-config-printer udisks2 xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring arc-theme nautilus gnome-terminal mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter cinnamon gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter enlightenment terminology mate-polkit xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt install --purge -y network-manager- connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal nautilus gnome-icon-theme xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 task-gnome-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter i3 i3lock i3status dmenu rxvt-unicode volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde-core lxappearance lxinput lxterminal pcmanfm lxde-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxqt-core qterminal pcmanfm-qt lxqt-theme-debian lxde-icon-theme mutter lxqt-powermanagement lxqt-themes oxygen-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt purge -y sddm
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-media mate-power-manager mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-mate-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasmawayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop plasma-workspace-wayland kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings plasma-look-and-feel-theme-mx desktop-defaults-mx-kde polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasmawayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze task-kde-desktop plasma-workspace-wayland plasma-look-and-feel-theme-mx desktop-defaults-mx-kde breeze-gtk-theme breeze-icon-theme polkit-kde-agent-1 xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter xfce4 xfce4-power-manager xfce4-terminal thunar xfce4-notifyd xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit desktop-defaults-mx-xfce papirus-mxblue xfce4-docklike-plugin papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-xfce-desktop desktop-defaults-mx-xfce papirus-mxblue xfce4-docklike-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/default23.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/default23.png"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
plymouth-set-default-theme MXLiveLogo
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/default23.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-driver-libs:i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Neon()
{
if [ -z "${mirror_Neon}" ]; then mirror_Neon="http://archive.neon.kde.org"; fi
if [ -z "${mirror_Ubuntu}" ]; then mirror_Ubuntu="http://archive.ubuntu.com/ubuntu"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${ubuntu_version} | tr A-Z a-z) /mnt ${mirror_Ubuntu}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat > /etc/lsb-release <<'LSB_RELEASE'
DISTRIB_ID=neon
DISTRIB_RELEASE=${ubuntu_release}
DISTRIB_CODENAME=$(echo ${ubuntu_version} | tr A-Z a-z)
DISTRIB_DESCRIPTION="KDE neon ${neon_version}"
LSB_RELEASE
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse
# deb-src ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse

deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse
# deb-src ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
# deb-src http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
SOURCESLIST
echo 'deb [signed-by=/tmp/neon-archive-keyring.gpg] ${mirror_Neon}/$(echo ${neon_version} | tr A-Z a-z) $(echo ${ubuntu_version} | tr A-Z a-z) main' > /etc/apt/sources.list.d/neon.list
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://origin.archive.neon.kde.org/$(echo ${neon_version} | tr A-Z a-z)/pool/main/n/neon-keyring/\$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://origin.archive.neon.kde.org/$(echo ${neon_version} | tr A-Z a-z)/pool/main/n/neon-keyring | tr '>' '\n' | grep '<a href=' | grep '24.04' | grep '\.tar\.xz' | cut -d'"' -f2 | tail -1) | tar -Jx -C /tmp source/keyrings/neon-archive-keyring.gpg --strip-components 2
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y neon-keyring
DEBIAN_FRONTEND=noninteractive apt install --purge -y --reinstall neon-keyring
rm /tmp/neon-archive-keyring.gpg
sed -i 's@ \[signed-by=/tmp/neon-archive-keyring.gpg]@@g' /etc/apt/sources.list.d/neon.list
apt clean
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') neon-settings
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-generic linux-headers-generic initramfs-tools dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode update-manager-core sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap language-selector-common
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-user-session dbus-x11 firmware-sof-signed ffmpeg gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire pipewire-audio-client-libraries pipewire-pulse wireplumber system-config-printer udisks2 xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Essentials')
	default_session="plasma"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm neon-essentials-desktop plasma-desktop libpam-kwallet5 xdg-desktop-portal-kde
"
	;;
	'Full')
	default_session="plasma"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm neon-desktop plasma-desktop libpam-kwallet5 xdg-desktop-portal-kde
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
DEBIAN_FRONTEND=noninteractive apt purge -y plasma-firewall firewalld
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
sudo -u '${useraccount_name}' xdg-user-dirs-update
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
if [ "${useraccount_autologin}" == "Yes" ]; then
	mkdir -p /etc/sddm.conf.d
	echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
	sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} \$(apt search nvidia | grep libnvidia-gl | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(libnvidia-gl-).*' | cut -d' ' -f1 | cut -d '/' -f1):i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_NixOS-25.05()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<NIXOS_PREPARE_CHROOT
#!/bin/bash
set -e
if [ -f /tmp/linuxloops/install_swap ] && [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then /tmp/linuxloops/install_swap; fi
/tmp/linuxloops/install_secureboot /mnt
/tmp/linuxloops/install_fstab
/tmp/linuxloops/install_initramfs
groupadd -g 30000 nixbld
useradd -u 30000 -g nixbld -G nixbld nixbld
useradd -s /bin/bash -m 'temp'
echo -e 'temp\ntemp' | passwd 'temp'
echo 'temp      ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/90-wheel
sudo -u temp bash << 'NIXOSINSTALL'
set -e
ulimit -n 4096
sudo mkdir -p /nix
sudo chown -R temp /nix
curl --proto '=https' --tlsv1.2 --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://nixos.org/nix/install | sh
source \$HOME/.nix-profile/etc/profile.d/nix.sh
nix-channel --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixpkgs
nix-channel --update
nix-env -iA nixpkgs.coreutils nixpkgs.util-linux nixpkgs.nixos-install-tools
nix-channel --remove nixpkgs
sudo \$(command -v nix-channel) --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixos
sudo \$(command -v nix-channel) --update
sudo NIX_PATH=\$HOME/.nix-defexpr/channels_root/nixos NIX_PROFILES=\$HOME/.nix-profile PATH=\$HOME/.nix-profile/bin:/run/current-system/sw/bin \$(command -v nixos-install) --no-root-passwd
/tmp/linuxloops/install_channel
/tmp/linuxloops/install_dmconfig
NIXOSINSTALL
NIXOS_PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

if [ "${useraccount_autologin}" == "Yes" ]; then
	autologin_commands="
services.displayManager.autoLogin.enable = true;
services.displayManager.autoLogin.user = \"${useraccount_name}\";"
fi
case "${environment}" in
	'Budgie/Full')
	default_session="budgie-desktop"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.budgie.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.cinnamon.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Gnome/Full')
	default_session="gnome"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.gnome.enable = true;
services.xserver.displayManager.gdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gnome ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'i3/Full')
	default_session="none+i3"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.windowManager.i3.enable = true;
services.xserver.windowManager.i3.extraPackages = with pkgs; [ dmenu i3status i3lock ];
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	nixos_desktop="
programs.nm-applet.enable = true;
services.blueman.enable = true;${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.lxqt.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Mate/Full')
	default_session="mate"
	nixos_desktop="
programs.nm-applet.enable = true;
services.blueman.enable = true;${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.mate.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Pantheon/Full')
	default_session="pantheon"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.pantheon.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Plasma/Full')
	default_session="plasma"
	nixos_desktop="
services.desktopManager.plasma6.enable = true;${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.displayManager.sddm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.kdePackages.xdg-desktop-portal-kde ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Xfce/Full')
	default_session="xfce"
	nixos_desktop="
services.blueman.enable = true;
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.xfce.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
custom_packages="xfce.xfce4-pulseaudio-plugin ${custom_packages}"
	;;
esac

cat >"${bootstrapdir}"/tmp/linuxloops/install_channel <<INSTALL_CHANNEL
sudo \$(command -v nixos-enter) << 'NIXOSCHROOT'
set -e
nix-channel --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixos
NIXOSCHROOT
INSTALL_CHANNEL
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_channel

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
sudo \$(command -v nixos-enter) << 'NIXOSCHROOT'
set -e
if [ "${useraccount_autologin}" == "Yes" ] && [ "${environment}" == "Plasma/Full" ]; then
	su -- '${useraccount_name}' << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
fi
NIXOSCHROOT
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="nixos_config"
}

chroot_NixOS-Unstable()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<NIXOS_PREPARE_CHROOT
#!/bin/bash
set -e
if [ -f /tmp/linuxloops/install_swap ] && [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then /tmp/linuxloops/install_swap; fi
/tmp/linuxloops/install_secureboot /mnt
/tmp/linuxloops/install_fstab
/tmp/linuxloops/install_initramfs
groupadd -g 30000 nixbld
useradd -u 30000 -g nixbld -G nixbld nixbld
useradd -s /bin/bash -m 'temp'
echo -e 'temp\ntemp' | passwd 'temp'
echo 'temp      ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/90-wheel
sudo -u temp bash << 'NIXOSINSTALL'
set -e
ulimit -n 4096
sudo mkdir -p /nix
sudo chown -R temp /nix
curl --proto '=https' --tlsv1.2 --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://nixos.org/nix/install | sh
source \$HOME/.nix-profile/etc/profile.d/nix.sh
nix-channel --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixpkgs
nix-channel --update
nix-env -iA nixpkgs.coreutils nixpkgs.util-linux nixpkgs.nixos-install-tools
nix-channel --remove nixpkgs
sudo \$(command -v nix-channel) --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixos
sudo \$(command -v nix-channel) --update
sudo NIX_PATH=\$HOME/.nix-defexpr/channels_root/nixos NIX_PROFILES=\$HOME/.nix-profile PATH=\$HOME/.nix-profile/bin:/run/current-system/sw/bin \$(command -v nixos-install) --no-root-passwd
/tmp/linuxloops/install_channel
/tmp/linuxloops/install_dmconfig
NIXOSINSTALL
NIXOS_PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

if [ "${useraccount_autologin}" == "Yes" ]; then
	autologin_commands="
services.displayManager.autoLogin.enable = true;
services.displayManager.autoLogin.user = \"${useraccount_name}\";"
fi
case "${environment}" in
	'Budgie/Full')
	default_session="budgie-desktop"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.budgie.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.cinnamon.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Gnome/Full')
	default_session="gnome"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.gnome.enable = true;
services.xserver.displayManager.gdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gnome ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'i3/Full')
	default_session="none+i3"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.windowManager.i3.enable = true;
services.xserver.windowManager.i3.extraPackages = with pkgs; [ dmenu i3status i3lock ];
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	nixos_desktop="
programs.nm-applet.enable = true;
services.blueman.enable = true;${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.lxqt.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Mate/Full')
	default_session="mate"
	nixos_desktop="
programs.nm-applet.enable = true;
services.blueman.enable = true;${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.mate.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Pantheon/Full')
	default_session="pantheon"
	nixos_desktop="
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.pantheon.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Plasma/Full')
	default_session="plasma"
	nixos_desktop="
services.desktopManager.plasma6.enable = true;${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.displayManager.sddm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.kdePackages.xdg-desktop-portal-kde ];
xdg.portal.xdgOpenUsePortal = true;"
	;;
	'Xfce/Full')
	default_session="xfce"
	nixos_desktop="
services.blueman.enable = true;
${autologin_commands}
services.displayManager.defaultSession = \"${default_session}\";
services.xserver.desktopManager.xfce.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.enable = true;
services.xserver.xkb.layout = \"${keymap}\";
xdg.portal.enable = true;
xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
xdg.portal.xdgOpenUsePortal = true;"
custom_packages="xfce.xfce4-pulseaudio-plugin ${custom_packages}"
	;;
esac

cat >"${bootstrapdir}"/tmp/linuxloops/install_channel <<INSTALL_CHANNEL
sudo \$(command -v nixos-enter) << 'NIXOSCHROOT'
set -e
nix-channel --add https://nixos.org/channels/nixos-$(echo ${nixos_version} | tr A-Z a-z) nixos
NIXOSCHROOT
INSTALL_CHANNEL
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_channel

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
sudo \$(command -v nixos-enter) << 'NIXOSCHROOT'
set -e
if [ "${useraccount_autologin}" == "Yes" ] && [ "${environment}" == "Plasma/Full" ]; then
	su -- '${useraccount_name}' << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
fi
NIXOSCHROOT
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="nixos_config"
}

chroot_Nobara()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
if [ ! -z "${mirror_Fedora}" ]; then
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /etc/yum.repos.d/fedora-updates-testing.repo
	sed -i 's@^metalink=@#metalink=@g' /etc/yum.repos.d/fedora-updates-testing.repo
fi
dnf update -y
dnf install -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/Nobara-Project/rpm-sources/raw/refs/heads/$(echo ${nobara_version} | tr A-Z a-z)/baseos/nobara-repos/$(echo ${nobara_version} | tr A-Z a-z)/nobara.repo -o /etc/yum.repos.d/nobara.repo
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/Nobara-Project/rpm-sources/raw/refs/heads/$(echo ${nobara_version} | tr A-Z a-z)/baseos/nobara-repos/$(echo ${nobara_version} | tr A-Z a-z)/RPM-GPG-KEY-nobara-pubkey -o /etc/pki/rpm-gpg/RPM-GPG-KEY-nobara-pubkey
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/Nobara-Project/rpm-sources/raw/refs/heads/$(echo ${nobara_version} | tr A-Z a-z)/baseos/nobara-repos/$(echo ${nobara_version} | tr A-Z a-z)/RPM-GPG-KEY-nobara-rolling-pubkey -o /etc/pki/rpm-gpg/RPM-GPG-KEY-nobara-rolling-pubkey
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/Nobara-Project/rpm-sources/raw/refs/heads/$(echo ${nobara_version} | tr A-Z a-z)/baseos/nobara-repos/$(echo ${nobara_version} | tr A-Z a-z)/RPM-GPG-KEY-nobara-baseos-pubkey-$(echo ${nobara_version} | tr A-Z a-z) -o /etc/pki/rpm-gpg/RPM-GPG-KEY-nobara-baseos-pubkey-$(echo ${nobara_version} | tr A-Z a-z)
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/Nobara-Project/rpm-sources/raw/refs/heads/$(( $(echo ${nobara_version} | tr A-Z a-z) - 1))/baseos/nobara-repos/$(( $(echo ${nobara_version} | tr A-Z a-z) - 1))/RPM-GPG-KEY-nobara-baseos-pubkey-$(( $(echo ${nobara_version} | tr A-Z a-z) - 1)) -o /etc/pki/rpm-gpg/RPM-GPG-KEY-nobara-baseos-pubkey-$(( $(echo ${nobara_version} | tr A-Z a-z) - 1))
mkdir -p /mnt/proc /mnt/sys
mount -t proc none /mnt/proc
mount --bind -o ro /mnt/proc/sys /mnt/proc/sys
mount --make-slave /mnt/proc/sys
mount --bind /sys /mnt/sys
mount --make-slave /mnt/sys
dnf install --installroot=/mnt --use-host-config --releasever $(echo ${nobara_version} | tr A-Z a-z) -y @core nobara-gpg-keys nobara-repos nobara-release-workstation akmods grubby openssl tar tcl8
if [ ! -z "${mirror_Fedora}" ]; then
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /mnt/etc/yum.repos.d/fedora.repo
	sed -i 's@^metalink=@#metalink=@g' /mnt/etc/yum.repos.d/fedora.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /mnt/etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^metalink=@#metalink=@g' /mnt/etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^#baseurl=http://download.example/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /mnt/etc/yum.repos.d/fedora-updates-testing.repo
	sed -i 's@^metalink=@#metalink=@g' /mnt/etc/yum.repos.d/fedora-updates-testing.repo
fi
umount /mnt/sys
umount /mnt/proc/sys
umount /mnt/proc
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
dnf upgrade --refresh -y
dnf install -y kernel kernel-headers dracut dkms linux-firmware iwlegacy-firmware iwlwifi-dvm-firmware iwlwifi-mvm-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-tui NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr nss-mdns grub2-efi-x64 os-prober shim microcode_ctl sbsigntools mokutil apparmor dosfstools btrfs-progs cpio bubblewrap langpacks-${packages_locale}
dnf install -y rpmfusion-free-release rpmfusion-nonfree-release
dnf config-manager setopt fedora-cisco-openh264.enabled=1
dnf upgrade --refresh -y
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-lib alsa-utils alsa-sof-firmware alsa-topology at-spi2-core avahi cups cups-browsed dbus-x11 desktop-backgrounds dejavu-sans-fonts firefox flatpak gamemode gamescope google-roboto-fonts goverlay gvfs-fuse iio-sensor-proxy inputplumber intel-media-driver lutris mangohud mesa-va-drivers-freeworld mesa-vdpau-drivers-freeworld mesa-vulkan-drivers nobara-bookmarks nobara-controller-config nobara-driver-manager nobara-login nobara-login-sysctl nobara-logos nobara-nvidia-wizard nobara-updater nobara-welcome nss-mdns plymouth-system-theme protonplus-next steam system-config-printer udisks2 vkBasalt winetricks xdg-user-dirs-gtk xorg-x11-drivers yumex"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
dnf install --allowerasing -y ${desktop_base} gdm gnome-shell network-manager-applet gnome-keyring gnome-keyring-pam gnome-backgrounds gnome-icon-theme nautilus gnome-terminal gnome-extensions-app gnome-software gnome-shell-extension-appindicator xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
dnf install --allowerasing -y ${desktop_base} gdm @gnome-desktop network-manager-applet gnome-keyring gnome-keyring-pam gnome-shell-extension-appindicator xdg-desktop-portal-gnome
"
	;;
	'Nobara')
	default_session="plasma"
	install_desktop="
dnf install --allowerasing -y ${desktop_base} sddm kde-nobara-sddm plasma-desktop plasma-discover plasma-nm bluedevil dolphin konsole pam-kwallet kscreen kde-gtk-config xsettingsd kde-nobara kde-nobara-extras-wallpapers breeze-gtk breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Nobara/Full')
	default_session="plasma"
	install_desktop="
dnf install --allowerasing -y ${desktop_base} sddm kde-nobara-sddm @kde-desktop plasma-desktop plasma-discover plasma-nm bluedevil dolphin konsole pam-kwallet kde-nobara kde-nobara-extras-wallpapers breeze-gtk breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
dnf install --allowerasing -y ${desktop_base} sddm sddm-breeze plasma-desktop plasma-discover plasma-nm bluedevil dolphin konsole pam-kwallet kscreen kde-gtk-config xsettingsd xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
dnf install --allowerasing -y ${desktop_base} sddm sddm-breeze @kde-desktop plasma-desktop plasma-discover plasma-nm bluedevil dolphin konsole pam-kwallet xdg-desktop-portal-kde
"
	;;
	'SteamDeck')
	default_session="gamescope-session-steam"
	install_desktop="
dnf install --allowerasing -y ${desktop_base} sddm kde-steamdeck-sddm plasma-desktop plasma-discover plasma-nm bluedevil dolphin konsole pam-kwallet kscreen kde-gtk-config xsettingsd gamescope-session-plus gamescope-session-steam jupiter-fan-control jupiter-hw-support kde-steamdeck xdg-desktop-portal-kde
"
	;;
	'SteamDeck/Full')
	default_session="gamescope-session-steam"
	install_desktop="
dnf install --allowerasing -y ${desktop_base} sddm kde-steamdeck-sddm @kde-desktop plasma-desktop plasma-discover plasma-nm bluedevil dolphin konsole pam-kwallet gamescope-session-plus gamescope-session-steam jupiter-fan-control jupiter-hw-support kde-steamdeck xdg-desktop-portal-kde
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
dnf install --allowerasing -y rpmfusion-free-appstream-data rpmfusion-nonfree-appstream-data ocl-icd ffmpeg-free mozilla-openh264 gstreamer1-plugins-bad-free-extras libavcodec-free libavcodec-freeworld libavdevice-free libavfilter-free libavformat-free libavutil-free libpostproc-free libswresample-free libswscale-free mesa-libgallium-freeworld mesa-va-drivers-freeworld mesa-vdpau-drivers-freeworld openh264 x264-libs x265-libs gstreamer1-plugins-bad-free-extras.i686 libavcodec-free.i686 libavcodec-freeworld.i686 libavdevice-free.i686 libavfilter-free.i686 libavformat-free.i686 libavutil-free.i686 libpostproc-free.i686 libswresample-free.i686 libswscale-free.i686 mesa-libgallium-freeworld.i686 mesa-va-drivers-freeworld.i686 mesa-vdpau-drivers-freeworld.i686 openh264.i686 x264-libs.i686 x265-libs.i686
${install_desktop}
systemctl enable ${desktop_services}
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	*)
		if [ "$(echo ${environment} | cut -d'/' -f1)" == "Nobara" ]; then
			echo -e '[Theme]\nCurrent = nobara' > /etc/sddm.conf.d/zz_linuxloops.conf
		elif [ "$(echo ${environment} | cut -d'/' -f1)" == "SteamDeck" ]; then
			echo -e '[Theme]\nCurrent = sugar-steamOS' > /etc/sddm.conf.d/zz_linuxloops.conf
		else
			echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/zz_linuxloops.conf
		fi
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y ${custom_packages}" > "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_OpenSUSE-Leap-15.6()
{
if [ -z "${mirror_OpenSUSE}" ]; then mirror_OpenSUSE="http://download.opensuse.org"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://download.opensuse.org@${mirror_OpenSUSE}@g' /etc/zypp/repos.d/*.repo
zypper --non-interactive refresh
zypper --non-interactive install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
zypper --root /mnt addrepo ${mirror_OpenSUSE}/distribution/$(echo ${opensuse_version} | tr A-Z a-z)/repo/oss/ repo-oss
rpm --root=/mnt --import /usr/lib/rpm/gnupg/keys/gpg-pubkey-29b700a4-62b07e22.asc
zypper --root /mnt refresh
zypper --root /mnt --non-interactive install patterns-openSUSE-base attr coreutils diffutils dirmngr filesystem glibc-locale glibc-i18ndata grep gzip lsof pam permissions rpm sed shadow system-group-wheel zypper openSUSE-repos-Leap
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
sed -i 's@# solver.onlyRequires = false@solver.onlyRequires = true@g' /etc/zypp/zypp.conf
rpm --rebuilddb
zypper --non-interactive update
zypper --non-interactive install kernel-default-optional kernel-default-devel dracut dkms kernel-firmware-all wireless-regdb nano ntfs-3g sudo ModemManager NetworkManager wpa_supplicant bluez cryptsetup nano e2fsprogs ntfsprogs device-mapper acpid curl thermald bash-completion gpg2 polkit xdg-user-dirs zstd fwupd-efi patchutils net-tools usb_modeswitch upower efibootmgr grub2-x86_64-efi grub2-branding-openSUSE os-prober shim ucode-amd ucode-intel sbsigntools dosfstools btrfs-progs cpio bubblewrap
systemctl disable wicked.service
systemctl enable bluetooth.service NetworkManager.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-sourcecodepro-fonts alsa-utils alsa-firmware at-spi2-core avahi cantarell-fonts cups cups-filters dbus-1-x11 dejavu-fonts ffmpeg google-roboto-fonts gvfs-fuse iio-sensor-proxy intel-media-driver Mesa-libva nss-mdns patterns-base-x11 pipewire pipewire-pulseaudio plymouth-branding-openSUSE plymouth-dracut sof-firmware system-config-printer udisks2 wallpaper-branding-openSUSE wireplumber xdg-user-dirs-gtk"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Budgie/Full')
	default_session="budgie-desktop"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam mint-x-icon-theme mint-y-icon-theme blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam mint-x-icon-theme mint-y-icon-theme blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology connman xdg-desktop-portal-gtk
systemctl enable connman.service
"
	;;
	'Enlightenment/Full')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology connman xdg-desktop-portal-gtk
systemctl enable connman.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
zypper --non-interactive install ${desktop_base} gdm-branding-openSUSE patterns-gnome-gnome gnome-session-wayland gnome-terminal gnome-backgrounds gnome-icon-theme nautilus NetworkManager-applet gnome-keyring gnome-keyring-pam xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} gdm-branding-openSUSE patterns-gnome-gnome gnome-session-wayland gnome-terminal nautilus NetworkManager-applet gnome-keyring gnome-keyring-pam xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE i3 dmenu i3lock i3status rxvt-unicode NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="lxde"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="lxde"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasmawayland"
	install_desktop="
zypper --non-interactive install ${desktop_base} sddm-branding-openSUSE patterns-kde-kde plasma5-session-wayland konsole webenginepart bluedevil5 plasma-nm5 kwalletmanager5 pam_kwallet dolphin discover discover-backend-packagekit plasma5-workspace-wallpapers plasma5-pa plasma5-addons breeze5-wallpapers xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasmawayland"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} sddm-branding-openSUSE patterns-kde-kde plasma5-session-wayland konsole webenginepart bluedevil5 plasma-nm5 kwalletmanager5 pam_kwallet dolphin discover discover-backend-packagekit plasma5-workspace-wallpapers plasma5-pa plasma5-addons breeze5-wallpapers xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet gnome-keyring gnome-keyring-pam blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet gnome-keyring gnome-keyring-pam blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo -e "Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\nroot ALL=(ALL) ALL\n@includedir /etc/sudoers.d" > /etc/sudoers
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
cat >/etc/polkit-1/rules.d/51-blueman.rules <<'BLUEMAN'
polkit.addRule(function(action, subject) {
    if ((action.id == "org.blueman.network.setup" ||
         action.id == "org.blueman.dhcp.client" ||
         action.id == "org.blueman.rfkill.setstate" ||
         action.id == "org.blueman.pppd.pppconnect") &&
        subject.isInGroup("wheel")) {

        return polkit.Result.YES;
    }
});
BLUEMAN
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			sed -i 's@DISPLAYMANAGER_AUTOLOGIN=\"\"@DISPLAYMANAGER_AUTOLOGIN="${useraccount_name}"@g' /etc/sysconfig/displaymanager
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			sed -i 's@DISPLAYMANAGER_AUTOLOGIN=\"\"@DISPLAYMANAGER_AUTOLOGIN="${useraccount_name}"@g' /etc/sysconfig/displaymanager
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			sed -i 's@DISPLAYMANAGER_AUTOLOGIN=\"\"@DISPLAYMANAGER_AUTOLOGIN="${useraccount_name}"@g' /etc/sysconfig/displaymanager
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
		custom_packages="${custom_packages} libvulkan1-32bit libvulkan_intel-32bit libvulkan_radeon-32bit liberation-fonts"
		if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-gl-G06-32bit"; fi
		echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nzypper --non-interactive install ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_OpenSUSE-Slowroll()
{
if [ -z "${mirror_OpenSUSE}" ]; then mirror_OpenSUSE="http://download.opensuse.org"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://download.opensuse.org@${mirror_OpenSUSE}@g' /etc/zypp/repos.d/*.repo
zypper --non-interactive refresh
zypper --non-interactive install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr glibc-gconv-modules-extra gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
zypper --root /mnt addrepo ${mirror_OpenSUSE}/$(echo ${opensuse_version} | tr A-Z a-z)/repo/oss/ repo-oss
rpm --root=/mnt --import /usr/lib/rpm/gnupg/keys/gpg-pubkey-29b700a4-62b07e22.asc
zypper --root /mnt refresh
zypper --root /mnt --non-interactive install patterns-openSUSE-base attr coreutils diffutils dirmngr filesystem glibc-locale glibc-i18ndata grep gzip lsof pam permissions rpm sed shadow system-group-wheel zypper openSUSE-repos-${opensuse_version}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
sed -i 's@# solver.onlyRequires = false@solver.onlyRequires = true@g' /etc/zypp/zypp.conf
rpm --rebuilddb
zypper --non-interactive update
zypper --non-interactive install kernel-default kernel-default-devel dracut dkms kernel-firmware-all wireless-regdb nano ntfs-3g sudo ModemManager NetworkManager wpa_supplicant bluez cryptsetup nano e2fsprogs ntfsprogs device-mapper acpid curl thermald bash-completion gpg2 polkit xdg-user-dirs zstd fwupd-efi patchutils net-tools usb_modeswitch upower efibootmgr grub2-x86_64-efi grub2-branding-openSUSE os-prober shim ucode-amd ucode-intel sbsigntools dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service NetworkManager.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-sourcecodepro-fonts alsa-utils alsa-firmware at-spi2-core avahi cantarell-fonts cups cups-filters dbus-1-x11 dejavu-fonts ffmpeg google-roboto-fonts gvfs-fuse iio-sensor-proxy intel-media-driver Mesa-libva nss-mdns patterns-base-x11 pipewire pipewire-pulseaudio plymouth-branding-openSUSE plymouth-dracut sof-firmware system-config-printer udisks2 wallpaper-branding-openSUSE wireplumber xdg-user-dirs-gtk"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Budgie/Full')
	default_session="budgie-desktop"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam mint-x-icon-theme mint-y-icon-theme blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam mint-x-icon-theme mint-y-icon-theme blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology connman xdg-desktop-portal-gtk
systemctl enable connman.service
"
	;;
	'Enlightenment/Full')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology connman xdg-desktop-portal-gtk
systemctl enable connman.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
zypper --non-interactive install ${desktop_base} gdm-branding-openSUSE patterns-gnome-gnome gnome-session-wayland gnome-terminal gnome-backgrounds gnome-icon-theme nautilus NetworkManager-applet gnome-keyring gnome-keyring-pam xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} gdm-branding-openSUSE patterns-gnome-gnome gnome-session-wayland gnome-terminal nautilus NetworkManager-applet gnome-keyring gnome-keyring-pam xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE i3 dmenu i3lock i3status rxvt-unicode NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="lxde"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="lxde"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasmawayland"
	install_desktop="
zypper --non-interactive install ${desktop_base} sddm patterns-kde-kde konsole bluedevil6 plasma6-nm plasma6-pa kwalletmanager pam_kwallet dolphin discover discover-backend-packagekit kdeplasma6-addons plasma6-branding-openSUSE breeze6 breeze6-wallpapers plasma6-workspace-wallpapers xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasmawayland"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} sddm patterns-kde-kde konsole bluedevil6 plasma6-nm plasma6-pa kwalletmanager pam_kwallet dolphin discover discover-backend-packagekit kdeplasma6-addons plasma6-branding-openSUSE breeze6 breeze6-wallpapers plasma6-workspace-wallpapers xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet gnome-keyring gnome-keyring-pam blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet gnome-keyring gnome-keyring-pam blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo -e "Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\nroot ALL=(ALL) ALL\n@includedir /etc/sudoers.d" > /etc/sudoers
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
cat >/etc/polkit-1/rules.d/51-blueman.rules <<'BLUEMAN'
polkit.addRule(function(action, subject) {
    if ((action.id == "org.blueman.network.setup" ||
         action.id == "org.blueman.dhcp.client" ||
         action.id == "org.blueman.rfkill.setstate" ||
         action.id == "org.blueman.pppd.pppconnect") &&
        subject.isInGroup("wheel")) {

        return polkit.Result.YES;
    }
});
BLUEMAN
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			sed -i 's@DISPLAYMANAGER_AUTOLOGIN=\"\"@DISPLAYMANAGER_AUTOLOGIN="${useraccount_name}"@g' /etc/sysconfig/displaymanager
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			sed -i 's@DISPLAYMANAGER_AUTOLOGIN=\"\"@DISPLAYMANAGER_AUTOLOGIN="${useraccount_name}"@g' /etc/sysconfig/displaymanager
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			sed -i 's@DISPLAYMANAGER_AUTOLOGIN=\"\"@DISPLAYMANAGER_AUTOLOGIN="${useraccount_name}"@g' /etc/sysconfig/displaymanager
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
		custom_packages="${custom_packages} libvulkan1-32bit libvulkan_intel-32bit libvulkan_radeon-32bit liberation-fonts"
		if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-gl-G06-32bit"; fi
		echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nzypper --non-interactive install ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_OpenSUSE-Tumbleweed()
{
if [ -z "${mirror_OpenSUSE}" ]; then mirror_OpenSUSE="http://download.opensuse.org"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://download.opensuse.org@${mirror_OpenSUSE}@g' /etc/zypp/repos.d/*.repo
zypper --non-interactive refresh
zypper --non-interactive install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr glibc-gconv-modules-extra gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
zypper --root /mnt addrepo ${mirror_OpenSUSE}/$(echo ${opensuse_version} | tr A-Z a-z)/repo/oss/ repo-oss
rpm --root=/mnt --import /usr/lib/rpm/gnupg/keys/gpg-pubkey-29b700a4-62b07e22.asc
zypper --root /mnt refresh
zypper --root /mnt --non-interactive install patterns-openSUSE-base attr coreutils diffutils dirmngr filesystem glibc-locale glibc-i18ndata grep gzip lsof pam permissions rpm sed shadow system-group-wheel zypper openSUSE-repos-${opensuse_version}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
sed -i 's@# solver.onlyRequires = false@solver.onlyRequires = true@g' /etc/zypp/zypp.conf
rpm --rebuilddb
zypper --non-interactive update
zypper --non-interactive install kernel-default kernel-default-devel dracut dkms kernel-firmware-all wireless-regdb nano ntfs-3g sudo ModemManager NetworkManager wpa_supplicant bluez cryptsetup nano e2fsprogs ntfsprogs device-mapper acpid curl thermald bash-completion gpg2 polkit xdg-user-dirs zstd fwupd-efi patchutils net-tools usb_modeswitch upower efibootmgr grub2-x86_64-efi grub2-branding-openSUSE os-prober shim ucode-amd ucode-intel sbsigntools dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service NetworkManager.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-sourcecodepro-fonts alsa-utils alsa-firmware at-spi2-core avahi cantarell-fonts cups cups-filters dbus-1-x11 dejavu-fonts ffmpeg google-roboto-fonts gvfs-fuse iio-sensor-proxy intel-media-driver Mesa-libva nss-mdns patterns-base-x11 pipewire pipewire-pulseaudio plymouth-branding-openSUSE plymouth-dracut sof-firmware system-config-printer udisks2 wallpaper-branding-openSUSE wireplumber xdg-user-dirs-gtk"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Budgie/Full')
	default_session="budgie-desktop"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam mint-x-icon-theme mint-y-icon-theme blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon mate-polkit gnome-terminal nemo NetworkManager-applet gnome-keyring gnome-keyring-pam mint-x-icon-theme mint-y-icon-theme blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology connman xdg-desktop-portal-gtk
systemctl enable connman.service
"
	;;
	'Enlightenment/Full')
	default_session="enlightenment"
	install_desktop="
systemctl disable NetworkManager.service
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology connman xdg-desktop-portal-gtk
systemctl enable connman.service
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
zypper --non-interactive install ${desktop_base} gdm-branding-openSUSE patterns-gnome-gnome gnome-session-wayland gnome-terminal gnome-backgrounds gnome-icon-theme nautilus NetworkManager-applet gnome-keyring gnome-keyring-pam xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} gdm-branding-openSUSE patterns-gnome-gnome gnome-session-wayland gnome-terminal nautilus NetworkManager-applet gnome-keyring gnome-keyring-pam xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE i3 dmenu i3lock i3status rxvt-unicode NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="lxde"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="lxde"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet gnome-keyring xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet gnome-keyring gnome-keyring-pam blueman xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasmawayland"
	install_desktop="
zypper --non-interactive install ${desktop_base} sddm patterns-kde-kde konsole bluedevil6 plasma6-nm plasma6-pa kwalletmanager pam_kwallet dolphin discover discover-backend-packagekit kdeplasma6-addons plasma6-branding-openSUSE breeze6 breeze6-wallpapers plasma6-workspace-wallpapers xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasmawayland"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} sddm patterns-kde-kde konsole bluedevil6 plasma6-nm plasma6-pa kwalletmanager pam_kwallet dolphin discover discover-backend-packagekit kdeplasma6-addons plasma6-branding-openSUSE breeze6 breeze6-wallpapers plasma6-workspace-wallpapers xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet gnome-keyring gnome-keyring-pam blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet gnome-keyring gnome-keyring-pam blueman papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo -e "Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\nroot ALL=(ALL) ALL\n@includedir /etc/sudoers.d" > /etc/sudoers
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
cat >/etc/polkit-1/rules.d/51-blueman.rules <<'BLUEMAN'
polkit.addRule(function(action, subject) {
    if ((action.id == "org.blueman.network.setup" ||
         action.id == "org.blueman.dhcp.client" ||
         action.id == "org.blueman.rfkill.setstate" ||
         action.id == "org.blueman.pppd.pppconnect") &&
        subject.isInGroup("wheel")) {

        return polkit.Result.YES;
    }
});
BLUEMAN
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			sed -i 's@DISPLAYMANAGER_AUTOLOGIN=\"\"@DISPLAYMANAGER_AUTOLOGIN="${useraccount_name}"@g' /etc/sysconfig/displaymanager
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			sed -i 's@DISPLAYMANAGER_AUTOLOGIN=\"\"@DISPLAYMANAGER_AUTOLOGIN="${useraccount_name}"@g' /etc/sysconfig/displaymanager
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			sed -i 's@DISPLAYMANAGER_AUTOLOGIN=\"\"@DISPLAYMANAGER_AUTOLOGIN="${useraccount_name}"@g' /etc/sysconfig/displaymanager
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
		custom_packages="${custom_packages} libvulkan1-32bit libvulkan_intel-32bit libvulkan_radeon-32bit liberation-fonts"
		if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-gl-G06-32bit"; fi
		echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nzypper --non-interactive install ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Parrot()
{
if [ -z "${mirror_Debian}" ]; then mirror_Debian="http://deb.debian.org/debian"; fi
if [ -z "${mirror_Parrot}" ]; then mirror_Parrot="https://deb.parrot.sh/parrot"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://deb.debian.org/debian @${mirror_Debian} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${debian_version} | tr A-Z a-z) /mnt ${mirror_Debian}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCES_LIST'
deb [signed-by=/tmp/parrot-archive-keyring.gpg] ${mirror_Parrot} $(echo ${parrot_version} | tr A-Z a-z) main contrib non-free non-free-firmware
# deb-src ${mirror_Parrot} $(echo ${parrot_version} | tr A-Z a-z) main contrib non-free non-free-firmware
SOURCES_LIST
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/ParrotSec/parrot-core/raw/refs/heads/master/system_configs/apt/preferences.d/parrot-pinning -o /etc/apt/preferences.d/parrot-pinning
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
cat >/tmp/parrot-archive-keyring.asc <<'PARROT_KEYRING'
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBGco52cBEACWy0u0muKLZPH9OygsbRasVbQTNtUDLqdjd7MO8BGQfctdaQ81
msJYuBFcL8vyc5AbcpRyeBaZS2UlcWRsB4qu8xLgpvaaw5W/dE9mGQGBJV7Auyso
XOI83RnHup0+6T2h0DP7l3/ZQZjVt+Py0wIji9RiAAyYiW9rSFbedBsIWlD/h6xn
mXbMfVfD3uPiECpjERWQlo18T/gCNFe/p69oLCzIpLGtUCq+AIsgo9LL0vNV4zAt
+YCLlAlvtvNQo8DdAGOp11tIIDt7KFxXv4qfBXSi8WyZCyYD1vdtux7UKnx81NKC
7Fp441NL4dq3d5f1UQlceYWGj4F0yK6VCcE1jl1LekSp+j8I8rQgDP4CGmILCAAM
iYIsYfsF/WxSLKD4i7l3bYUrY8pzh8H/tDhW9/6pECTL01sD63CsccCllf4e7t15
mKj5zyTReAC5SqGJY7eCSSncMvclOtao2OrSpQNf1AD8x2i0TS2mtn6KrqsKrLv/
DBqfa9Lh6TxBe2csEkbSsupn6ECuL0UpUmD9oSELpqmhzL9i2oUNPIfUtEatCt5L
TGlWonG+xZu5CQGN1z3YkBAb6ZHxpTm0qks113ahzVlhfdbZvqeOO2csrQ7W6Vjb
FvxVSqEHU4QEd2O+oXsREvHxajDzm8WKfK+t3JIHkIeGWiExpzfhhcSL8wARAQAB
tC9QYXJyb3QgUHJvamVjdCAoMjAyNC0yMDI2KSA8dGVhbUBwYXJyb3RzZWMub3Jn
PokCVAQTAQoAPhYhBLcRgiNGVS5NktoC33qChq8Oge5KBQJnKOdnAhsDBQkHhM4A
BQsJCAcCBhUKCQgLAgQWAgMBAh4BAheAAAoJEHqChq8Oge5KCzIP/3UakIwwcdDA
3nsGuZgh5sVhEwRYyvKuN8r+YNYV8c08CMGt1V+eikJ96ZeT0IHvbgXAiwyukmTz
xYUO75Bbq+g0FE7ZLqrD62j2t+BzJNX4HBb9TTu5U5PXyXN0lpv5GHxTCrh6OsNv
lfZ1zyFYg7CB/gXF/7L5hDCqCKKLgFM82OnqVLTrZ9IpgWzsfPiLmRR3bPLuTX9O
RTqp9eaNcNCWy+WUvRm4oaod0JS76Xq2NT+fqwcAF5x4ziXAuH2rrF3DXwHvbKhF
p0v6BIph1U7iKQmRWaBrGE8EWvaUMaXaBThdOe3u+gU5DBX6c+XP5YY5ZlstNCUx
JN7m5BBDaQs8uQf8FveWAFh4PxyR7cCCaVrQArEV81UFAEyna86BVfzeSsafk5Ki
rGKeU4VRIGPn8XkMv2Nm4NDw8fCmy/6Lc3JryDsneNuPxTEMK9d0IlCQCrV5O0Kz
bMEB0QS2MFNA2KDPVO7IC/S/I9CA3Sr86CYZ7Ruv5b44IP8jfdfSmp+X37S9jOD1
rwlpmsV9isMA87lcSEdSEuOKXgaBdyuoeRREQATbPmQLyQMFUtqdIuO9cuvum5W7
56Ro4+GoCkXsYLVDFn/+9jodGE1ZOuEReF4tfCzedH1gQ9ex0FfdqwL6ZmfrOaLB
/stJyPk233PA9h03mutQza4yPT4GwAZ3iQIzBBABCgAdFiEEs1BQWTwvdlZA5t3b
l8qhKfTGuaQFAmco750ACgkQl8qhKfTGuaTI5RAAodRPbnDxZOqzfoy6ftpjWuF5
gRzB17n5Qvq3p5QANxXnewqm39NsZ3nbPTNPnGMfw48GwqWzUPtFVP/5QBuzuOud
0q5Wq53XangOI6+QGQlUNJrZ7CuRSVOCfwVL/kvH6yVLYvg6IeXn6zMQ0CJ8g2vb
jbZ3xWBzgLA9zaxdpoH398G6PwpA1mSIxPouSgk1ER2hFGV5CAU6mGmMSPlr69zV
HZI2UhWQG8RNbMKuqE8sn00SYtb2R4niNHhvcwue3RTOHYlpvn+M947RsELF4YZY
ECraZ4yy1w+J49MhQoF0IiC0m0eIMCtkzR6OKL8+EA7Gje2SeZ/9Uz0CaH9pGznl
hKLXQeNvizOtRhI6djv+kOSKSaRPPwSCqIOCeE1aYXdNx1PFFxfXtnVrBQd47qoF
E3K4rB7E37nQs31xymRuVq9Wp6m0YxcRWgiTeOSz+4V5rlo3HRns/1SDaM/I3jAc
XVYZyz8mEcR/tFVSY8o53nD+cB9mBdW2MzZG6+MCLJ5LjGgVi9F/RsLzuWb8W4T1
QPMDO7xz0qyw3gPJ38B+PMduEg9pfo0ql6N1szuRgyTKF6ssBrkEKGSaIzqFIJyi
QMUkp2PQIe+qLrQFA9h4ydN3Eexr/3HvSgYm+HPrc8HbRd4Y0YwGenTSY74aWjXi
gZ6BjtuoDAqfBem1mJ+JAjMEEAEKAB0WIQSLQGDKaalzVrLc9VGCO/B861xGmwUC
ZyjvswAKCRCCO/B861xGm64sD/9fkRfttbNWtOXvm8DDHKyrKsJYxZejEnLTgswH
Pk+g0lnPG8fBd4TGfDZZfBWun6uP4qO1ege0kQcOhZSJQZEapG12cOQeR5NE5K+w
J4QnB5vc2PQpbfs1kzXvQgDBGwvNZx3321SsDD9dGyDYv/Na9tKhxvxb7pPl27h5
cKfDWupjDOyWf/aYu2rJ6mnAT1gf7Pr2khoXHhr2fjTodXICeOPx0SVJyeZ+ukTC
BGHNerTylJ0WMGZFAm+oDJzwXLo/nc+YHu0lIJlLiEsAJBHblk3PERA3DogfUkLb
HqfobdDCwLgy0uSN/fPxVzIuWqlh2ijTZc8NEW+hhMi2UkiPa7nKghEkCOYx0DFi
rSf2e9uVUf2vHrktmGHx1AF2+LqI4IKm95fxI5v4ojArRVInW6WRZEM7Y2URgGiP
W47ME8Aioqq4Ny5UzQV5baTAyz40+JblxmMVIu49XKdS49r9NGBMNCT5wUVnTHS1
W+E/I1i7YjeVk+RPJOj+chnJHyEudxkNBGqApEDEKU72TExSFC1jZwkGVLajXWmY
OqyyLqcFC88BBlQdw1pj+FxJ7U5rsyzWcCFDqCivZ+lig9hSJ8vEbA3ckfXP7pOo
k50AjoJ0rWm1rYJ1ICMI+SD4ou/YF+vSqpBwe4cxaP7dEulvo/jWB4rbneK2qbH4
O/H1dQ==
=CVel
-----END PGP PUBLIC KEY BLOCK-----
PARROT_KEYRING
cat /tmp/parrot-archive-keyring.asc | gpg --dearmor > /tmp/parrot-archive-keyring.gpg
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y parrot-archive-keyring libcurl4-
rm /tmp/parrot-archive-keyring.gpg
sed -i 's@ \[signed-by=/tmp/parrot-archive-keyring.gpg]@@g' /etc/apt/sources.list
echo '' > /etc/apt/sources.list
cat >/etc/apt/sources.list.d/parrot.list <<'SOURCESLIST'
deb ${mirror_Parrot} $(echo ${parrot_version} | tr A-Z a-z) main contrib non-free non-free-firmware
deb ${mirror_Parrot} $(echo ${parrot_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware
deb ${mirror_Parrot} $(echo ${parrot_version} | tr A-Z a-z)-backports main contrib non-free non-free-firmware

deb https://deb.parrot.sh/direct/parrot $(echo ${parrot_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
SOURCESLIST
apt clean
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') parrot-core parrot-apps-basics
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
cat >/etc/apt/sources.list.d/parrot.list <<'SOURCESLIST'
deb ${mirror_Parrot} $(echo ${parrot_version} | tr A-Z a-z) main contrib non-free non-free-firmware
deb ${mirror_Parrot} $(echo ${parrot_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware
deb ${mirror_Parrot} $(echo ${parrot_version} | tr A-Z a-z)-backports main contrib non-free non-free-firmware

deb https://deb.parrot.sh/direct/parrot $(echo ${parrot_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
SOURCESLIST
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-amd64 linux-headers-amd64 initramfs-tools dkms firmware-linux firmware-amd-graphics firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-bin os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover avahi-dnsconfd cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers parrot-themes parrot-wallpapers pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth-themes wireplumber system-config-printer udisks2 xdg-user-dirs-gtk xserver-xorg"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring arc-theme nemo gnome-terminal libgdk-pixbuf2.0-bin mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Budgie/Full')
	default_session="budgie-desktop"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring arc-theme nautilus gnome-terminal libgdk-pixbuf2.0-bin mate-polkit papirus-icon-theme xdg-desktop-portal-gtk nim anonsurf-gtk metasploit-framework nmap
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop gnome-terminal network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop gnome-terminal network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n nim anonsurf-gtk metasploit-framework nmap
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome nim anonsurf-gtk metasploit-framework nmap
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter parrot-desktop-i3 volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'i3/Full')
	default_session="i3"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter parrot-desktop-i3 volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk nim anonsurf-gtk metasploit-framework nmap
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk nim anonsurf-gtk metasploit-framework nmap
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter parrot-desktop-mate mate-desktop mate-session-manager mate-power-manager mate-media network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter parrot-desktop-mate mate-desktop mate-session-manager mate-power-manager mate-media network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk nim anonsurf-gtk metasploit-framework nmap
"
	;;
	'Plasma')
	default_session="plasmawayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm parrot-desktop-kde plasma-workspace-wayland kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasmawayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm parrot-desktop-kde plasma-workspace-wayland kwin-wayland plasma-nm plasma-pa powerdevil bluedevil libpam-kwallet5 polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde nim anonsurf-gtk metasploit-framework nmap
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter xfce4 xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter xfce4 xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk nim anonsurf-gtk metasploit-framework nmap
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/default.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/default.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		echo -e '[Greeter]\nbackground = /usr/share/backgrounds/default.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then echo "DEBIAN_FRONTEND=noninteractive apt install --purge -y -t $(echo ${parrot_version} | tr A-Z a-z)-backports nvidia-driver-libs:i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_PikaOS()
{
if [ -z "${mirror_Debian}" ]; then mirror_Debian="http://deb.debian.org/debian"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://deb.debian.org/debian @${mirror_Debian} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,linux-sysctl-defaults,locales,xz-utils $(echo ${debian_version} | tr A-Z a-z) /mnt ${mirror_Debian}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
rm /etc/apt/sources.list
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://git.pika-os.com/general-packages/pika-sources/raw/branch/main/pika-sources/usr/share/apt-pika/etc/apt/sources.list.d/system.sources -o /etc/apt/sources.list.d/system.sources
if [ ! -z "${mirror_PikaOS}" ]; then sed -i 's@https://ppa.pika-os.com@${mirror_PikaOS}@g' /etc/apt/sources.list.d/system.sources; fi
sed -i 's@/etc/apt/keyrings/pika-keyring.gpg.key@/etc/apt/trusted.gpg.d/pika-keyring.asc@g' /etc/apt/sources.list.d/system.sources
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://git.pika-os.com/general-packages/pika-sources/raw/branch/main/pika-sources/usr/share/apt-pika/etc/apt/keyrings/pika-keyring.gpg.key -o /etc/apt/trusted.gpg.d/pika-keyring.asc
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
echo -e 'Package: *\nPin: release a=pika\nPin-Priority: 1000' > /etc/apt/preferences.d/downgrade
apt clean
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') pika-sources
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
rm /etc/apt/preferences.d/downgrade /etc/apt/trusted.gpg.d/pika-keyring.asc
if [ ! -z "${mirror_PikaOS}" ]; then sed -i 's@https://ppa.pika-os.com@${mirror_PikaOS}@g' /etc/apt/sources.list.d/system.sources; fi
cat >/etc/apt/preferences.d/booster <<'BOOSTER'
Package: booster
Pin: release *
Pin-Priority: -1
BOOSTER
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
dpkg --add-architecture i386
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y kernel-pika initramfs-tools dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez systemd-cryptsetup cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
# PikaOS packages have missing dependencies on desktop-file-utils, libdrm, glib and mesa.
DEBIAN_FRONTEND=noninteractive apt install --purge -y desktop-file-utils libdrm2-amdgpu libdrm-amdgpu-common libglib2.0-bin mesa-hybrid
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover avahi-dnsconfd cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver-non-free libnss-mdns mesa-va-drivers pika-amdgpu-core pika-amdgpu-config pika-audio-pipewire pika-baseos pika-i915-config pika-package-manager pika-wallpapers python3-requests system-config-printer udisks2 uidmap va-driver-all vdpau-driver-all xdg-user-dirs-gtk xserver-xorg"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Cosmic')
	default_session="cosmic"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} pika-cosmic-desktop mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Cosmic/Full')
	default_session="cosmic"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} pika-cosmic-desktop mate-polkit xdg-desktop-portal-gtk pika-codecs-meta pika-gameutils-meta pika-libreoffice-meta
"
	;;
	'Gnome')
	default_session="gnome"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} pika-gnome-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} pika-gnome-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome pika-codecs-meta pika-gameutils-meta pika-libreoffice-meta
"
	;;
	'Hyprland')
	default_session="pika-hyprland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} pika-hyprland-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Hyprland/Full')
	default_session="pika-hyprland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y gdm3 kitty
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} pika-hyprland-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring mate-polkit xdg-desktop-portal-gtk pika-codecs-meta pika-gameutils-meta pika-libreoffice-meta
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} pika-kde-desktop polkit-kde-agent-1 xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} pika-kde-desktop polkit-kde-agent-1 xdg-desktop-portal-kde pika-codecs-meta pika-gameutils-meta pika-libreoffice-meta
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Cosmic'|'Cosmic/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
		fi
	;;
	'Gnome'|'Gnome/Full'|'Hyprland'|'Hyprland/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		else
			echo -e '[User]\nSession=${default_session}' > /var/lib/AccountsService/users/${useraccount_name}
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Pop()
{
if [ -z "${mirror_Ubuntu}" ]; then mirror_Ubuntu="http://apt.pop-os.org/ubuntu"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://archive.ubuntu.com/ubuntu @${mirror_Ubuntu} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${ubuntu_version} | tr A-Z a-z) /mnt ${mirror_Ubuntu}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
echo '' > /etc/apt/sources.list
cat >/etc/apt/sources.list.d/system.sources <<'SYSTEM_SOURCES'
X-Repolib-Name: Pop_OS System Sources
Enabled: yes
Types: deb deb-src
URIs: http://apt.pop-os.org/ubuntu
Suites: $(echo ${ubuntu_version} | tr A-Z a-z) $(echo ${ubuntu_version} | tr A-Z a-z)-security $(echo ${ubuntu_version} | tr A-Z a-z)-updates $(echo ${ubuntu_version} | tr A-Z a-z)-backports
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
X-Repolib-ID: system
X-Repolib-Default-Mirror: http://apt.pop-os.org/ubuntu
SYSTEM_SOURCES
cat >/etc/apt/sources.list.d/pop-os-apps.sources <<'POP_OS_APPS_SOURCES'
X-Repolib-Name: Pop_OS Applications
Enabled: yes
Types: deb
URIs: http://apt.pop-os.org/proprietary
Suites: $(echo ${ubuntu_version} | tr A-Z a-z)
Components: main
Signed-By: /tmp/pop-archive-keyring.gpg
POP_OS_APPS_SOURCES
cat >/etc/apt/sources.list.d/pop-os-release.sources <<'POP_OS_RELEASE_SOURCES'
X-Repolib-Name: Pop_OS Release Sources
Enabled: yes
Types: deb deb-src
URIs: http://apt.pop-os.org/release
Suites: $(echo ${ubuntu_version} | tr A-Z a-z)
Components: main
Signed-By: /tmp/pop-archive-keyring.gpg
POP_OS_RELEASE_SOURCES
cat >/etc/apt/preferences.d/pop-default-settings <<'POP_DEFAULT_SETTINGS'
Package: *
Pin: release o=pop-os-release
Pin-Priority: 1001
POP_DEFAULT_SETTINGS
if [ ! -z "${mirror_Ubuntu}" ]; then
	sed -i 's@http://apt.pop-os.org/ubuntu@${mirror_Ubuntu}@g' /etc/apt/sources.list.d/system.sources
fi
cat >/etc/apt/preferences.d/kernelstub <<'KERNELSTUB'
Package: kernelstub
Pin: release *
Pin-Priority: -1
KERNELSTUB
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/pop-os/keyring/raw/master/usr/share/keyrings/pop-archive-keyring.gpg -o /tmp/pop-archive-keyring.gpg
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y pop-keyring
rm /tmp/pop-archive-keyring.gpg
sed -i '/^Signed-By/d' /etc/apt/sources.list.d/*
apt clean
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') pop-default-settings
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-generic linux-headers-generic initramfs-tools dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed update-manager-core sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap language-selector-common
echo 'autoinstall_all_kernels="y"' >> /etc/dkms/framework.conf
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

case "${environment}" in
	'Full')
	if [ "${version}" == "22.04" ]; then
		default_session="pop-wayland"
	else
		default_session="cosmic"
	fi
	install_desktop="
dpkg --add-architecture i386
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y pop-desktop gnome-online-accounts pop-wallpapers cosmic-store packagekit mate-polkit
if dpkg -s ubuntu-session &>/dev/null; then DEBIAN_FRONTEND=noninteractive apt purge -y ubuntu-session; fi
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
if [ "${useraccount_autologin}" == "Yes" ]; then
	if [ "${version}" == "22.04" ]; then
		if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
		echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
	else
		echo -e '\n[initial_session]\ncommand = "cosmic-session"\nuser = "${useraccount_name}"' >> /etc/greetd/cosmic-greeter.toml
	fi
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Proxmox()
{
if [ -z "${mirror_Debian}" ]; then mirror_Debian="http://deb.debian.org/debian"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://deb.debian.org/debian @${mirror_Debian} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${debian_version} | tr A-Z a-z) /mnt ${mirror_Debian}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware
# deb-src ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z) main contrib non-free non-free-firmware

deb ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware
# deb-src ${mirror_Debian} $(echo ${debian_version} | tr A-Z a-z)-updates main contrib non-free non-free-firmware

deb http://deb.debian.org/debian-security $(echo ${debian_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian-security $(echo ${debian_version} | tr A-Z a-z)-security main contrib non-free non-free-firmware
SOURCESLIST
cat >/etc/apt/sources.list.d/pve-enterprise.sources <<'SOURCESLIST'
Types: deb
URIs: http://download.proxmox.com/debian/pve
Suites: trixie
Components: pve-no-subscription
Signed-By: /tmp/proxmox-release-$(echo ${debian_version} | tr A-Z a-z).gpg
SOURCESLIST
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://enterprise.proxmox.com/debian/proxmox-release-$(echo ${debian_version} | tr A-Z a-z).gpg -o /tmp/proxmox-release-$(echo ${debian_version} | tr A-Z a-z).gpg
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y proxmox-archive-keyring
rm /tmp/proxmox-release-$(echo ${debian_version} | tr A-Z a-z).gpg
apt clean
apt update
apt purge -y ifupdown
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') proxmox-ve postfix open-iscsi ifenslave
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo 'deb http://download.proxmox.com/debian/pve $(echo ${debian_version} | tr A-Z a-z) pve-no-subscription' > /etc/apt/sources.list.d/pve-enterprise.list
cat >/etc/apt/sources.list.d/pve-enterprise.sources <<'SOURCESLIST'
Types: deb
URIs: http://download.proxmox.com/debian/pve
Suites: trixie
Components: pve-no-subscription
Signed-By: /usr/share/keyrings/proxmox-archive-keyring.gpg
SOURCESLIST
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y initramfs-tools dkms pve-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse plymouth-themes system-config-printer udisks2 wireplumber xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-desktop arc-theme nemo network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal paper-icon-theme mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter cinnamon cinnamon-core gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter enlightenment terminology mate-polkit xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt install --purge -y network-manager- connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal nautilus gnome-icon-theme xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 task-gnome-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter i3 i3lock i3status dmenu rxvt-unicode volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde-core lxappearance lxterminal pcmanfm lxde-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxqt-core openbox lxqt-powermanagement lxqt-themes qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Lxqt/Full')
	default_session="lxqt"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxqt-policykit xdg-desktop-portal-gtk
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-media mate-power-manager mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-mate-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasmawayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop plasma-workspace-wayland kwin-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasmawayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm sddm-theme-breeze task-kde-desktop plasma-workspace-wayland polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter xfce4 xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xfce"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter task-xfce-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.interface]
gtk-theme="Adwaita"
icon-theme="Papirus"
[org.mate.interface]
icon-theme='Papirus'
gtk-theme='Adwaita'
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG audio,sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/daemon.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		mkdir -p /etc/lightdm/lightdm.conf.d
		echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			echo -e 'autologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="pve-kernel-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-driver-libs:i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Qubes()
{
hostname=dom0
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
mkdir -p /etc/yum.fake.repos.d
echo -e '[local]\nname = local\nbaseurl = file:///source\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0' > /etc/yum.fake.repos.d/local.repo
dnf --disablerepo=* --enablerepo=local --setopt=reposdir=/etc/yum.fake.repos.d install -y coreutils util-linux
mkdir -p /mnt/proc /mnt/sys
mount -t proc none /mnt/proc
mount --bind -o ro /mnt/proc/sys /mnt/proc/sys
mount --make-slave /mnt/proc/sys
mount --bind /sys /mnt/sys
mount --make-slave /mnt/sys
dnf --disablerepo=* --enablerepo=local --setopt=reposdir=/etc/yum.fake.repos.d --installroot=/mnt install -y @core dnf qubes-release qubes-dom0-unwanted-packages
if [ ! -z "${mirror_Fedora}" ]; then
	sed -i 's@^#baseurl=http://download.fedoraproject.org/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /mnt/etc/yum.repos.d/fedora.repo
	sed -i 's@^metalink=@#metalink=@g' /mnt/etc/yum.repos.d/fedora.repo
	sed -i 's@^#baseurl=http://download.fedoraproject.org/pub/fedora/linux@baseurl=${mirror_Fedora}@g' /mnt/etc/yum.repos.d/fedora-updates.repo
	sed -i 's@^metalink=@#metalink=@g' /mnt/etc/yum.repos.d/fedora-updates.repo
fi
umount /mnt/sys
umount /mnt/proc/sys
umount /mnt/proc
rm -r /etc/yum.fake.repos.d
mkdir -p /mnt/var/lib/qubes/template-packages
cp /source/Packages/qubes-template-*.rpm /mnt/var/lib/qubes/template-packages/
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-*
dnf --setopt=reposdir=/etc/yum.repos.d/ update -y
dnf --setopt=reposdir=/etc/yum.repos.d/ install -y akmods bash-completion bubblewrap cpio dkms efibootmgr fwupd-qubes-dom0 glibc-locale-source grub2-efi-x64 langpacks-${packages_locale} ntfs-3g openssl os-prober sbsigntools @"Qubes OS with Xfce" @"Qubes UI (Audio/Gui)"
systemctl set-default graphical.target
cat >/root/anaconda-ks.cfg <<INITIALSETUP
#version=DEVEL
# Use graphical install
graphical

%packages
@^qubes-xfce
@qubes-ui

%end

# Run the Setup Agent on first boot
firstboot --enable

# Keyboard layouts
keyboard --vckeymap=${keymap} --xlayouts='${keymap}'
# System language
lang ${locale}.UTF-8

timesource --ntp-disable
# System timezone
timezone ${timezone}

#Root password
rootpw --lock
user --groups=wheel,qubes --name=${useraccount_name}
INITIALSETUP
systemctl enable initial-setup.service
if [ "${install_type}" == "image" ]; then
cat >/usr/lib/udev/rules.d/01zz-linuxloops.rules <<'UDEVRULE'
ACTION!="remove", SUBSYSTEM=="block", KERNEL=="loop0*", ENV{DM_UDEV_DISABLE_DISK_RULES_FLAG}="0", ENV{UDEV_DISABLE_PERSISTENT_STORAGE_RULES_FLAG}="0"
UDEVRULE
fi
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel,qubes '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ "${useraccount_autologin}" == "Yes" ]; then
	groupadd -r autologin
	usermod -aG autologin '${useraccount_name}'
	mkdir -p /etc/lightdm/lightdm.conf.d
	echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=xfce' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

if [ ! -z "${kernel_parameters}" ]; then
	kernel_parameters="plymouth.ignore-serial-consoles ${kernel_parameters}"
else
	kernel_parameters="plymouth.ignore-serial-consoles"
fi
xen_cmdline_extra="console=none dom0_mem=min:1024M dom0_mem=max:4096M ucode=scan smt=off gnttab_max_frames=2048 gnttab_max_maptrack_frames=4096"
initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf --setopt=reposdir=/etc/yum.repos.d/ install -y ${custom_packages}" > "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_RockyLinux()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
if [ ! -z "${mirror_RockyLinux}" ]; then
	sed -i 's@^#baseurl=http://dl.rockylinux.org/\$contentdir@baseurl=${mirror_RockyLinux}@g' /etc/yum.repos.d/rocky*.repo
	sed -i 's@^mirrorlist=@#mirrorlist=@g' /etc/yum.repos.d/rocky*.repo
fi
dnf update -y
dnf install -y bash bash-completion bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
mkdir -p /mnt/proc /mnt/sys
mount -t proc none /mnt/proc
mount --bind -o ro /mnt/proc/sys /mnt/proc/sys
mount --make-slave /mnt/proc/sys
mount --bind /sys /mnt/sys
mount --make-slave /mnt/sys
dnf install --installroot=/mnt --releasever $(echo ${rockylinux_version} | tr A-Z a-z) -y @core openssl tar
if [ ! -z "${mirror_RockyLinux}" ]; then
	sed -i 's@^#baseurl=http://dl.rockylinux.org/\$contentdir@baseurl=${mirror_RockyLinux}@g' /mnt/etc/yum.repos.d/rocky*.repo
	sed -i 's@^mirrorlist=@#mirrorlist=@g' /mnt/etc/yum.repos.d/rocky*.repo
fi
umount /mnt/sys
umount /mnt/proc/sys
umount /mnt/proc
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
dnf install -y epel-release
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL*
dnf upgrade --refresh -y
dnf install -y kernel kernel-headers dracut dkms linux-firmware iwl100-firmware iwl1000-firmware iwl105-firmware iwl135-firmware iwl2000-firmware iwl2030-firmware iwl3160-firmware iwl5000-firmware iwl5150-firmware iwl6000g2a-firmware iwl6000g2b-firmware iwl6050-firmware iwl7260-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr nss-mdns grub2-efi-x64 os-prober shim microcode_ctl mokutil dosfstools cpio bubblewrap langpacks-${packages_locale}
dnf --enablerepo=crb install -y rocky-sb-certs
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

case "${environment}" in
	'Full')
	default_session="gnome-wayland"
	install_desktop="
dnf install -y @\"Workstation\"
systemctl set-default graphical
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
dnf remove -y setroubleshoot-plugins
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
if [ "${useraccount_autologin}" == "Yes" ]; then
	if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
	echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y ${custom_packages}" > "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_SteamOS()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed aria2 bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux wget xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
cat >/etc/pacman_steamos.conf <<'PACMAN-STEAMOS'
#
# /etc/pacman.conf
#
# See the pacman.conf(5) manpage for option and repository directives
 
#
# GENERAL OPTIONS
#
[options]
# The following paths are commented out with their default values listed.
# If you wish to use different paths, uncomment and update the paths.
#RootDir     = /
#DBPath      = /var/lib/pacman/
#CacheDir    = /var/cache/pacman/pkg/
#LogFile     = /var/log/pacman.log
#GPGDir      = /etc/pacman.d/gnupg/
#HookDir     = /etc/pacman.d/hooks/
HoldPkg     = pacman glibc
#XferCommand = /usr/bin/curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f %u -o %o
#XferCommand = /usr/bin/wget --passive-ftp --show-progress -c -q -N -O %o %u
#XferCommand = /usr/bin/aria2c --allow-overwrite=true --continue=true --file-allocation=none --log-level=error --max-tries=10 --max-connection-per-server=2 --max-file-not-found=5 --min-split-size=5M --no-conf -Rtrue --summary-interval=60 --timeout=10 --dir=/ --out %o %u
#CleanMethod = KeepInstalled
Architecture = auto
 
# Pacman won't upgrade packages listed in IgnorePkg and members of IgnoreGroup
#IgnorePkg   =
#IgnoreGroup =
 
#NoUpgrade   =
NoExtract   = etc/sddm.conf.d/steamdeck.conf etc/skel/Desktop/Return.desktop etc/xdg/autostart/jupiter-plasma-bootstrap.desktop etc/xdg/autostart/steam.desktop usr/bin/jupiter-plasma-bootstrap usr/lib/udev/rules.d/99-kwin-ignore-tablet-mode.rules usr/share/xsessions/*
 
# Misc options
#UseSyslog
#Color
#NoProgressBar
CheckSpace
#VerbosePkgLists
ParallelDownloads = 5
DownloadUser = alpm
#DisableSandbox
DisableDownloadTimeout
 
# By default, pacman accepts packages signed by keys that its local keyring
# trusts (see pacman-key and its man page), as well as unsigned packages.
SigLevel    = Required DatabaseNever
LocalFileSigLevel = Optional
#RemoteFileSigLevel = Required
 
# NOTE: You must run \`pacman-key --init\` before first using pacman; the local
# keyring can then be populated with the keys of all official Arch Linux
# packagers with \`pacman-key --populate archlinux\`.
 
#
# REPOSITORIES
#   - can be defined here or included from another file
#   - pacman will search repositories in the order defined here
#   - local/custom mirrors can be added here or in separate files
#   - repositories listed first will take precedence when packages
#     have identical names, regardless of version number
#   - URLs will have $repo replaced by the name of the current repo
#   - URLs will have $arch replaced by the name of the architecture
#
# Repository entries are of the format:
#       [repo-name]
#       Server = ServerName
#       Include = IncludePath
#
# The header [repo-name] is crucial - it must be present and
# uncommented to enable the repo.
#
 
# The testing repositories are disabled by default. To enable, uncomment the
# repo name header and Include lines. You can add preferred servers immediately
# after the header, and they will be used before the default mirrors.
 
#[testing-$(echo ${steamos_version} | tr A-Z a-z)]
#Include = /etc/pacman.d/mirrorlist
 
[core-$(echo ${steamos_version} | tr A-Z a-z)]
Include = /etc/pacman.d/mirrorlist
 
[extra-$(echo ${steamos_version} | tr A-Z a-z)]
Include = /etc/pacman.d/mirrorlist
 
#[community-testing-$(echo ${steamos_version} | tr A-Z a-z)]
#Include = /etc/pacman.d/mirrorlist
 
[community-$(echo ${steamos_version} | tr A-Z a-z)]
Include = /etc/pacman.d/mirrorlist
 
[multilib-$(echo ${steamos_version} | tr A-Z a-z)]
Include = /etc/pacman.d/mirrorlist

[jupiter-$(echo ${steamos_version} | tr A-Z a-z)]
Include = /etc/pacman.d/mirrorlist
 
[holo-$(echo ${steamos_version} | tr A-Z a-z)]
Include = /etc/pacman.d/mirrorlist
 
# An example of a custom package repository.  See the pacman manpage for
# tips on creating your own repositories.
#[custom]
#SigLevel = Optional TrustAll
#Server = file:///home/custompkgs
PACMAN-STEAMOS
if [ ! -z "${mirror_SteamOS}" ]; then
	# Duplicate the Server line due to a bug in libalpm when using XferCommand
	echo -e 'Server = ${mirror_SteamOS}/\$repo/os/\$arch\nServer = ${mirror_SteamOS}/\$repo/os/\$arch' > /etc/pacman.d/mirrorlist
else
	# Duplicate the Server line due to a bug in libalpm when using XferCommand
	echo -e 'Server = https://steamdeck-packages.steamos.cloud/archlinux-mirror/\$repo/os/\$arch\nServer = https://steamdeck-packages.steamos.cloud/archlinux-mirror/\$repo/os/\$arch' > /etc/pacman.d/mirrorlist
fi
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://steamdeck-packages.steamos.cloud/archlinux-mirror/holo-$(echo ${steamos_version} | tr A-Z a-z)/os/x86_64/\$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://steamdeck-packages.steamos.cloud/archlinux-mirror/holo-$(echo ${steamos_version} | tr A-Z a-z)/os/x86_64/ | cut -d'>' -f3 | cut -d'"' -f2 | grep '^holo-keyring.*.tar.zst\$' | tail -1) | tar -x --zstd -C / usr/share/pacman/keyrings/holo.gpg usr/share/pacman/keyrings/holo-trusted usr/share/pacman/keyrings/holo-revoked
pacman-key --populate holo
pacstrap -P -C /etc/pacman_steamos.conf -G /mnt base base-devel holo-keyring wget
chmod 0644 /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm --needed linux linux-headers mkinitcpio dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs cpio bubblewrap
systemctl enable bluetooth.service ModemManager.service NetworkManager.service thermald.service
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="adobe-source-code-pro-fonts alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf archlinux-wallpaper at-spi2-core avahi cups dbus-broker ffmpeg flatpak gamescope gvfs iio-sensor-proxy intel-media-driver jq kscreen libva-mesa-driver lib32-vulkan-intel lib32-vulkan-radeon lib32-vulkan-swrast lib32-vulkan-virtio lib32-pipewire lib32-fontconfig mangohud nss-mdns openssh pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse steam-im-modules steam-jupiter-stable steam_notif_daemon sof-firmware system-config-printer ttf-dejavu ttf-liberation ttf-roboto udisks2 vulkan-intel vulkan-radeon vulkan-swrast vulkan-virtio weston wireplumber wqy-zenhei xdg-user-dirs-gtk xorg-server xorg-xinput"
desktop_services="avahi-daemon.service cups.service"
case "${environment}" in
	'Desktop')
	default_session="plasma"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma-desktop plasma-nm plasma-pa kwin ark dolphin konsole bluedevil powerdevil systemsettings kscreen discover kwallet-pam kde-gtk-config xsettingsd xdg-desktop-portal-kde steamdeck-kde-presets breeze-gtk breeze-icons
"
	;;
	'Gamescope')
	default_session="gamescope-session"
	install_desktop="
pacman -S --noconfirm --needed ${desktop_base} sddm qt6-virtualkeyboard plasma-desktop plasma-nm plasma-pa kwin ark dolphin konsole bluedevil powerdevil systemsettings kscreen discover kwallet-pam kde-gtk-config xsettingsd xdg-desktop-portal-kde steamdeck-kde-presets breeze-gtk breeze-icons
cat >/usr/share/wayland-sessions/gamescope-session.desktop <<'DECK_SESSION'
[Desktop Entry]
Encoding=UTF-8
Name=SteamOS (gamescope)
Comment=SteamOS Big Picture session
Exec=gamescope-session
Icon=steamicon.png
Type=Application
DesktopNames=gamescope
DECK_SESSION
mkdir -p /etc/skel/Desktop
cat >/etc/skel/Desktop/Return.desktop <<'RETURN_TO_GAMESCOPE'
[Desktop Entry]
Name=Return to Gaming Mode
Exec=return-gamescope-session
Icon=steamdeck-gaming-return
Terminal=false
Type=Application
StartupNotify=false
RETURN_TO_GAMESCOPE
chmod 0755 /etc/skel/Desktop/Return.desktop
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services} sddm.service
/tmp/linuxloops/install_steamos_configs
# Temporary XDG desktop portal fix
cat >/etc/xdg/autostart/xdg-desktop-portal-fix.desktop <<'PORTAL_FIX_AUTOSTART'
[Desktop Entry]
Type=Application
Name=XDG desktop portal fix
Exec=/usr/bin/xdg-desktop-portal-fix
OnlyShowIn=KDE;
NoDisplay=true
X-KDE-autostart-phase=1
PORTAL_FIX_AUTOSTART
cat >/usr/bin/xdg-desktop-portal-fix <<'PORTAL_FIX'
#!/bin/sh
systemctl --user restart xdg-desktop-portal
PORTAL_FIX
chmod 0755 /usr/bin/xdg-desktop-portal-fix
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_steamos_configs <<INSTALL_STEAMOS_CONFIGS
#!/bin/bash
set -e
echo -e 'net.ipv4.tcp_fin_timeout=5\nnet.ipv4.tcp_mtu_probing=1\nnet.ipv6.conf.all.disable_ipv6=1\nnet.ipv6.conf.default.disable_ipv6=1\nvm.compaction_proactiveness=0\nvm.max_map_count=1048576\nvm.swappiness=1' > /etc/sysctl.d/99-steam.conf
mkdir -p /etc/skel/.cache/thumbnails
mkdir -p /etc/skel/.local/share/applications
cat >/etc/skel/.local/share/applications/gamescope-session.desktop <<'DECKSESSIONICON'
[Desktop Entry]
Name=SteamDeck Session
Exec=gamescope-session
Icon=steamdeck-gaming-return
Terminal=false
Type=Application
Categories=Game;
PrefersNonDefaultGPU=true
X-KDE-RunOnDiscreteGpu=true
DECKSESSIONICON
cat >/usr/bin/gamescope-session <<'DECKSESSION'
#!/bin/bash

set -e

##
## Script to detect the display / GPU to use with gamescope
##

if [ ! -z "\${GAMESCOPE_SESSION_DISPLAY}" ]; then
        custom_gpu=\$(ls /sys/bus/*/devices/*/drm/card*/card*-* | grep "\-\${GAMESCOPE_SESSION_DISPLAY}:\$" | cut -d'/' -f8)
        if [ ! -z "\${custom_gpu}" ]; then
                GAMESCOPE_SESSION_GPU=\$(cat /sys/class/drm/\${custom_gpu}/device/vendor | sed 's@0x@@g'):\$(cat /sys/class/drm/\${custom_gpu}/device/device | sed 's@0x@@g')
        else
                unset GAMESCOPE_SESSION_DISPLAY
                echo "# Falling back to display autodetection as GAMESCOPE_SESSION_DISPLAY is incorrect."
        fi
fi

if [ -z "\${GAMESCOPE_SESSION_DISPLAY}" ]; then
        preferred_gpu=\$(grep 'enabled' /sys/bus/*/devices/*/drm/card*/card*-*/enabled | cut -d'/' -f8 | sort -r | uniq | head -1)
        GAMESCOPE_SESSION_GPU=\$(cat /sys/class/drm/\${preferred_gpu}/device/vendor | sed 's@0x@@g'):\$(cat /sys/class/drm/\${preferred_gpu}/device/device | sed 's@0x@@g')
        active_displays=\$(grep 'enabled' /sys/class/drm/\${preferred_gpu}/\${preferred_gpu}-*/enabled | cut -d':' -f1 | cut -d'/' -f-6)
        default_display=\$(echo "\$active_displays" | head -1)
        for display in \${active_displays}; do if [ -z \${GAMESCOPE_SESSION_DISPLAY} ] && [ "\$(echo \${display} | cut -d'/' -f6 | cut -d'-' -f2)" == "HDMI" ]; then GAMESCOPE_SESSION_DISPLAY="\$(echo \${display} | cut -d'/' -f6 | cut -d'-' -f2-)"; fi; done
        for display in \${active_displays}; do if [ -z \${GAMESCOPE_SESSION_DISPLAY} ] && [ "\$(echo \${display} | cut -d'/' -f6 | cut -d'-' -f2)" == "DP" ]; then GAMESCOPE_SESSION_DISPLAY="\$(echo \${display} | cut -d'/' -f6 | cut -d'-' -f2-)"; fi; done
        for display in \${active_displays}; do if [ -z \${GAMESCOPE_SESSION_DISPLAY} ] && [ "\$(echo \${display} | cut -d'/' -f6 | cut -d'-' -f2)" == "DVI" ]; then GAMESCOPE_SESSION_DISPLAY="\$(echo \${display} | cut -d'/' -f6 | cut -d'-' -f2-)"; fi; done
        for display in \${active_displays}; do if [ -z \${GAMESCOPE_SESSION_DISPLAY} ] && [ "\$(echo \${display} | cut -d'/' -f6 | cut -d'-' -f2)" == "VGA" ]; then GAMESCOPE_SESSION_DISPLAY="\$(echo \${display} | cut -d'/' -f6 | cut -d'-' -f2-)"; fi; done
        if [ -z \${GAMESCOPE_SESSION_DISPLAY} ]; then GAMESCOPE_SESSION_DISPLAY="\$(echo \${default_display} | cut -d'/' -f6 | cut -d'-' -f2-)"; fi
fi

if [ ! -z "\${GAMESCOPE_SESSION_RESOLUTION}" ]; then
        GAMESCOPE_SESSION_WIDTH=\$(echo \${GAMESCOPE_SESSION_RESOLUTION} | cut -d'x' -f1)
        GAMESCOPE_SESSION_HEIGHT=\$(echo \${GAMESCOPE_SESSION_RESOLUTION} | cut -d'x' -f2)
        GAMESCOPE_SESSION_RERESH_RATE=\$(echo \${GAMESCOPE_SESSION_RESOLUTION} | cut -d'x' -f3)
fi

if [ ! -z \${GAMESCOPE_SESSION_GPU} ] && [ ! -z \${GAMESCOPE_SESSION_DISPLAY} ]; then
        GAMESCOPE_FLAGS="\${GAMESCOPE_FLAGS} --prefer-vk-device \${GAMESCOPE_SESSION_GPU} -O \${GAMESCOPE_SESSION_DISPLAY},'*'"
fi

if [ ! -z \${GAMESCOPE_SESSION_WIDTH} ] && [ ! -z \${GAMESCOPE_SESSION_HEIGHT} ] && [ ! -z \${GAMESCOPE_SESSION_RERESH_RATE} ]; then
        GAMESCOPE_FLAGS="\${GAMESCOPE_FLAGS} -w \${GAMESCOPE_SESSION_WIDTH} -h \${GAMESCOPE_SESSION_HEIGHT} -r \${GAMESCOPE_SESSION_RERESH_RATE}"
fi

##
## SteamOS session globals
##

tmpdir="\$([[ -n \${XDG_RUNTIME_DIR+x} ]] && mktemp -p "\$XDG_RUNTIME_DIR" -d -t gamescope.XXXXXXX)"

export GAMESCOPE_DISABLE_ASYNC_FLIPS=1
export GAMESCOPE_LIMITER_FILE=\$(mktemp /tmp/gamescope-limiter.XXXXXXXX)
export GAMESCOPE_NV12_COLORSPACE=k_EStreamColorspace_BT601
export GTK_IM_MODULE=Steam
export INTEL_DEBUG=noccs
export MANGOHUD_CONFIGFILE="\${tmpdir:+\$tmpdir/mangohud.config}"
export QT_IM_MODULE=steam
export QT_QPA_PLATFORM_THEME=kde
export R600_DEBUG=nodcc
export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0
export SRT_URLOPEN_PREFER_STEAM=1
export STEAM_DISABLE_AUDIO_DEVICE_SWITCHING=1
export STEAM_ENABLE_VOLUME_HANDLER=1
export STEAM_GAMESCOPE_DYNAMIC_FPSLIMITER=1
export STEAM_GAMESCOPE_FANCY_SCALING_SUPPORT=1
export STEAM_GAMESCOPE_HDR_SUPPORTED=1
export STEAM_MANGOAPP_HORIZONTAL_SUPPORTED=1
export STEAM_MANGOAPP_PRESETS_SUPPORTED=1
export STEAM_USE_MANGOAPP=1
export vk_xwayland_wait_ready=false
export VKD3D_SWAPCHAIN_LATENCY_FRAMES=3
export WINE_CPU_TOPOLOGY=8:0,1,2,3,4,5,6,7
export XCURSOR_THEME="Breeze"

mkdir -p "\$(dirname "\$MANGOHUD_CONFIGFILE")"
echo "no_display" > "\$MANGOHUD_CONFIGFILE"

ulimit -n 524288

__NV_PRIME_RENDER_OFFLOAD=1 gamescope \${GAMESCOPE_FLAGS} --adaptive-sync --force-composition --force-grab-cursor --generate-drm-mode fixed --hdr-enabled --immediate-flips --mangoapp -b -e -f -- env DXVK_HDR=1 steam -steamos3 -gamepadui -system-composer -cef-force-gpu
DECKSESSION
chmod 0755 /usr/bin/gamescope-session
cat >/usr/bin/return-gamescope-session <<'RUNGAMINGSESSION'
#!/bin/bash

echo -e '[Autologin]\nSession=gamescope-session' > /tmp/zz-steamos.conf

qdbus6 org.kde.Shutdown /Shutdown org.kde.Shutdown.logout
RUNGAMINGSESSION
chmod 0755 /usr/bin/return-gamescope-session
cat >/usr/bin/steamos-session-select <<'SESSIONSELECT'
#!/bin/bash

echo -e '[Autologin]\nSession=plasma' > /tmp/zz-steamos.conf

pkill -9 steam
pkill -9 gamescope
SESSIONSELECT
chmod 0755 /usr/bin/steamos-session-select
cat >/usr/share/polkit-1/actions/org.valve.steamos.policy <<'POLKIT'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE policyconfig PUBLIC
 "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/PolicyKit/1/policyconfig.dtd">
<policyconfig>

  <vendor>Valve SteamOS</vendor>
  <vendor_url>http://www.steampowered.com</vendor_url>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-format-sdcard">
    <description>Run the steamos sdcard helper</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-format-sdcard</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-select-branch">
    <description>Run the steamos select branch helper</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-select-branch</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-update">
    <description>Run the steamos update helper</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-update</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-set-hostname">
    <description>Set the hostname</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-set-hostname</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-set-timezone">
    <description>Set the timezone</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-set-timezone</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-priv-write">
    <description>Helper to write to a set of device nodes</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-priv-write</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-reboot-now">
    <description>Reboot system</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-reboot-now</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-poweroff-now">
    <description>Poweroff system</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-poweroff-now</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-enable-sshd">
    <description>Enable the SSH server</description>
    <icon_name>package-x-generic</icon_name>
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-enable-sshd</annotate>
  </action>

</policyconfig>
POLKIT
mkdir -p /usr/bin/steamos-polkit-helpers
cat >/usr/bin/steamos-polkit-helpers/steamos-format-sdcard <<'FORMATSDCARD'
#!/bin/bash

set -eu

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

exec /usr/lib/hwsupport/format-sdcard.sh "\$@"
FORMATSDCARD
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-format-sdcard
mkdir -p /usr/lib/hwsupport
cat >/usr/lib/hwsupport/format-sdcard.sh <<'FORMATSDCARDSCRIPT'
#!/bin/bash

set -e

MOUNT_LOCK="/var/run/sdcard-mount.lock"
if [ -e /dev/mmcblk2 ]; then SDCARD_DEVICE="/dev/mmcblk2"; elif [ -e /dev/mmcblk1 ]; then SDCARD_DEVICE="/dev/mmcblk1"; else SDCARD_DEVICE="/dev/mmcblk0"; fi
SDCARD_PARTITION="\$SDCARD_DEVICE"p1
FORCE_FORMAT=0

while [[ \$# -gt 0 ]]; do
    case "\$1" in
        --force) FORCE_FORMAT=1; shift ;;
        *) echo "Unknown option \$1"; exit 22;;
    esac
done

if [[ ! -e "\$SDCARD_DEVICE" ]]; then
    exit 19 #ENODEV
fi

systemctl stop sdcard-mount@mmcblk0p1.service

# lock file prevents the mount service from re-mounting as it gets triggered by udev rules
on_exit() { rm -f -- "\$MOUNT_LOCK"; }
trap on_exit EXIT
echo \$\$ > "\$MOUNT_LOCK"

# Test the sdcard
# Some fake cards advertise a larger size than their actual capacity,
# which can result in data loss or other unexpected behaviour. It is
# best to try to detect these issues as early as possible.
if [[ "\$FORCE_FORMAT" == "0" ]]; then
    echo "stage=testing"
    if ! f3probe --destructive "\$SDCARD_DEVICE"; then
        # Fake sdcards tend to only behave correctly when formatted as exfat
        # The tricks they try to pull fall apart with any other filesystem and
        # it renders the card unusuable.
        #
        # Here we restore the card to exfat so that it can be used with other devices.
        # It won't be usable with the deck, and usage of the card will most likely
        # result in data loss. We return a special error code so we can surface
        # a specific error to the user.
        echo "stage=rescuing"
        echo "Bad sdcard - rescuing"
        for i in {1..3}; do # Give this a couple of tries since it fails sometimes
            echo "Create partition table: \$i"
            dd if=/dev/zero of="\$SDCARD_DEVICE" bs=512 count=1024 # see comment in similar statement below
            if ! parted --script "\$SDCARD_DEVICE" mklabel msdos mkpart primary 0% 100% ; then
                echo "Failed to create partition table: \$i"
                continue # try again
            fi

            echo "Create exfat filesystem: \$i"
            sync
            if ! mkfs.exfat "\$SDCARD_PARTITION"; then
                echo "Failed to exfat filesystem: \$i"
                continue # try again
            fi

            echo "Successfully restored device"
            break
        done

        # Return a specific error code so the UI can warn the user about this bad device
        exit 14 # EFAULT
    fi
fi

# Clear out the garbage bits generated by f3probe from the partition table sectors
# Otherwise parted may think we have existing partitions in a bogus state
dd if=/dev/zero of="\$SDCARD_DEVICE" bs=512 count=1024

# Format as EXT4 with casefolding for proton compatibility
echo "stage=formatting"
sync
parted --script "\$SDCARD_DEVICE" mklabel gpt mkpart primary 0% 100%
sync
mkfs.ext4 -m 0 -O casefold -F "\$SDCARD_PARTITION"
sync

rm "\$MOUNT_LOCK"
systemctl start sdcard-mount@mmcblk0p1.service

exit 0
FORMATSDCARDSCRIPT
chmod 0755 /usr/lib/hwsupport/format-sdcard.sh
cat >/usr/bin/steamos-polkit-helpers/steamos-select-branch <<'SELECTBRANCH'
#!/bin/bash

set -eu

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

exec /usr/bin/steamos-select-branch "\$@"
SELECTBRANCH
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-select-branch
cat >/usr/bin/steamos-select-branch <<'SELECTBRANCHSCRIPT'
#!/bin/bash
set -e

BRANCH_PATH="/var/lib/steamos-branch"

if [[ "\$#" = 1 ]]; then
  case "\$1" in
    "-c")
      branch=\$(cat "\$BRANCH_PATH" 2> /dev/null || echo "rel")
      case "\$branch" in
        "rel" | "rc" | "beta" | "bc" | "main")
          echo "\$branch"
          exit 0
          ;;
        *)
          echo "unknown branch name in \$BRANCH_PATH: \$branch" 1>&2
          exit 1
          ;;
      esac
      ;;
    "-l")
      echo rel
      echo rc
      echo beta
      echo bc
      echo main
      exit 0
      ;;
    "rel" | "rc" | "beta" | "bc" | "main")
      echo "\$1" > "\$BRANCH_PATH"
      exit 0
      ;;
  esac
fi

echo "Usage: steamos-select-branch <-c|-l|rel|rc|beta|bc|main>" 1>&2
SELECTBRANCHSCRIPT
chmod 0755 /usr/bin/steamos-select-branch
cat >/usr/bin/steamos-polkit-helpers/steamos-update <<'FAKESTEAMOSUPDATE'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

exit 7

if [ "\$(pacman -Qu)" == "" ]; then exit 7; fi

if pacman -Syu --noconfirm 2>&1 > /tmp/system_update.log; then
    exit 8
else
    exit 1
fi
FAKESTEAMOSUPDATE
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-update
cat >/usr/bin/steamos-polkit-helpers/steamos-set-hostname <<'SETHOSTNAME'
#!/bin/bash

set -eu

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

hostnamectl set-hostname "$1"
SETHOSTNAME
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-set-hostname
cat >/usr/bin/steamos-polkit-helpers/steamos-set-timezone <<'SETTIMEZONE'
#!/bin/bash

set -eu

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

timedatectl set-timezone "$1"
SETTIMEZONE
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-set-timezone
cat >//usr/bin/steamos-polkit-helpers/steamos-priv-write <<'PRIVWRITE'
#!/bin/bash

set -eu

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

WRITE_PATH="\$1"
WRITE_VALUE="\$2"

function CommitWrite()
{
    echo "commit: \$WRITE_VALUE -> \$WRITE_PATH" | systemd-cat -t p-steamos-priv-write -p warning
    echo "\$WRITE_VALUE" > "\$WRITE_PATH"
    chmod a+w "\$WRITE_PATH"
    exit 0
}

function DeclineWrite()
{
    echo "decline: \$WRITE_VALUE -> \$WRITE_PATH" | systemd-cat -t p-steamos-priv-write -p err
    echo "\$WRITE_VALUE" > "\$WRITE_PATH"
    exit 1
}

echo "checking: \$WRITE_PATH" | systemd-cat -t p-steamos-priv-write -p warning
if [[ "\$WRITE_PATH" == /sys/class/backlight/*/brightness ]]; then
   CommitWrite
fi

DeclineWrite
PRIVWRITE
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-priv-write
cat >/usr/bin/steamos-polkit-helpers/steamos-reboot-now <<'REBOOT'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$(realpath \$0)" "\$@"
fi

reboot
REBOOT
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-reboot-now
cat >/usr/bin/steamos-polkit-helpers/steamos-poweroff-now <<'POWEROFF'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$(realpath \$0)" "\$@"
fi

poweroff
POWEROFF
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-poweroff-now
cat >/usr/bin/steamos-polkit-helpers/steamos-enable-sshd <<'ENABLESSHD'
#!/bin/bash

set -eu

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

exec systemctl enable --now sshd
ENABLESSHD
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-enable-sshd
cat >/usr/bin/steamos-polkit-helpers/jupiter-biosupdate <<'FAKEBIOSUPDATE'
#!/bin/bash

exit 0
FAKEBIOSUPDATE
chmod 0755 /usr/bin/steamos-polkit-helpers/jupiter-biosupdate
cat >/usr/bin/steamos-polkit-helpers/jupiter-dock-updater <<'FAKEDOCKUPDATE'
#!/bin/bash

exit 7
FAKEDOCKUPDATE
chmod 0755 /usr/bin/steamos-polkit-helpers/jupiter-dock-updater
INSTALL_STEAMOS_CONFIGS
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_steamos_configs

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
mkdir -p /etc/sddm.conf.d
echo -e '[Theme]\nCurrent=breeze' > /etc/sddm.conf.d/99_linuxloops.conf
if [ "${useraccount_autologin}" == "Yes" ] && [ "${environment}" == "Desktop" ]; then
	cat >/etc/sddm.conf.d/steamos.conf <<'SDDM'
[Autologin]
Session=${default_session}
User=${useraccount_name}
SDDM
	sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
elif [ "${environment}" == "Gamescope" ]; then
	ln -s /tmp/zz-steamos.conf /etc/sddm.conf.d/zz-steamos.conf
	cat >/etc/sddm.conf.d/steamos.conf <<'SDDM'
[General]
DisplayServer=wayland

[Autologin]
Relogin=true
Session=${default_session}
User=${useraccount_name}
SDDM
	sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
fi
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux linux-headers"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm --needed ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Tails()
{
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@#ParallelDownloads@ParallelDownloads@g' /etc/pacman.conf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://gitlab.archlinux.org/archlinux/packaging/packages/pacman-mirrorlist/-/raw/main/mirrorlist?ref_type=heads\&inline=false -o /etc/pacman.d/mirrorlist
if [ ! -z "${mirror_Arch}" ]; then
	echo 'Server = ${mirror_Arch}/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
else
	cur_speed=0; for i in https://geo.mirror.pkgbuild.com https://mirrors.rit.edu/archlinux https://archlinux.mirror.digitalpacific.com.au; do if ! avg_speed=\$(curl -fsS -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "\${i}/core/os/x86_64/core.db" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror \${i} is \${avg_speed}; if [ \${avg_speed} -gt \${cur_speed} ]; then cur_speed=\${avg_speed}; default_mirror=\${i}; fi; done; echo Using mirror \${default_mirror}; sed -i "s@#Server = \${default_mirror}@Server = \${default_mirror}@g" /etc/pacman.d/mirrorlist
fi
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cpio cryptsetup curl dosfstools e2fsprogs efibootmgr fatresize gzip lsof nano openssl parted sbsigntools sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
/tmp/linuxloops/install_script
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/install_script <<INSTALL_SCRIPT
#!/bin/bash
set -e
echo "Downloading Tails image"
for i in 1 .. 3; do
	if curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f \$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://tails.net/install/v2/Tails/amd64/$(echo ${tails_version} | tr A-Z a-z)/latest.json | grep '"url"' | head -1 | cut -d '"' -f4) -o /tails.img; then
		if [ "\$(sha256sum tails.img | cut -d' ' -f1)" == "\$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://tails.net/install/v2/Tails/amd64/$(echo ${tails_version} | tr A-Z a-z)/latest.json | grep '"sha256"' | head -1 | cut -d '"' -f4)" ]; then
			echo "sha256sum verification succeeded"
			break
		else
			echo "sha256sum verification failed, retrying download..."
		fi
	fi
	if [ "\${i}" -eq 3 ]; then echo "Download of Tails image failed"; exit 1; fi
done
echo "Downloading Tails signing key"
curl -L -O https://tails.net/tails-signing.key
gpg --homedir /tmp --import tails-signing.key
echo "Downloading Tails signature"
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f \$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://tails.net/install/v2/Tails/amd64/$(echo ${tails_version} | tr A-Z a-z)/latest.json | grep '"url"' | head -1 | cut -d '"' -f4).sig -o /tails.img.sig
gpg --homedir /tmp --verify tails.img.sig tails.img || { echo -e "Tails image has an invalid signature."; exit 1; }
dd if=/tails.img of="${destination_device}" bs=1M status=progress
rm /tails.img
if [ "${install_type}" == "image" ]; then
	mkdir -p /isomount
	mount "${partition_path}"1 /isomount
	mkdir -p /tmp/initramfs/scripts/init-bottom /tmp/initramfs/scripts/init-top /tmp/initramfs/usr/lib/udev/rules.d
	cp /tmp/linuxloops/install_initramfs /tmp/initramfs/linuxloops
	chmod 0755 /tmp/initramfs/linuxloops
	cat >/tmp/initramfs/scripts/init-top/udev <<'LINUXLOOPSFIXTOP'
sed -i 's@SYSTEM_PARTITION=.*@SYSTEM_PARTITION=/dev/loop0p1@g' /scripts/init-premount/partitioning
sed -i 's@PARENT_DEVICE=.*@PARENT_DEVICE=/dev/loop0@g' /scripts/init-premount/partitioning
echo "test linuxloopsfix" > /dev/kmsg
LINUXLOOPSFIXTOP
	chmod 0755 /tmp/initramfs/scripts/init-top/udev
	cat >/tmp/initramfs/scripts/init-bottom/udev <<'LINUXLOOPSFIXBOTTOM'
echo -e '#!/bin/bash\necho /dev/loop0' > /root/usr/local/lib/tails-get-boot-device
cat >/root/etc/udev/rules.d/99-zzzlinuxloops.rules <<'TAILSUDEV'
SUBSYSTEMS=="block", KERNEL=="loop0", ENV{ID_DRIVE_DETACHABLE}="0", SYMLINK+="TailsBootDev", SYMLINK+="bilibop"
SUBSYSTEMS=="block", KERNEL=="loop0*", ENV{UDISKS_SYSTEM}="1", GROUP="floppy"
ENV{ID_FS_LABEL}=="TailsData", ENV{UDISKS_IGNORE}="1"
TAILSUDEV
sed -i 's#loop|##g' /root/lib/live/boot/*
sed -i 's#if (\$device =~ m{mmcblk \[0-9]+ \\\\z}xms) {#if (\$device =~ m{mmcblk [0-9]+ \\\\z}xms or \$device =~ m{loop [0-9]+ \\\\z}xms) {#g' \$(find /root/usr/local/share/perl | grep 'UDisks.pm' | head -1)
sed -i -e 's#method get_udisks_property (Str \$type, Defined \$object, Str \$property) {#method get_udisks_property (Str \$type, Defined \$object, Str \$property) {\nif (\$type eq "Block" and \$property eq "Drive" and \$object =~ m/loop0/) { return "/dev/loop0"; }\nif (\$type eq "Drive" and \$property eq "ConnectionBus" and \$object =~ m/loop0/) { return "sdio"; }\nif (\$type eq "Drive" and \$property eq "Optical" and \$object =~ m/loop0/) { return 0; }\nif (\$type eq "Drive" and \$property eq "Vendor" and \$object =~ m/loop0/) { return "linuxloops"; }\nif (\$type eq "Drive" and \$property eq "Model" and \$object =~ m/loop0/) { return "linuxloops"; }#g' \$(find /root/usr/local/share/perl | grep 'UDisks.pm' | head -1)
LINUXLOOPSFIXBOTTOM
	chmod 0755 /tmp/initramfs/scripts/init-bottom/udev
	(cd /tmp/initramfs && find . | cpio -o -H newc | gzip > /isomount/live/linuxloops.img)
	mkdir -p /mnt/etc/secureboot_key
	sbattach --signum 1 --detach /mnt/etc/secureboot_key/MOK.tmp /isomount/live/vmlinuz
	openssl pkcs7 -print_certs -inform der -in /mnt/etc/secureboot_key/MOK.tmp -out /mnt/etc/secureboot_key/MOK.pem
	openssl x509 -outform DER -in /mnt/etc/secureboot_key/MOK.pem -out /mnt/etc/secureboot_key/MOK.der
	umount /isomount
fi
INSTALL_SCRIPT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_script

initramfs_type="iso_init"
}

chroot_Ubuntu-24.04()
{
if [ -z "${mirror_Ubuntu}" ]; then mirror_Ubuntu="http://archive.ubuntu.com/ubuntu"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://archive.ubuntu.com/ubuntu @${mirror_Ubuntu} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,ubuntu-minimal,xz-utils $(echo ${ubuntu_version} | tr A-Z a-z) /mnt ${mirror_Ubuntu}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse
# deb-src ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse

deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse
# deb-src ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
# deb-src http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
SOURCESLIST
apt update
DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-generic linux-headers-generic initramfs-tools dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap language-selector-common
if [ "${systemd_init}" == "Yes" ]; then systemctl start snapd; fi
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-noto fonts-roboto fonts-ubuntu gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire pipewire-audio-client-libraries pipewire-pulse plymouth-themes system-config-printer ubuntu-wallpapers udisks2 wireplumber xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop budgie-desktop-environment network-manager-gnome gnome-keyring libpam-gnome-keyring budgie-applications-menu-applet budgie-brightness-controller-applet budgie-hotcorners-applet budgie-indicator-applet budgie-network-manager-applet budgie-rotation-lock-applet budgie-trash-applet ubuntu-budgie-themes pocillo-icon-theme nemo gnome-terminal plank gjs mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk libgdk-pixbuf2.0-bin gnome-icon-theme
"
	;;
	'Budgie/Full')
	default_session="budgie-desktop"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop budgie-desktop-environment network-manager-gnome gnome-keyring libpam-gnome-keyring mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk libgdk-pixbuf2.0-bin gnome-icon-theme
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntucinnamon-lightdm-theme ubuntucinnamon-desktop-minimal gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntucinnamon-lightdm-theme ubuntucinnamon-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter enlightenment terminology xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt install --purge -y network-manager- connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome-session gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal gnome-icon-theme nautilus notification-daemon update-manager xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal nautilus notification-daemon update-manager xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter i3 i3lock i3status dmenu rxvt-unicode volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde openbox lxterminal pcmanfm lxde-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde openbox network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="Lubuntu"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm lubuntu-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring lubuntu-default-settings openbox qterminal pcmanfm-qt lubuntu-artwork humanity-icon-theme blueman lxqt-policykit lubuntu-update-notifier xdg-desktop-portal-gtk qml6-module-qtqml-workerscript papirus-icon-theme
"
	;;
	'Lxqt/Full')
	default_session="Lubuntu"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm lubuntu-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring openbox qterminal pcmanfm-qt lubuntu-artwork humanity-icon-theme blueman lxqt-policykit lubuntu-update-notifier xdg-desktop-portal-gtk qml6-module-qtqml-workerscript papirus-icon-theme
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntu-mate-desktop mate-session-manager ubuntu-mate-themes ubuntu-mate-wallpapers mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja ayatana-indicator-application ayatana-indicator-datetime ayatana-indicator-notifications ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntu-mate-desktop mate-session-manager network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasmawayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm kubuntu-desktop plasma-workspace-wayland dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasmawayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm kubuntu-desktop plasma-workspace-wayland polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Studio/Full')
	default_session="plasmawayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm ubuntustudio-desktop plasma-workspace-wayland ardour obs-studio krita gimp kdenlive digikam darktable patchance polkit-kde-agent-1 xdg-desktop-portal-kde
"
	;;
	'Ubuntu')
	default_session="ubuntu-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 ubuntu-desktop-minimal network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal nautilus yaru-theme-gtk yaru-theme-icon yaru-theme-sound notification-daemon update-manager xdg-desktop-portal-gnome
"
	;;
	'Ubuntu/Full')
	default_session="ubuntu-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 ubuntu-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal nautilus notification-daemon update-manager xdg-desktop-portal-gnome
"
	;;
	'Unity')
	desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto fonts-ubuntu gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers plymouth-themes pulseaudio pulseaudio-module-bluetooth system-config-printer ubuntu-wallpapers udisks2 xdg-user-dirs-gtk xserver-xorg"
	default_session="unity"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntu-unity-desktop indicator-applet indicator-application indicator-session nautilus gnome-terminal network-manager-gnome gnome-keyring libpam-gnome-keyring mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Unity/Full')
	desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto fonts-ubuntu gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers plymouth-themes pulseaudio pulseaudio-module-bluetooth system-config-printer ubuntu-wallpapers udisks2 xdg-user-dirs-gtk xserver-xorg"
	default_session="unity"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntu-unity-desktop indicator-applet indicator-application indicator-session nautilus gnome-terminal network-manager-gnome gnome-keyring libpam-gnome-keyring mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Xfce')
	default_session="xubuntu"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm lightdm-gtk-greeter xubuntu-desktop xfce4-session xfce4-whiskermenu-plugin xubuntu-icon-theme xfce4-power-manager-plugins xfce4-pulseaudio-plugin xfce4-terminal thunar xfce4-notifyd greybird-gtk-theme elementary-xfce-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xubuntu"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm lightdm-gtk-greeter xubuntu-desktop xfce4-session xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
if [ "${systemd_init}" == "Yes" ]; then snap install snap-store; fi
if [ -f /etc/default/apport ]; then sed -i 's@enabled=1@enabled=0@g' /etc/default/apport; fi
update-alternatives --set default.plymouth /usr/share/plymouth/themes/spinner/spinner.plymouth
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full'|'Ubuntu'|'Ubuntu/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Lxqt'|'Lxqt/Full'|'Plasma'|'Plasma/Full'|'Studio/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		if [ ! "$(echo ${environment} | cut -d'/' -f1)" == "Budgie" ] && [ ! "$(echo ${environment} | cut -d'/' -f1)" == "Cinnamon" ] && [ ! "$(echo ${environment} | cut -d'/' -f1)" == "Mate" ] && [ ! "$(echo ${environment} | cut -d'/' -f1)" == "Xfce" ]; then echo -e '[Greeter]\nbackground = /usr/share/backgrounds/warty-final-ubuntu.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf; fi
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			mkdir -p /etc/lightdm/lightdm.conf.d
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} \$(apt search nvidia | grep libnvidia-gl | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(libnvidia-gl-).*' | cut -d' ' -f1 | cut -d '/' -f1):i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Ubuntu-25.04()
{
if [ -z "${mirror_Ubuntu}" ]; then mirror_Ubuntu="http://archive.ubuntu.com/ubuntu"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://archive.ubuntu.com/ubuntu @${mirror_Ubuntu} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,linux-sysctl-defaults,locales,ubuntu-minimal,xz-utils $(echo ${ubuntu_version} | tr A-Z a-z) /mnt ${mirror_Ubuntu}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse
# deb-src ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse

deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse
# deb-src ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
# deb-src http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
SOURCESLIST
apt update
DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-generic linux-headers-generic initramfs-tools dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez systemd-cryptsetup cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap language-selector-common
if [ "${systemd_init}" == "Yes" ]; then systemctl start snapd; fi
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-noto fonts-roboto fonts-ubuntu gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers pipewire pipewire-audio-client-libraries pipewire-pulse plymouth-themes system-config-printer ubuntu-wallpapers udisks2 wireplumber xdg-user-dirs-gtk xserver-xorg"
case "${environment}" in
	'Budgie')
	default_session="budgie-desktop"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop budgie-desktop-environment network-manager-gnome gnome-keyring libpam-gnome-keyring budgie-applications-menu-applet budgie-brightness-controller-applet budgie-hotcorners-applet budgie-indicator-applet budgie-network-manager-applet budgie-rotation-lock-applet budgie-trash-applet ubuntu-budgie-themes pocillo-icon-theme nemo gnome-terminal plank gjs mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk libgdk-pixbuf2.0-bin gnome-icon-theme
"
	;;
	'Budgie/Full')
	default_session="budgie-desktop"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop budgie-desktop-environment network-manager-gnome gnome-keyring libpam-gnome-keyring mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk libgdk-pixbuf2.0-bin gnome-icon-theme
"
	;;
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntucinnamon-lightdm-theme ubuntucinnamon-desktop-minimal gnome-terminal nemo network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Cinnamon/Full')
	default_session="cinnamon"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntucinnamon-lightdm-theme ubuntucinnamon-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk cinnamon-l10n
"
	;;
	'Enlightenment')
	default_session="enlightenment"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter enlightenment terminology xdg-desktop-portal-gtk
DEBIAN_FRONTEND=noninteractive apt install --purge -y network-manager- connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome-session gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal gnome-icon-theme nautilus notification-daemon update-manager xdg-desktop-portal-gnome
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 gnome gnome-control-center network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-backgrounds gnome-screensaver gnome-terminal nautilus notification-daemon update-manager xdg-desktop-portal-gnome
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter i3 i3lock i3status dmenu rxvt-unicode volumeicon-alsa network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde openbox lxterminal pcmanfm lxde-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxde/Full')
	default_session="LXDE"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter lxde openbox network-manager-gnome gnome-keyring libpam-gnome-keyring blueman lxpolkit xdg-desktop-portal-gtk
"
	;;
	'Lxqt')
	default_session="Lubuntu"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm lubuntu-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring lubuntu-default-settings openbox qterminal pcmanfm-qt lubuntu-artwork humanity-icon-theme blueman lxqt-policykit lubuntu-update-notifier xdg-desktop-portal-gtk qml6-module-qtqml-workerscript papirus-icon-theme
"
	;;
	'Lxqt/Full')
	default_session="Lubuntu"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm lubuntu-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring openbox qterminal pcmanfm-qt lubuntu-artwork humanity-icon-theme blueman lxqt-policykit lubuntu-update-notifier xdg-desktop-portal-gtk qml6-module-qtqml-workerscript papirus-icon-theme
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntu-mate-desktop mate-session-manager ubuntu-mate-themes ubuntu-mate-wallpapers mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja ayatana-indicator-application ayatana-indicator-datetime ayatana-indicator-notifications ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntu-mate-desktop mate-session-manager network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm kubuntu-desktop dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm kubuntu-desktop polkit-kde-agent-1 breeze-gtk-theme breeze-icon-theme xdg-desktop-portal-kde
"
	;;
	'Studio/Full')
	default_session="plasma"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} sddm ubuntustudio-desktop ardour obs-studio krita gimp kdenlive digikam darktable patchance polkit-kde-agent-1 xdg-desktop-portal-kde
"
	;;
	'Ubuntu')
	default_session="ubuntu-wayland"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 ubuntu-desktop-minimal network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal nautilus yaru-theme-gtk yaru-theme-icon yaru-theme-sound notification-daemon update-manager xdg-desktop-portal-gnome
"
	;;
	'Ubuntu/Full')
	default_session="ubuntu-wayland"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} gdm3 ubuntu-desktop network-manager-gnome gnome-keyring libpam-gnome-keyring gnome-terminal nautilus notification-daemon update-manager xdg-desktop-portal-gnome
"
	;;
	'Unity')
	desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto fonts-ubuntu gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers plymouth-themes pulseaudio pulseaudio-module-bluetooth system-config-printer ubuntu-wallpapers udisks2 xdg-user-dirs-gtk xserver-xorg"
	default_session="unity"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntu-unity-desktop indicator-applet indicator-application indicator-session nautilus gnome-terminal network-manager-gnome gnome-keyring libpam-gnome-keyring mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Unity/Full')
	desktop_base="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-user-session dbus-x11 ffmpeg firmware-sof-signed fonts-dejavu fonts-roboto fonts-ubuntu gvfs-fuse iio-sensor-proxy intel-media-va-driver libnss-mdns mesa-va-drivers mesa-vulkan-drivers plymouth-themes pulseaudio pulseaudio-module-bluetooth system-config-printer ubuntu-wallpapers udisks2 xdg-user-dirs-gtk xserver-xorg"
	default_session="unity"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm slick-greeter ubuntu-unity-desktop indicator-applet indicator-application indicator-session nautilus gnome-terminal network-manager-gnome gnome-keyring libpam-gnome-keyring mate-polkit notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Xfce')
	default_session="xubuntu"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm lightdm-gtk-greeter xubuntu-desktop xfce4-session xfce4-whiskermenu-plugin xubuntu-icon-theme xfce4-power-manager-plugins xfce4-pulseaudio-plugin xfce4-terminal thunar xfce4-notifyd greybird-gtk-theme elementary-xfce-icon-theme network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
	'Xfce/Full')
	default_session="xubuntu"
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
DEBIAN_FRONTEND=noninteractive apt install --purge -y ${desktop_base} lightdm lightdm-gtk-greeter xubuntu-desktop xfce4-session xfce4-whiskermenu-plugin network-manager-gnome gnome-keyring libpam-gnome-keyring blueman mate-polkit papirus-icon-theme notification-daemon update-manager xdg-desktop-portal-gtk
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
if [ "${systemd_init}" == "Yes" ]; then snap install snap-store; fi
if [ -f /etc/default/apport ]; then sed -i 's@enabled=1@enabled=0@g' /etc/default/apport; fi
update-alternatives --set default.plymouth /usr/share/plymouth/themes/spinner/spinner.plymouth
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full'|'Ubuntu'|'Ubuntu/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Lxqt'|'Lxqt/Full'|'Plasma'|'Plasma/Full'|'Studio/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		if [ ! "$(echo ${environment} | cut -d'/' -f1)" == "Budgie" ] && [ ! "$(echo ${environment} | cut -d'/' -f1)" == "Cinnamon" ] && [ ! "$(echo ${environment} | cut -d'/' -f1)" == "Mate" ] && [ ! "$(echo ${environment} | cut -d'/' -f1)" == "Xfce" ]; then echo -e '[Greeter]\nbackground = /usr/share/backgrounds/warty-final-ubuntu.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf; fi
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			mkdir -p /etc/lightdm/lightdm.conf.d
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} \$(apt search nvidia | grep libnvidia-gl | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(libnvidia-gl-).*' | cut -d' ' -f1 | cut -d '/' -f1):i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Void()
{
if [ -z "${mirror_Void}" ]; then mirror_Void="https://mirrors.servercentral.com/voidlinux"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
echo 'repository=${mirror_Void}/$(echo ${void_version} | tr A-Z a-z)' > /usr/share/xbps.d/00-repository-main.conf
xbps-install -Syu xbps
xbps-install -Syu
xbps-install -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
mkdir -p /mnt/var/db/xbps
cp -r /var/db/xbps/keys /mnt/var/db/xbps/
xbps-install -Sy -r /mnt -R ${mirror_Void}/current base-system void-repo-nonfree xz
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
echo 'repository=${mirror_Void}/$(echo ${void_version} | tr A-Z a-z)' > /usr/share/xbps.d/00-repository-main.conf
xbps-install -Syu
xbps-install -y linux linux-headers dracut dkms linux-firmware wireless-regdb bash sudo ModemManager NetworkManager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patch net-tools usb-modeswitch upower efibootmgr grub-x86_64-efi os-prober sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap
ln -s /etc/sv/bluetoothd /etc/sv/dbus /etc/sv/dhcpcd /etc/sv/elogind /etc/sv/NetworkManager /etc/sv/polkitd /etc/sv/uuidd /etc/runit/runsvdir/default/
cat >>/etc/rc.conf <<SETTINGS
KEYMAP="${keymap}"
TIMEZONE="${timezone}"
SETTINGS
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

desktop_base="alsa-utils alsa-ucm-conf at-spi2-core avahi-discover cups cups-browsed cups-filters dbus-elogind-x11 dejavu-fonts-ttf ffmpeg font-adobe-source-code-pro fonts-roboto-ttf gvfs iio-sensor-proxy intel-media-driver mesa-vaapi mesa-vulkan-intel mesa-vulkan-lavapipe mesa-vulkan-radeon nss-mdns pulseaudio pipewire sof-firmware system-config-printer udisks2 xdg-user-dirs-gtk xorg"
desktop_services="/etc/sv/avahi-daemon /etc/sv/cupsd /etc/sv/cups-browsed"
case "${environment}" in
	'Cinnamon')
	default_session="cinnamon"
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter cinnamon nemo gnome-terminal network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Gnome')
	default_session="gnome-wayland"
	install_desktop="
xbps-install -y ${desktop_base} gdm gnome-core network-manager-applet gnome-keyring nautilus gnome-terminal xdg-desktop-portal-gnome
ln -s /etc/sv/gdm  /etc/runit/runsvdir/default/
"
	;;
	'Gnome/Full')
	default_session="gnome-wayland"
	install_desktop="
xbps-install -y ${desktop_base} gdm gnome network-manager-applet gnome-keyring xdg-desktop-portal-gnome
ln -s /etc/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'i3')
	default_session="i3"
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter i3 i3status i3lock dmenu rxvt-unicode volumeicon network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxde')
	default_session="LXDE"
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter lxde network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Lxqt')
	default_session="lxqt"
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter lxqt network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Mate')
	default_session="mate"
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter mate network-manager-applet gnome-keyring blueman mate-terminal mate-power-manager mate-applets xdg-desktop-portal-gtk
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Mate/Full')
	default_session="mate"
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter mate mate-extra network-manager-applet gnome-keyring blueman mate-terminal mate-power-manager mate-applets xdg-desktop-portal-gtk
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'Plasma')
	default_session="plasma"
	install_desktop="
xbps-install -y ${desktop_base} sddm kde5 dolphin konsole xdg-desktop-portal-kde
ln -s /etc/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'Plasma/Full')
	default_session="plasma"
	install_desktop="
xbps-install -y ${desktop_base} sddm kde5 kde5-baseapps xdg-desktop-portal-kde
ln -s /etc/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'Xfce')
	default_session="xfce"
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter xfce4 xfce4-notifyd xfce4-pulseaudio-plugin network-manager-applet gnome-keyring blueman xdg-desktop-portal-gtk
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
ln -s ${desktop_services} /etc/runit/runsvdir/default/
mkdir -p /etc/pipewire/pipewire.conf.d
ln -s /usr/share/examples/wireplumber/10-wireplumber.conf /etc/pipewire/pipewire.conf.d/
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG wheel '${useraccount_name}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Gnome'|'Gnome/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Plasma'|'Plasma/Full')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			mkdir -p /etc/sddm.conf.d
			echo -e '[Autologin]\nUser=${useraccount_name}\nSession=${default_session}' >> /etc/sddm.conf.d/zz_linuxloops.conf
			sudo -u '${useraccount_name}' bash << 'DISABLE_KWALLET'
mkdir -p \$HOME/.config
echo -e '[Wallet]\nEnabled=false' > \$HOME/.config/kwalletrc
DISABLE_KWALLET
		fi
	;;
	*)
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			mkdir -p /etc/lightdm/lightdm.conf.d
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq '32bit\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			custom_packages="${custom_packages} libgcc-32bit libstdc++-32bit libdrm-32bit libglvnd-32bit mesa-32bit liberation-fonts-ttf"
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} nvidia-libs-32bit"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "xbps-install -y void-repo-multilib void-repo-multilib-nonfree" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "xbps-install -Sy" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nxbps-install -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

chroot_Zorin()
{
if [ -z "${mirror_Ubuntu}" ]; then mirror_Ubuntu="http://archive.ubuntu.com/ubuntu"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap <<PREPARE_BOOTSTRAP
#!/bin/bash
set -e
sed -i 's@http://archive.ubuntu.com/ubuntu @${mirror_Ubuntu} @g' /etc/apt/sources.list
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
PREPARE_BOOTSTRAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_bootstrap

cat >"${bootstrapdir}"/tmp/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,curl,file,gnupg,kbd,keyboard-configuration,locales,xz-utils $(echo ${ubuntu_version} | tr A-Z a-z) /mnt ${mirror_Ubuntu}
PREPARE_CHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/prepare_chroot

cat >"${bootstrapdir}"/tmp/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y software-properties-common
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z) main restricted universe multiverse
deb ${mirror_Ubuntu} $(echo ${ubuntu_version} | tr A-Z a-z)-updates main restricted universe multiverse
deb http://security.ubuntu.com/ubuntu $(echo ${ubuntu_version} | tr A-Z a-z)-security main restricted universe multiverse
SOURCESLIST
add-apt-repository ppa:zorinos/apps -y
add-apt-repository ppa:zorinos/drivers -y
add-apt-repository ppa:zorinos/patches -y
add-apt-repository ppa:zorinos/stable -y
cat >/etc/apt/sources.list.d/zorin.list <<'ZORINLIST'
deb [signed-by=/tmp/zorin-os.gpg] https://packages.zorinos.com/stable $(echo ${ubuntu_version} | tr A-Z a-z) main
# deb-src https://packages.zorinos.com/stable $(echo ${ubuntu_version} | tr A-Z a-z) main

deb [signed-by=/tmp/zorin-os.gpg] https://packages.zorinos.com/patches $(echo ${ubuntu_version} | tr A-Z a-z) main
# deb-src https://packages.zorinos.com/patches $(echo ${ubuntu_version} | tr A-Z a-z) main

deb [signed-by=/tmp/zorin-os.gpg] https://packages.zorinos.com/apps $(echo ${ubuntu_version} | tr A-Z a-z) main
# deb-src https://packages.zorinos.com/apps $(echo ${ubuntu_version} | tr A-Z a-z) main

deb [signed-by=/tmp/zorin-os.gpg] https://packages.zorinos.com/drivers $(echo ${ubuntu_version} | tr A-Z a-z) main restricted
# deb-src https://packages.zorinos.com/drivers $(echo ${ubuntu_version} | tr A-Z a-z) main restricted
ZORINLIST
cat >/etc/apt/preferences.d/zorin-os-patches.pref <<'ZORINPRIORITY'
Explanation: OS patches for Zorin OS.
Explanation: We need this pin because our patched build can lag a few hours behind Ubuntu's updates,
Explanation: and during those few hours packages can be overwritten with unpatched ones.
Package: *
Pin: release o=LP-PPA-zorinos-patches
Pin-Priority: 999
ZORINPRIORITY
cat >/etc/apt/preferences.d/zorinos-patches.pref <<'ZORINPRIORITY2'
Explanation: OS patches for Zorin OS.
Explanation: We need this pin because our patched build can lag a few hours behind Ubuntu's updates,
Explanation: and during those few hours packages can be overwritten with unpatched ones.
Package: *
Pin: release o=Zorin OS,l=Zorin OS Patches
Pin-Priority: 999
ZORINPRIORITY2
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://ppa.launchpadcontent.net/zorinos/stable/ubuntu/pool/main/z/zorin-os-keyring/\$(curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://ppa.launchpadcontent.net/zorinos/stable/ubuntu/pool/main/z/zorin-os-keyring/ | tr '>' '\n' | grep '<a href=' | grep 'zorin' | grep '\.tar\.gz' | cut -d'"' -f2 | tail -1) | tar -zx -C /tmp zorin-os-keyring/keyrings/zorin-os.gpg --strip-components 2
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y zorin-os-keyring
rm /tmp/zorin-os.gpg
sed -i 's@ \[signed-by=/tmp/zorin-os.gpg]@@g' /etc/apt/sources.list.d/zorin.list
apt clean
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y -o APT::Immediate-Configure=false --reinstall --allow-downgrades \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') zorin-os-overlay
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-generic linux-headers-generic initramfs-tools dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils pkexec xdg-user-dirs zstd fwupd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs cpio bubblewrap language-selector-common
if [ "${systemd_init}" == "Yes" ]; then systemctl start snapd; fi
CHROOT_INIT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/chroot_init

case "${environment}" in
	'Core')
	default_session="zorin"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y zorin-os-desktop zorin-connect
DEBIAN_FRONTEND=noninteractive apt purge -y ubuntu-session
"
	;;
	'Core/Windows_apps_support')
	default_session="zorin"
	install_desktop="
dpkg --add-architecture i386
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y zorin-os-desktop zorin-connect zorin-windows-app-support winbind
DEBIAN_FRONTEND=noninteractive apt purge -y ubuntu-session
"
	;;
	'Education')
	default_session="zorin"
	install_desktop="
DEBIAN_FRONTEND=noninteractive apt install --purge -y zorin-os-desktop zorin-os-education
DEBIAN_FRONTEND=noninteractive apt purge -y ubuntu-session
"
	;;
	'Education/Windows_apps_support')
	default_session="zorin"
	install_desktop="
dpkg --add-architecture i386
apt update
DEBIAN_FRONTEND=noninteractive apt install --purge -y zorin-os-desktop zorin-os-education zorin-windows-app-support winbind
DEBIAN_FRONTEND=noninteractive apt purge -y ubuntu-session
"
	;;
esac
cat >"${bootstrapdir}"/tmp/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_desktop

cat >"${bootstrapdir}"/tmp/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${useraccount_name}'
usermod -aG sudo '${useraccount_name}'
INSTALL_USER
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_user

cat >"${bootstrapdir}"/tmp/linuxloops/install_dmconfig <<INSTALL_DMCONFIG
#!/bin/bash
set -e
if [ "${environment}" == "None" ]; then exit 0; fi
if [ ! -f /usr/share/xsessions/${default_session}.desktop ] && [ ! -f /usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi
case "${environment}" in
	'Core'|'Core/Windows_apps_support')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			if [ -d /etc/gdm3 ]; then gdm_folder="gdm3"; else gdm_folder="gdm"; fi
			echo -e '[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=${useraccount_name}\nDefaultSession=${default_session}' >> /etc/\${gdm_folder}/custom.conf
		fi
	;;
	'Lite'|'Lite/Windows_apps_support')
		if [ "${useraccount_autologin}" == "Yes" ]; then
			groupadd -r autologin
			usermod -aG autologin '${useraccount_name}'
			mkdir -p /etc/lightdm/lightdm.conf.d
			echo -e '[Seat:*]\nautologin-user=${useraccount_name}\nautologin-session=${default_session}' >> /etc/lightdm/lightdm.conf.d/zz_linuxloops.conf
		fi
	;;
esac
INSTALL_DMCONFIG
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_dmconfig

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	if echo "${custom_packages}" | grep -wq 'i386\|steam\|wine'; then
		if echo "${custom_packages}" | grep -wq 'steam\|wine'; then
			if [ "${nvidia}" == "Yes" ]; then custom_packages="${custom_packages} \$(apt search nvidia | grep libnvidia-gl | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(libnvidia-gl-).*' | cut -d' ' -f1 | cut -d '/' -f1):i386"; fi
			echo "echo 'vm.max_map_count = 2147483642' > /etc/sysctl.d/80-gamecompatibility.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		fi
		echo "dpkg --add-architecture i386" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
		echo "apt update" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	fi
	echo -e "#!/bin/bash\nset -e\nDEBIAN_FRONTEND=noninteractive apt install --purge -y ${custom_packages}" >> "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${bootstrapdir}"/tmp/linuxloops/install_custom_script
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_custom_script
fi
}

generate_bootstrap_init()
{
cat >"${bootstrapdir}"/tmp/linuxloops/bootstrap_init <<INITCHROOT
#!/bin/bash
set -e
if [ ! -z "${nixos}" ]; then
	unset GDK_PIXBUF_MODULE_FILE PYTHONPATH TEMP TEMPDIR TMP TMPDIR
	export XDG_DATA_DIRS=${XDG_DATA_DIRS}:/usr/share
fi
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:/usr/lib64:/usr/lib/x86_64-linux-gnu:/usr/lib:/lib64:/lib/x86_64-linux-gnu:/lib
if [ -x /tmp/linuxloops/prepare_bootstrap ]; then /tmp/linuxloops/prepare_bootstrap; fi
if [ -x /tmp/linuxloops/partition_script ]; then /tmp/linuxloops/partition_script; fi
if [ -x /tmp/linuxloops/setup_and_mount_rootfs ]; then /tmp/linuxloops/setup_and_mount_rootfs; fi
rm -f /tmp/linuxloops/setup_and_mount_rootfs
if [ -x /tmp/linuxloops/mount_efi ]; then /tmp/linuxloops/mount_efi; fi
if [ -x /tmp/linuxloops/prepare_chroot ]; then /tmp/linuxloops/prepare_chroot; fi
if ([ ! -z "${github}" ] && [ "${distribution}" == "Bazzite" ]) || ([ ! -z "${github}" ] && [ "${distribution}" == "Fedora-Atomic" ]); then exit 0; fi
if [ -x /tmp/linuxloops/enter_chroot ]; then /tmp/linuxloops/enter_chroot; fi
if [ -x /tmp/linuxloops/efi_entry ]; then /tmp/linuxloops/efi_entry; fi
INITCHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/bootstrap_init
}

generate_partition_script()
{
if [ "${distribution}" == "Tails" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/partition_script <<PARTITIONDEVICE
#!/bin/bash
set -e
if [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ]; then
	(echo "g"; echo "n"; echo "2"; echo ""; echo "+64M"; echo "t"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "x"; echo "n"; echo "KERN-A"; echo "r"; echo "n"; echo "3"; echo ""; echo "+4G"; echo "t"; echo "3"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "x"; echo "n"; echo "3"; echo "ROOT-A"; echo "r"; echo "n"; echo "4"; echo ""; echo "+64M"; echo "t"; echo "4"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "x"; echo "n"; echo "4"; echo "KERN-B"; echo "r"; echo "n"; echo "5"; echo ""; echo "+4G"; echo "t"; echo "5"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "x"; echo "n"; echo "5"; echo "ROOT-B"; echo "r"; echo "n"; echo "6"; echo ""; echo "+1K"; echo "t"; echo "6"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "x"; echo "n"; echo "6"; echo "KERN-C"; echo "r"; echo "n"; echo "7"; echo ""; echo "+1G"; echo "t"; echo "7"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "x"; echo "n"; echo "7"; echo "ROOT-C"; echo "r"; echo "n"; echo "8"; echo ""; echo "+16M"; echo "t"; echo "8"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "x"; echo "n"; echo "8"; echo "OEM"; echo "r"; echo "n"; echo "9"; echo ""; echo "+1K"; echo "t"; echo "9"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "x"; echo "n"; echo "9"; echo "reserved"; echo "r"; echo "n"; echo "10"; echo ""; echo "+1K"; echo "t"; echo "10"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "x"; echo "n"; echo "10"; echo "reserved"; echo "r"; echo "n"; echo "11"; echo ""; echo "+8M"; echo "t"; echo "11"; echo "CAB6E88E-ABF3-4102-A07A-D4BB9BE3C1D3"; echo "x"; echo "n"; echo "11"; echo "RWFW"; echo "r"; echo "n"; echo "12"; echo ""; echo "+64M"; echo "t"; echo "12"; echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"; echo "x"; echo "n"; echo "12"; echo "EFI-SYSTEM"; echo "r"; echo "n"; echo "1"; echo ""; echo "+$(( ${install_sizeMB} - 9434 - 3 ))M"; echo "t"; echo "1"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "x"; echo "n"; echo "1"; echo "STATE"; echo "r"; sleep 5; echo "w") | fdisk -w always -W always "${destination_device}"
elif [ "${distribution}" == "BlissOS" ]; then
	(echo "g"; echo "n"; echo "1"; echo ""; echo "+512M"; echo "t"; echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"; echo "x"; echo "n"; echo "EFI"; echo "r"; echo "n"; echo "2"; echo ""; echo "+$(( ${install_sizeMB} - 512 - 3 ))M"; echo "t"; echo "2"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "x"; echo "n"; echo "2"; echo "ROOT"; echo "r"; sleep 5; echo "w") | fdisk -w always -W always "${destination_device}"
else
	(echo "g"; echo "n"; echo "1"; echo ""; echo "+128M"; echo "t"; echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"; echo "x"; echo "n"; echo "EFI"; echo "r"; echo "n"; echo "2"; echo ""; echo "+896M"; echo "t"; echo "2"; echo "BC13C2FF-59E6-4262-A352-B275FD6F7172"; echo "x"; echo "n"; echo "2"; echo "BOOT"; echo "r"; echo "n"; echo "3"; echo ""; echo "+$(( ${root_sizeMB} - 3 ))M"; echo "t"; echo "3"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "x"; echo "n"; echo "3"; echo "ROOT"; echo "r"$(if [ ${#extra_partitions[@]} -ne 0 ]; then for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do echo -n "; echo \"n\"; echo \"$(( ${i} + 4 ))\"; echo \"\"; echo \"+$(( $(get_extra_partitions_attribute size ${i}) * 1024 ))M\"; echo \"t\"; echo \"$(( ${i} + 4 ))\"; echo \"0FC63DAF-8483-4772-8E79-3D69D8477DE4\"; echo \"x\"; echo \"n\"; echo \"$(( ${i} + 4 ))\"; echo \"$(echo $(get_extra_partitions_attribute name ${i}) | tr a-z A-Z)\"; echo \"r\""; done; fi); sleep 5; echo "w") | fdisk -w always -W always "${destination_device}"
fi
PARTITIONDEVICE
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/partition_script
}

generate_setup_and_mount_rootfs()
{
if [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "Tails" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/setup_and_mount_rootfs <<SETUPFILESYSTEMS
#!/bin/bash
set -e
if [ "${root_encryption}" == "Yes" ]; then
	echo -n '${encryption_password}' | cryptsetup --type luks2 --cipher aes-xts-plain64 --hash sha256 --key-size 256 --pbkdf argon2id luksFormat "${root_partition}" -
	echo -n '${encryption_password}' | cryptsetup --type luks2 --cipher aes-xts-plain64 --hash sha256 --key-size 256 luksOpen "${root_partition}" luks-"\$(blkid -s UUID -o value "${root_partition}")" -
	if [ "${root_fstype}" == "btrfs" ]; then
		mkfs.btrfs -K -L "${root_name}" /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")"
		mount /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt
		btrfs subvolume create /mnt/@
		if [ -z "${separate_home}" ]; then btrfs subvolume create /mnt/@home; fi
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then btrfs subvolume create /mnt/@swap; fi
		umount /mnt
		mount -o "${final_root_mountoptions}" /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt
	else
		mkfs.ext4 -E nodiscard -F -L "${root_name}" /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")"
		mount -o "${final_root_mountoptions}" /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt
	fi
	if [ "$(get_extra_partitions_attribute isencryptionused)" == "Yes" ]; then
		mkdir -p /mnt/root
		chmod 0750 /mnt/root
		dd bs=512 count=4 if=/dev/random of=/mnt/root/encryption.key iflag=fullblock
		chmod 0400 /mnt/root/encryption.key
		echo -n '${encryption_password}' | cryptsetup luksAddKey "${root_partition}" /mnt/root/encryption.key -
	fi
else
	if [ "${root_fstype}" == "btrfs" ]; then
		mkfs.btrfs -K -L "${root_name}" "${root_partition}"
		mount "${root_partition}" /mnt
		btrfs subvolume create /mnt/@
		if [ -z "${separate_home}" ]; then btrfs subvolume create /mnt/@home; fi
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then btrfs subvolume create /mnt/@swap; fi
		umount /mnt
		mount -o "${final_root_mountoptions}" "${root_partition}" /mnt
	else
		mkfs.ext4 -E nodiscard -F -L "${root_name}" "${root_partition}"
		mount -o "${final_root_mountoptions}" "${root_partition}" /mnt
	fi
fi
if [ "${root_fstype}" == "btrfs" ]; then
	if [ "${root_encryption}" == "Yes" ]; then
		if [ -z "${separate_home}" ]; then
			mkdir /mnt/home
			mount -o "${final_home_subvol_mountoptions}" /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt/home
		fi
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
			mkdir -p /mnt/var/swap
			mount -o "${final_swap_subvol_mountoptions}" /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt/var/swap
		fi
	else
		if [ -z "${separate_home}" ]; then
			mkdir /mnt/home
			mount -o "${final_home_subvol_mountoptions}" "${root_partition}" /mnt/home
		fi
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
			mkdir -p /mnt/var/swap
			mount -o "${final_swap_subvol_mountoptions}" "${root_partition}" /mnt/var/swap
		fi
	fi
fi
$(if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		cat <<MOUNTPARTITION
	if [ "$(get_extra_partitions_attribute encryption ${i})" == "Yes" ]; then
		echo -n '${encryption_password}' | cryptsetup --type luks2 --cipher aes-xts-plain64 --hash sha256 --key-size 256 --pbkdf argon2id luksFormat "${partition_path}$(( ${i} + 4 ))" -
		echo -n '${encryption_password}' | cryptsetup --type luks2 --cipher aes-xts-plain64 --hash sha256 --key-size 256 luksOpen "${partition_path}$(( ${i} + 4 ))" luks-"\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")" -
		if [ "${root_encryption}" == "Yes" ]; then echo -n '${encryption_password}' | cryptsetup luksAddKey "${partition_path}$(( ${i} + 4 ))" /mnt/root/encryption.key -; fi
		if [ "$(get_extra_partitions_attribute fstype ${i})" == "btrfs" ]; then
			mkfs.btrfs -K -L "$(get_extra_partitions_attribute name ${i})" /dev/mapper/luks-"\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")"
			mkdir -p /mnt$(get_extra_partitions_attribute mountpoint ${i})
			mount /dev/mapper/luks-"\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")" /mnt$(get_extra_partitions_attribute mountpoint ${i})
			btrfs subvolume create /mnt$(get_extra_partitions_attribute mountpoint ${i})/@$(echo $(get_extra_partitions_attribute mountpoint ${i}) | sed 's@/@@g')
			umount /mnt$(get_extra_partitions_attribute mountpoint ${i})
			mount -o "$(get_extra_partitions_attribute mountoptions ${i})" /dev/mapper/luks-"\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")" /mnt$(get_extra_partitions_attribute mountpoint ${i})
		else
			mkfs.ext4 -E nodiscard -F -L "$(get_extra_partitions_attribute name ${i})" /dev/mapper/luks-"\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")"
			mkdir -p /mnt$(get_extra_partitions_attribute mountpoint ${i})
			mount -o "$(get_extra_partitions_attribute mountoptions ${i})" /dev/mapper/luks-"\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")" /mnt$(get_extra_partitions_attribute mountpoint ${i})
		fi
	else
		if [ "$(get_extra_partitions_attribute fstype ${i})" == "btrfs" ]; then
			mkfs.btrfs -K -L "$(get_extra_partitions_attribute name ${i})" "${partition_path}$(( ${i} + 4 ))"
			mkdir -p /mnt$(get_extra_partitions_attribute mountpoint ${i})
			mount "${partition_path}$(( ${i} + 4 ))" /mnt$(get_extra_partitions_attribute mountpoint ${i})
			btrfs subvolume create /mnt$(get_extra_partitions_attribute mountpoint ${i})/@$(echo $(get_extra_partitions_attribute mountpoint ${i}) | sed 's@/@@g')
			umount /mnt$(get_extra_partitions_attribute mountpoint ${i})
			mount -o "$(get_extra_partitions_attribute mountoptions ${i})" "${partition_path}$(( ${i} + 4 ))" /mnt$(get_extra_partitions_attribute mountpoint ${i})
		else
			mkfs.ext4 -E nodiscard -F -L "$(get_extra_partitions_attribute name ${i})" "${partition_path}$(( ${i} + 4 ))"
			mkdir -p /mnt$(get_extra_partitions_attribute mountpoint ${i})
			mount -o "$(get_extra_partitions_attribute mountoptions ${i})" "${partition_path}$(( ${i} + 4 ))" /mnt$(get_extra_partitions_attribute mountpoint ${i})
		fi
	fi
MOUNTPARTITION
	done
fi)
SETUPFILESYSTEMS
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/setup_and_mount_rootfs
}

generate_mount_efi()
{
if [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "Tails" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/mount_efi <<SETUPFILESYSTEMS
#!/bin/bash
set -e
if [ "${distribution}" == "BlissOS" ]; then
	mkfs.fat -F 32 -n "EFI" "${efi_partition}"
	mkdir -p /mnt/boot/efi
	mount "${efi_partition}" /mnt/boot/efi
else
	mkfs.fat -F 32 -n "${efi_name}" "${efi_partition}"
	mkdir /mnt/boot
	if [ "${root_fstype}" == "btrfs" ]; then
		mkfs.btrfs -K -L "${boot_name}" "${boot_partition}"
		mount "${boot_partition}" /mnt/boot
		btrfs subvolume create /mnt/boot/@boot
		umount /mnt/boot
	else
		mkfs.ext4 -E nodiscard -F -L "${boot_name}" "${boot_partition}"
		if tune2fs -l "${boot_partition}" | grep "Filesystem features" | grep -q -w large_dir; then tune2fs -O ^large_dir "${boot_partition}"; fi
		if tune2fs -l "${boot_partition}" | grep "Filesystem features" | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "${boot_partition}"; fi
		if tune2fs -l "${boot_partition}" | grep "Filesystem features" | grep -q -w orphan_file; then tune2fs -O ^orphan_file "${boot_partition}"; fi
	fi
	if ([ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ]) && [ "${install_type}" == "image" ]; then
		losetup --show -fP "${boot_partition}" > /tmp/linuxloops/boot_loop
		mount -o "${final_boot_mountoptions}" \$(cat /tmp/linuxloops/boot_loop) /mnt/boot
		mkdir /mnt/boot/efi
		losetup --show -fP "${efi_partition}" > /tmp/linuxloops/efi_loop
		mount -o "${final_efi_mountoptions}" \$(cat /tmp/linuxloops/efi_loop) /mnt/boot/efi
	else
		mount -o "${final_boot_mountoptions}" "${boot_partition}" /mnt/boot
		mkdir /mnt/boot/efi
		mount -o "${final_efi_mountoptions}" "${efi_partition}" /mnt/boot/efi

	fi
fi
SETUPFILESYSTEMS
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/mount_efi
}

generate_enter_chroot()
{
if [ "${distribution}" == "BlissOS" ] || [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ] || [ "${distribution}" == "Tails" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/enter_chroot <<ENTERCHROOT
#!/bin/bash
set -e
if [ -d /mnt/etc/tmpfiles.d ]; then
	ln -s /dev/null /mnt/etc/tmpfiles.d/static-nodes-permissions.conf
	ln -s /dev/null /mnt/etc/tmpfiles.d/tpm-udev.conf
fi
if [ -d /mnt/etc/udev/rules.d ]; then
	ln -s /dev/null /mnt/etc/udev/rules.d/50-udev-default.rules
fi
if [ -d /mnt/etc/systemd/system ]; then
	ln -s /dev/null /mnt/etc/systemd/system/systemd-binfmt.service
	ln -s /dev/null /mnt/etc/systemd/system/systemd-resolved.service
	ln -s /dev/null /mnt/etc/systemd/system/systemd-tmpfiles-setup-dev.service
	ln -s /dev/null /mnt/etc/systemd/system/systemd-tmpfiles-setup-dev-early.service
fi
mount -t proc none /mnt/proc
mount --bind -o ro /mnt/proc/sys /mnt/proc/sys
mount --make-slave /mnt/proc/sys
mount --bind -o ro /sys /mnt/sys
mount --make-slave /mnt/sys
mount --bind /dev /mnt/dev
mount --make-slave /mnt/dev
mount --bind /dev/pts /mnt/dev/pts
mount --make-slave /mnt/dev/pts
mount -t tmpfs -o mode=1777 none /mnt/dev/shm
mount -t tmpfs none /mnt/run
mount -t tmpfs -o mode=1777 none /mnt/tmp
mkdir -p /mnt/tmp/linuxloops
mount --bind /tmp/linuxloops /mnt/tmp/linuxloops
mount --make-slave /mnt/tmp/linuxloops
if [ "${systemd_init}" == "Yes" ]; then
	if [ -d /mnt/sys/module/apparmor ]; then mkdir /tmp/apparmor; mount --bind /tmp/apparmor /mnt/sys/module/apparmor; fi
	mount --bind \$(tty) /mnt/dev/console
	mount --make-slave /mnt/dev/console
	touch /tmp/pid_ns
	sudo -b container=chroot unshare --pid=/tmp/pid_ns --fork --mount-proc --kill-child --root=/mnt /lib/systemd/systemd --unit=basic.target
	sleep 30
	nsenter --pid=/tmp/pid_ns unshare --mount-proc --root=/mnt bash -c "/lib/systemd/systemd-udevd --daemon"
	if [ "${distribution}" == "Ubuntu" ] || [ "${distribution}" == "Zorin" ]; then
		nsenter --pid=/tmp/pid_ns unshare --mount-proc --root=/mnt bash -c "echo exit 101 > /usr/sbin/policy-rc.d"
		nsenter --pid=/tmp/pid_ns unshare --mount-proc --root=/mnt bash -c "chmod +x /usr/sbin/policy-rc.d"
		nsenter --pid=/tmp/pid_ns unshare --mount-proc --root=/mnt bash -c "mkdir -p ${bootstrapdir}"
		nsenter --pid=/tmp/pid_ns unshare --mount-proc --root=/mnt bash -c "ln -s / ${bootstrapdir}/mnt"
	fi
	chroot_cmd="nsenter --pid=/tmp/pid_ns unshare --mount-proc --root=/mnt bash"
else
	chroot_cmd="chroot /mnt"
fi
if [ "${environment}" == "Enlightenment" ]; then
	dns_manager="connman/resolv.conf"
elif [ "${distribution}" == "Bazzite" ] || [ "${distribution}" == "Elementary" ] || [ "${distribution}" == "Fedora" ] || [ "${distribution}" == "Fedora-Atomic" ] || [ "${distribution}" == "Linuxmint" ] || [ "${distribution}" == "Neon" ] || [ "${distribution}" == "Nobara" ] || [ "${distribution}" == "Pop" ] || [ "${distribution}" == "Qubes" ] || [ "${distribution}" == "Ubuntu" ] || [ "${distribution}" == "Zorin" ]; then
	dns_manager="systemd/resolve/stub-resolv.conf"
else
	dns_manager="NetworkManager/resolv.conf"
fi
rm -f /mnt/etc/resolv.conf
ln -s /run/"\${dns_manager}" /mnt/etc/resolv.conf
mkdir -p \$(dirname /mnt/run/"\${dns_manager}")
cp /etc/resolv.conf /mnt/run/"\${dns_manager}"
\${chroot_cmd} /tmp/linuxloops/chroot_init
if [ -f /tmp/linuxloops/install_desktop ]; then \${chroot_cmd} /tmp/linuxloops/install_desktop; fi
if [ -f /tmp/linuxloops/install_secureboot ]; then \${chroot_cmd} /tmp/linuxloops/install_secureboot; fi
if [ -f /tmp/linuxloops/install_custom_packages ]; then \${chroot_cmd} /tmp/linuxloops/install_custom_packages; fi
if [ -f /tmp/linuxloops/install_settings ]; then \${chroot_cmd} /tmp/linuxloops/install_settings; fi
if [ -f /tmp/linuxloops/install_user ]; then \${chroot_cmd} /tmp/linuxloops/install_user; fi
if [ -f /tmp/linuxloops/install_dmconfig ]; then \${chroot_cmd} /tmp/linuxloops/install_dmconfig; fi
if [ -f /tmp/linuxloops/install_live ]; then \${chroot_cmd} /tmp/linuxloops/install_live; fi
if [ -f /tmp/linuxloops/install_surface ]; then \${chroot_cmd} /tmp/linuxloops/install_surface; fi
if [ -f /tmp/linuxloops/install_nvidia ]; then \${chroot_cmd} /tmp/linuxloops/install_nvidia; fi
if [ -f /tmp/linuxloops/install_fstab ]; then \${chroot_cmd} /tmp/linuxloops/install_fstab; fi
if [ -f /tmp/linuxloops/install_swap ] && [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then /tmp/linuxloops/install_swap; fi
if [ -f /tmp/linuxloops/install_initramfs ]; then \${chroot_cmd} /tmp/linuxloops/install_initramfs; fi
if [ -f /tmp/linuxloops/install_bootloader ]; then \${chroot_cmd} /tmp/linuxloops/install_bootloader; fi
if [ -f /tmp/linuxloops/install_custom_script ]; then \${chroot_cmd} /tmp/linuxloops/install_custom_script; fi
if [ -f /tmp/linuxloops/cleanup ]; then \${chroot_cmd} /tmp/linuxloops/cleanup; fi
if [ -f /mnt/usr/sbin/policy-rc.d ]; then rm /mnt/usr/sbin/policy-rc.d; fi
if [ -L /mnt/etc/systemd/system/systemd-tmpfiles-setup-dev-early.service ]; then rm /mnt/etc/systemd/system/systemd-tmpfiles-setup-dev-early.service; fi
if [ -L /mnt/etc/systemd/system/systemd-tmpfiles-setup-dev.service ]; then rm /mnt/etc/systemd/system/systemd-tmpfiles-setup-dev.service; fi
if [ -L /mnt/etc/systemd/system/systemd-resolved.service ]; then rm /mnt/etc/systemd/system/systemd-resolved.service; fi
if [ -L /mnt/etc/systemd/system/systemd-binfmt.service ]; then rm /mnt/etc/systemd/system/systemd-binfmt.service; fi
if [ -L /mnt/etc/udev/rules.d/50-udev-default.rules ]; then rm /mnt/etc/udev/rules.d/50-udev-default.rules; fi
if [ -L /mnt/etc/tmpfiles.d/tpm-udev.conf ]; then rm /mnt/etc/tmpfiles.d/tpm-udev.conf; fi
if [ -L /mnt/etc/tmpfiles.d/static-nodes-permissions.conf ]; then rm /mnt/etc/tmpfiles.d/static-nodes-permissions.conf; fi
ENTERCHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/enter_chroot
}

generate_install_settings()
{
if [ "${distribution}" == "BlissOS" ] || [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ] || [ "${distribution}" == "Tails" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/install_settings <<APPLYSETTINGS
#!/bin/bash
set -e
if [ ! -f /etc/locale.gen ]; then echo "${locale}.UTF-8 UTF-8" > /etc/locale.gen; else sed -i 's@#${locale}.UTF-8 UTF-8\|# ${locale}.UTF-8 UTF-8@${locale}.UTF-8 UTF-8@g' /etc/locale.gen; fi
if [ ! "${distribution}" == "Bazzite" ] && [ ! "${distribution}" == "Fedora-Atomic" ]; then
	localedef -i ${locale} -f UTF-8 ${locale}.UTF-8
fi
echo "LANG=${locale}.UTF-8" > /etc/locale.conf
echo "LANG=${locale}.UTF-8" > /etc/default/locale
if [ -f /etc/default/console-setup ]; then sed -i 's@CHARMAP=.*@CHARMAP="UTF-8"@g' /etc/default/console-setup; fi
echo -e "KEYMAP=${keymap}" > /etc/vconsole.conf
cat >/etc/default/keyboard <<'DEBIANKEYBOARD'
XKBMODEL="pc105"
XKBLAYOUT="${keymap}"
XKBVARIANT=""
XKBOPTIONS=""
BACKSPACE="guess"
DEBIANKEYBOARD
mkdir -p /etc/X11/xorg.conf.d
cat >/etc/X11/xorg.conf.d/00-keyboard.conf <<'XKEYBOARD'
Section "InputClass"
        Identifier "system-keyboard"
        MatchIsKeyboard "on"
        Option "XkbLayout" "${keymap}"
EndSection
XKEYBOARD
ln -sf /usr/share/zoneinfo/"${timezone}" /etc/localtime
if [ "${distribution}" == "Gentoo" ] && [ "$(echo ${version} | cut -d '/' -f2)" == "Openrc" ]; then
	eselect locale set ${locale}.UTF-8
	echo -e 'keymap="${keymap}"\nextended_keymaps=""' > /etc/conf.d/keymaps
	echo -e '${timezone}' > /etc/timezone
elif [ "$(echo ${version} | cut -d '/' -f2)" == "Openrc" ]; then
	echo -e 'keymap="${keymap}"\nextended_keymaps=""' > /etc/conf.d/keymaps
	echo -e '${timezone}' > /etc/timezone
fi
if [ ! -f /etc/machine-id ] && [ ! -z "\$(command -v dbus-uuidgen)" ]; then dbus-uuidgen > /etc/machine-id; fi
mkdir -p /etc/network
echo -e "auto lo\niface lo inet loopback" > /etc/network/interfaces
echo "${hostname}" > /etc/hostname
if [ "${distribution}" == "Proxmox" ]; then
	echo -e "127.0.0.1 localhost localhost.localdomain\n\n::1 ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nff02::3 ip6-allhosts" > /etc/hosts
elif [ "${distribution}" == "Qubes" ]; then
	echo -e "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6" > /etc/hosts
else
	echo -e "127.0.0.1 localhost localhost.localdomain\n127.0.1.1 ${hostname}\n\n::1 ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nff02::3 ip6-allhosts" > /etc/hosts
fi
if [ -d /etc/netplan ]; then echo -e 'network:\n    version: 2\n    renderer: NetworkManager\n    ethernets:\n        zz-all-en:\n            match:\n                name: "en*"\n            dhcp4: true\n        zz-all-eth:\n            match:\n                name: "eth*"\n            dhcp4: true' > /etc/netplan/01-netcfg.yaml; chmod 0600 /etc/netplan/01-netcfg.yaml; fi
if [ -d /etc/NetworkManager/conf.d ]; then echo -e '[connection]\nwifi.powersave = 2' > /etc/NetworkManager/conf.d/zz-wifi-powersave-disable.conf; fi
mkdir -p /etc/modprobe.d
echo 'blacklist pcspkr' > /etc/modprobe.d/pcspkr.conf
# Disable desktop icons for CLI programs
mkdir -p /etc/skel/.local/share/applications
for i in assistant assistant6-qttools-6 avahi-discover bssh bvnc cups designer gcr-prompter gcr-viewer linguist linguist6-qttools-6 mpv nm-connection-editor qdbusviewer qdbusviewer6-qttools-6 qv4l2 qvidcap; do echo -e '[Desktop Entry]\nType=Application\nVersion=1.0\nName=HideFromAppMenu\nNoDisplay=true' > /etc/skel/.local/share/applications/\$i.desktop; done
APPLYSETTINGS
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_settings
}

generate_install_secureboot()
{
if [ "${distribution}" == "Bazzite" ] || [ "${distribution}" == "BlissOS" ] || [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "Fedora-Atomic" ] || [ "${distribution}" == "Qubes" ] || [ "${distribution}" == "Tails" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/install_secureboot <<SECUREBOOT
#!/bin/bash
set -e
mkdir -p \${1}/etc/secureboot_key
if [ "${distribution}" == "AlmaLinux" ] || [ "${distribution}" == "RockyLinux" ]; then
	cp /usr/share/pki/sb-certs/secureboot-kernel-x86_64.cer \${1}/etc/secureboot_key/MOK.der
elif [ "${distribution}" == "OpenSUSE" ]; then
	cp /usr/share/efi/x86_64/grub.der \${1}/etc/secureboot_key/MOK.der
else
	openssl req -newkey rsa:4096 -nodes -keyout \${1}/etc/secureboot_key/MOK.key -new -x509 -sha256 -days 36500 -subj "/CN=Linuxloops Machine Owner Key/" -out \${1}/etc/secureboot_key/MOK.crt
	openssl x509 -outform DER -in \${1}/etc/secureboot_key/MOK.crt -out \${1}/etc/secureboot_key/MOK.der
	chmod 0640 \${1}/etc/secureboot_key/*
	cp \${1}/etc/secureboot_key/MOK.der \${1}/boot/efi/${distribution}.der
	if [ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ]; then
		exit 0
	elif [ "${distribution}" == "Fedora" ] || [ "${distribution}" == "Nobara" ]; then
		chown root:akmods /etc/secureboot_key/*
		mkdir -p /etc/pki/akmods/certs /etc/pki/akmods/private
		rm -rf /etc/pki/akmods/certs/public_key.der /etc/pki/akmods/private/private_key.priv
		ln -s /etc/secureboot_key/MOK.der /etc/pki/akmods/certs/public_key.der
		ln -s /etc/secureboot_key/MOK.key /etc/pki/akmods/private/private_key.priv
	elif [ "${distribution}" == "Debian" ] || [ "${distribution}" == "Devuan" ] || [ "${distribution}" == "Elementary" ] || [ "${distribution}" == "Kali" ] || [ "${distribution}" == "LMDE" ] || [ "${distribution}" == "Linuxmint" ] || [ "${distribution}" == "MX" ] || [ "${distribution}" == "Neon" ] || [ "${distribution}" == "Parrot" ] || [ "${distribution}" == "PikaOS" ] || [ "${distribution}" == "Pop" ] || [ "${distribution}" == "Ubuntu" ] || [ "${distribution}" == "Zorin" ]; then
		mkdir -p /var/lib/shim-signed/mok
		rm -rf /var/lib/shim-signed/mok/MOK.der /var/lib/shim-signed/mok/MOK.priv
		ln -s /etc/secureboot_key/MOK.der /var/lib/shim-signed/mok/MOK.der
		ln -s /etc/secureboot_key/MOK.key /var/lib/shim-signed/mok/MOK.priv
	fi
	mkdir -p /var/lib/dkms
	rm -rf /var/lib/dkms/mok.pub /var/lib/dkms/mok.key
	ln -s /etc/secureboot_key/MOK.der /var/lib/dkms/mok.pub
	ln -s /etc/secureboot_key/MOK.key /var/lib/dkms/mok.key
fi
SECUREBOOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_secureboot
}

generate_install_surface()
{
if [ ! "${surface}" == "Yes" ]; then return; fi
if [ "${distribution}" == "Debian" ] || [ "${distribution}" == "Elementary" ] || [ "${distribution}" == "Kali" ] || [ "${distribution}" == "Linuxmint" ] || [ "${distribution}" == "LMDE" ] || [ "${distribution}" == "MX" ] || [ "${distribution}" == "Neon" ] || [ "${distribution}" == "Proxmox" ] || [ "${distribution}" == "Ubuntu" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_surface <<SURFACEAPT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/linux-surface/linux-surface/raw/refs/heads/master/pkg/keys/surface.asc | gpg --dearmor | dd of=/etc/apt/trusted.gpg.d/linux-surface.gpg
echo "deb [arch=amd64] https://pkg.surfacelinux.com/debian release main" > /etc/apt/sources.list.d/linux-surface.list
apt update
if [ ! -z "${surface_remove}" ]; then DEBIAN_FRONTEND=noninteractive apt purge -y ${surface_remove}; fi
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-surface linux-headers-surface iptsd libcamera-ipa libcamera-tools gstreamer1.0-libcamera pipewire-libcamera build-essential
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/umlaeute/v4l2loopback/archive/v0.15.0.tar.gz | tar xz -C /usr/src
dkms add -m v4l2loopback -v 0.15.0
dkms install -m v4l2loopback -v 0.15.0 -k \$(ls /usr/lib/modules/*/modules.builtin | sed 's@/usr/lib/modules/@@g' | sed 's@/modules.builtin@@g')
usermod -aG video '${useraccount_name}'
SURFACEAPT
elif [ "${distribution}" == "Pop" ] || [ "${distribution}" == "Zorin" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_surface <<SURFACEAPT
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/linux-surface/linux-surface/raw/refs/heads/master/pkg/keys/surface.asc | gpg --dearmor | dd of=/etc/apt/trusted.gpg.d/linux-surface.gpg
echo "deb [arch=amd64] https://pkg.surfacelinux.com/debian release main" > /etc/apt/sources.list.d/linux-surface.list
apt update
DEBIAN_FRONTEND=noninteractive apt purge -y ${surface_remove}
DEBIAN_FRONTEND=noninteractive apt install --purge -y linux-image-surface linux-headers-surface iptsd
usermod -aG video '${useraccount_name}'
SURFACEAPT
elif [ "${distribution}" == "Arch" ] || [ "${distribution}" == "CachyOS" ] || [ "${distribution}" == "KDE" ] || [ "${distribution}" == "Manjaro" ] || [ "${distribution}" == "SteamOS" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_surface <<SURFACEPACMAN
#!/bin/bash
set -e
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/linux-surface/linux-surface/raw/refs/heads/master/pkg/keys/surface.asc | pacman-key --add -
pacman-key --finger 56C464BAAC421453
pacman-key --lsign-key 56C464BAAC421453
echo -e '[linux-surface]\nServer = https://pkg.surfacelinux.com/arch/' >> /etc/pacman.conf
pacman -Syu
if [ ! -z "${surface_remove}" ]; then pacman -Rsc --noconfirm ${surface_remove}; fi
pacman -S --noconfirm --needed linux-surface linux-surface-headers iptsd v4l2loopback-dkms libcamera-ipa libcamera-tools gst-plugin-libcamera pipewire-libcamera
usermod -aG video '${useraccount_name}'
SURFACEPACMAN
elif [ "${distribution}" == "Fedora" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_surface <<SURFACEDNF
#!/bin/bash
set -e
dnf install -y 'dnf-command(versionlock)'
dnf versionlock add kernel\*
rm -rf /boot/.vmlinuz-* /boot/vmlinuz-* /boot/initramfs-* /boot/symvers-* /boot/System.map-* /usr/lib/modules/* /usr/src/kernels/*
dnf config-manager addrepo --from-repofile=https://pkg.surfacelinux.com/fedora/linux-surface.repo
dnf update -y
dnf install -y --allowerasing kernel-surface kernel-surface-devel iptsd akmod-v4l2loopback libcamera-ipa libcamera-tools libcamera-qcam libcamera-gstreamer pipewire-plugin-libcamera
usermod -aG video '${useraccount_name}'
SURFACEDNF
fi
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_surface
if [ ! -z "${kernel_parameters}" ]; then
	kernel_parameters="acpi_enforce_resources=lax ${kernel_parameters}"
else
	kernel_parameters="acpi_enforce_resources=lax"
fi
}

generate_install_nvidia()
{
if [ ! "${nvidia}" == "Yes" ] || [ "${distribution}" == "Bazzite" ]; then return; fi
if [ "${distribution}" == "Arch" ] || [ "${distribution}" == "Artix" ] || [ "${distribution}" == "CachyOS" ] || [ "${distribution}" == "KDE" ] || [ "${distribution}" == "Manjaro" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
pacman -S --noconfirm --needed nvidia-dkms libva-nvidia-driver
INSTALLNVIDIA
elif [ "${distribution}" == "Debian" ] || [ "${distribution}" == "Devuan" ] || [ "${distribution}" == "Kali" ] || [ "${distribution}" == "LMDE" ] || [ "${distribution}" == "MX" ] ||  [ "${distribution}" == "Proxmox" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y nvidia-driver nvidia-vaapi-driver
INSTALLNVIDIA
elif [ "${distribution}" == "Elementary" ] || [ "${distribution}" == "Linuxmint" ] || [ "${distribution}" == "Neon" ] || [ "${distribution}" == "Ubuntu" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y \$(apt search nvidia | grep nvidia-driver | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(nvidia-driver-).*' | cut -d' ' -f1 | cut -d '/' -f1) nvidia-vaapi-driver
INSTALLNVIDIA
elif [ "${distribution}" == "Fedora" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
dnf install -y akmod-nvidia xorg-x11-drv-nvidia libva-nvidia-driver
INSTALLNVIDIA
elif [ "${distribution}" == "Fedora-Atomic" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
rpm-ostree -y install akmod-nvidia xorg-x11-drv-nvidia libva-nvidia-driver
INSTALLNVIDIA
elif [ "${distribution}" == "FoxFlake" ]; then
	foxflake_nvidia="
  # Nvidia open source driver support
  foxflake.nvidia.enable = true;

"
elif [ "${distribution}" == "GLF-OS" ]; then
	nixos_nvidia="
  services.xserver.videoDrivers = [ \"nvidia\" ];
  hardware.nvidia.open = true;
  hardware.nvidia.powerManagement.enable = true;
  hardware.nvidia.nvidiaSettings = true;
"
elif [ "${distribution}" == "Gentoo" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
echo -e 'media-libs/nvidia-vaapi-driver ~amd64' > /etc/portage/package.accept_keywords/linuxloops
emerge -uN x11-drivers/nvidia-drivers media-libs/nvidia-vaapi-driver
INSTALLNVIDIA
elif [ "${distribution}" == "NixOS" ]; then
	nixos_nvidia="
services.xserver.videoDrivers = [ \"nvidia\" ];
hardware.nvidia.open = true;
hardware.nvidia.powerManagement.enable = true;
hardware.nvidia.nvidiaSettings = true;
"
elif [ "${distribution}" == "Nobara" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
dnf install -y nvidia-driver libva-nvidia-driver
INSTALLNVIDIA
elif [ "${distribution}" == "OpenSUSE" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
cat >/usr/lib/rpm/gnupg/keys/gpg-pubkey-db27fd5a-62589a51.asc <<NVIDIAREPOKEY
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v2.0.22 (GNU/Linux)

mQINBGJYmlEBEACKX1pzfrPA9WKY1gmoIGNGNOsUKETZQ4iWGCZ/jVuxXZzvXg1c
0xC/44ETenvxOor8kMpy8jJwy6IzIyNZniWWCOeNnITCark0eMY6w18eGqpgvGhL
iFo9y6ZdGOQoVqbyNritM1fQZnlCbPK11SBxkMmQ1eC+rLmD8xMslx/AS3/5Lu+2
GdA5H79p9CJoH/MpfsUH6NeojQkN/jqxG4VgHL488eMO120QSlDY53PuGqB5c/FN
yMQry8Hq+uapKLC1irZun/wfKSP2gIrIcXuS0TLjQeWKn+aX9xdZWZyVNsGUQ3aN
GnfHly14n+K9A+QjINtIt6PON7hHAd/aYNA/weR4IvDEwkU95JtNo37NpKHa0CHO
M+B31phcl9dLPfgDfLpCE04c87mpuSMTfCd8zneGWpHMFGIlW4o6dOsmoc/WwuJz
+U5BVdR483yQd4RMoq9AePtrRPPZCIG48i8oxltQgZqHL02+818hnOFyTml+ZSOr
swREOFa4OC8jYevZ+uu30xkf6/Jjt4cW/Woho62VOz1hQXGaoz8VXsWWnykb/cVr
aBhGLLIhV0WdRmhdh8R0bNC1FuyPtcvvFNA30hBc4OWVEMzJk1aPrbvmFIO6mw7m
93X1pUKYBE7ozEDQvbhItCO1+yDAdzNnrwGSvbuNTzs4Pn+qbldq1QngMQARAQAB
tDBOVklESUEgTGludXggRHJpdmVyIFRlYW0gPGxpbnV4LWJ1Z3NAbnZpZGlhLmNv
bT6JAjkEEwECACMFAmJYmlECGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAK
CRCx0NeI2yf9Wsn9D/9rbEFdcH5RfzhWx1DwaKAcmVSvRZf34w7R2DmES+y6I3lh
JIhc9A2eX+xMaZ1Zm3SQKt+RzyEwwReRYQ0FsEkfpr6tLHY7xt97e69NWH7/4yFN
aPIker/NSdyhOX/9ALmrMs82+I+t37KTCy9pHt31kIK0zCFmHT8g3Dl1gsSXhaWd
cUgpOuiMtcuUEhi6wkYHHIT7RSfHwq2apHVJKOvFI//fVVe01KOAVkdJW0kJFiNr
IBgrLHa3Y42dR9g5XnUINX4V/LUJnf66RLzC+OA/ps4gIl3UJ06dj9h8Dxgo9Md6
57+irheoIbcP+zSN6CaIGFHmmr+2I6ofP9Q9BtKZqNklfcISioWBamInYyyjyVuW
n47COZq8kgKLOS7yCmU8M+Y17W37pvjS9Q07lLxPBkbw6IlPc6MFZAynM13XCE9u
xzKrdFoT75wadAaY4Ox741u12jNYsdNbODrWmc8J4tw3z8whrWf4vSZveidboEav
OfFXxORrPHALB9Wegq9kJSYo68NYr/Dy0bvPeUKUpvJUX93YRVabQfmiTYAuSZIl
PMeQIHPQPh9QvNsZmOHSlOC9Tmncd4O1gqk4WDc2D95kIhzA8HQSSZTThM4Xe1Eh
Xks0dFlInjDFyMgAwsOaVDTWwjBfAaklUysV+CxhhEvSnuGx9h8Mi88K6g8heA==
=g062
-----END PGP PUBLIC KEY BLOCK-----
NVIDIAREPOKEY
rpm --import /usr/lib/rpm/gnupg/keys/gpg-pubkey-db27fd5a-62589a51.asc
zypper --non-interactive install openSUSE-repos-$(echo ${opensuse_version} | cut -d '/' -f1)-NVIDIA
zypper --non-interactive install --auto-agree-with-licenses --force-resolution nvidia-gl-G06 nvidia-video-G06
INSTALLNVIDIA
elif [ "${distribution}" == "Parrot" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y -t $(echo ${parrot_version} | tr A-Z a-z)-backports nvidia-driver nvidia-vaapi-driver
INSTALLNVIDIA
elif [ "${distribution}" == "PikaOS" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y pika-nvidia-driver nvidia-vaapi-driver
INSTALLNVIDIA
elif [ "${distribution}" == "Pop" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y system76-driver-nvidia
INSTALLNVIDIA
elif [ "${distribution}" == "SteamOS" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
pacman -S --noconfirm --needed nvidia-dkms lib32-nvidia-utils libva-nvidia-driver
INSTALLNVIDIA
elif [ "${distribution}" == "Void" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
xbps-install -y nvidia nvidia-vaapi-driver
INSTALLNVIDIA
elif [ "${distribution}" == "Zorin" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
DEBIAN_FRONTEND=noninteractive apt install --purge -y \$(apt search nvidia | grep nvidia-driver | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(nvidia-driver-).*' | cut -d' ' -f1 | cut -d '/' -f1)
INSTALLNVIDIA
fi
if [ -f "${bootstrapdir}"/tmp/linuxloops/install_nvidia ]; then
	cat >>"${bootstrapdir}"/tmp/linuxloops/install_nvidia <<INSTALLNVIDIA
if [ -x /usr/lib/systemd/systemd ]; then
	if [ -f /usr/lib/systemd/system/nvidia-suspend.service ]; then systemctl enable nvidia-suspend.service; fi
	if [ -f /usr/lib/systemd/system/nvidia-resume.service ]; then systemctl enable nvidia-resume.service; fi
	if [ -f /usr/lib/systemd/system/nvidia-hibernate.service ]; then systemctl enable nvidia-hibernate.service; fi
	mkdir -p /etc/systemd/system-shutdown
	cat >/etc/systemd/system-shutdown/nvidia.shutdown <<'SHUTDOWNFIX'
#!/bin/sh
for MODULE in nvidia_drm nvidia_modeset nvidia_uvm nvidia; do
	if lsmod | grep "\$MODULE" &> /dev/null; then rmmod \$MODULE; fi
done
SHUTDOWNFIX
	chmod 0755 /etc/systemd/system-shutdown/nvidia.shutdown
fi
INSTALLNVIDIA
	chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_nvidia
fi
if [ ! -z "${kernel_parameters}" ]; then
	kernel_parameters="module_blacklist=nouveau,nova_core nvidia-drm.modeset=1 ${kernel_parameters}"
else
	kernel_parameters="module_blacklist=nouveau,nova_core nvidia-drm.modeset=1"
fi
}

generate_install_fstab()
{
if [ "${distribution}" == "BlissOS" ] || [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "Tails" ]; then return; fi
if [ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ]; then
	cat >"${bootstrapdir}"/tmp/linuxloops/install_fstab <<GENERATEFSTAB
#!/bin/bash
set -e
if [ "${root_encryption}" == "Yes" ]; then
	if [ "${root_fstype}" == "btrfs" ]; then
		fstab="
boot.initrd.luks.devices = {
	luks-\$(blkid -s UUID -o value "${root_partition}") = {
		device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	};
};

fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}"))\";
	fsType = \"btrfs\";
	options = [ $(for i in $(echo ${final_root_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
		if [ -z "${separate_home}" ]; then
			fstab="\${fstab}

fileSystems.\"/home\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}"))\";
	fsType = \"btrfs\";
	options = [ $(for i in $(echo ${final_home_subvol_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
		fi
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
			fstab="\${fstab}

fileSystems.\"/var/swap\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}"))\";
	fsType = \"btrfs\";
	options = [ $(for i in $(echo ${final_swap_subvol_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
		fi
	else
		fstab="
boot.initrd.luks.devices = {
	luks-\$(blkid -s UUID -o value "${root_partition}") = {
		device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	};
};

fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}"))\";
	fsType = \"ext4\";
	options = [ $(for i in $(echo ${final_root_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
	fi
else
	if [ "${root_fstype}" == "btrfs" ]; then
		fstab="
fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	fsType = \"btrfs\";
	options = [ $(for i in $(echo ${final_root_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
		if [ -z "${separate_home}" ]; then
			fstab="\${fstab}

fileSystems.\"/home\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	fsType = \"btrfs\";
	options = [ $(for i in $(echo ${final_home_subvol_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
		fi
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
			fstab="\${fstab}

fileSystems.\"/var/swap\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	fsType = \"btrfs\";
	options = [ $(for i in $(echo ${final_swap_subvol_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
		fi
	else
		fstab="
fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	fsType = \"ext4\";
	options = [ $(for i in $(echo ${final_root_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
	fi
fi
if [ "${root_fstype}" == "btrfs" ]; then
	fstab="\${fstab}

fileSystems.\"/boot\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${boot_partition}")\";
	fsType = \"btrfs\";
	options = [ $(for i in $(echo ${final_boot_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
else
	fstab="\${fstab}

fileSystems.\"/boot\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${boot_partition}")\";
	fsType = \"ext4\";
	options = [ $(for i in $(echo ${final_boot_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
fi
fstab="\${fstab}

fileSystems.\"/boot/efi\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${efi_partition}")\";
	fsType = \"vfat\";
	options = [ $(for i in $(echo ${final_efi_mountoptions} | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
fstab="\${fstab}

swapDevices =
[
  {
	device = \"/var/swap/swapfile\";
  }
];
"
fi
$(if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		if [ "$(get_extra_partitions_attribute encryption ${i})" == "Yes" ]; then
			cat <<FSTAB
			fstab="\${fstab}

fileSystems.\"$(get_extra_partitions_attribute mountpoint ${i})\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))"))\";
	fsType = \"$(get_extra_partitions_attribute fstype ${i})\";
	options = [ $(for i in $(echo $(get_extra_partitions_attribute mountoptions ${i}) | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
FSTAB
		else
			cat <<FSTAB
			fstab="\${fstab}

fileSystems.\"$(get_extra_partitions_attribute mountpoint ${i})\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")\";
	fsType = \"$(get_extra_partitions_attribute fstype ${i})\";
	options = [ $(for i in $(echo $(get_extra_partitions_attribute mountoptions ${i}) | sed 's@,@ @g'); do echo -n "\\\"${i}\\\" "; done)];
};
"
FSTAB
		fi
	done
fi)
$(if [ ${#extra_partitions[@]} -ne 0 ]; then
			cat <<CRYPTTAB
			fstab="\${fstab}

environment.etc.crypttab.text = ''
CRYPTTAB
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		if [ "$(get_extra_partitions_attribute encryption ${i})" == "Yes" ]; then
			if [ "${root_encryption}" == "Yes" ]; then
				cat <<CRYPTTAB
luks-\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") UUID=\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") /root/encryption.key luks
CRYPTTAB
			else
				cat <<CRYPTTAB
luks-\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") UUID=\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") none luks
CRYPTTAB
			fi
		fi
	done
	cat <<CRYPTTAB
'';
"
CRYPTTAB
fi)
echo "\${fstab}" > /tmp/linuxloops/fstab
GENERATEFSTAB
else
	cat >"${bootstrapdir}"/tmp/linuxloops/install_fstab <<GENERATEFSTAB
#!/bin/bash
set -e
if [ "${live}" == "Yes" ]; then systemd_growfs_option=",x-systemd.growfs"; fi
rm -f /etc/fstab
touch /etc/fstab
chmod 0644 /etc/fstab
if [ "${root_encryption}" == "Yes" ]; then
	if [ "${root_fstype}" == "btrfs" ]; then
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}")) / btrfs ${final_root_mountoptions}\${systemd_growfs_option} 0 0" >> /etc/fstab
		if [ -z "${separate_home}" ]; then echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}")) /home btrfs ${final_home_subvol_mountoptions} 0 0" >> /etc/fstab; fi
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}")) /var/swap btrfs ${final_swap_subvol_mountoptions} 0 0" >> /etc/fstab; fi
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${boot_partition}") /boot btrfs ${final_boot_mountoptions} 0 0" >> /etc/fstab
	else
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}")) / ext4 ${final_root_mountoptions}\${systemd_growfs_option} 0 1" >> /etc/fstab
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${boot_partition}") /boot ext4 ${final_boot_mountoptions} 0 2" >> /etc/fstab
	fi
else
	if [ "${root_fstype}" == "btrfs" ]; then
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}") / btrfs ${final_root_mountoptions}\${systemd_growfs_option} 0 0" >> /etc/fstab
		if [ -z "${separate_home}" ]; then echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}") /home btrfs ${final_home_subvol_mountoptions} 0 0" >> /etc/fstab; fi
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}") /var/swap btrfs ${final_swap_subvol_mountoptions} 0 0" >> /etc/fstab; fi
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${boot_partition}") /boot btrfs ${final_boot_mountoptions} 0 0" >> /etc/fstab
	else
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}") / ext4 ${final_root_mountoptions}\${systemd_growfs_option} 0 1" >> /etc/fstab
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${boot_partition}") /boot ext4 ${final_boot_mountoptions} 0 2" >> /etc/fstab
	fi
fi
echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${efi_partition}") /boot/efi vfat ${final_efi_mountoptions} 0 2" >> /etc/fstab
if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then echo -e "/var/swap/swapfile none swap sw 0 0" >> /etc/fstab; fi
$(if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		if [ "$(get_extra_partitions_attribute encryption ${i})" == "Yes" ]; then
			if [ "$(get_extra_partitions_attribute fstype ${i})" == "btrfs" ]; then
				cat <<FSTAB
echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")) $(if ([ "${distribution}" == "Bazzite" ] || [ "${distribution}" == "Fedora-Atomic" ]) && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home/*" ]] && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root/*" ]] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/var/*" ]]; then echo /var; fi)$(get_extra_partitions_attribute mountpoint ${i}) $(get_extra_partitions_attribute fstype ${i}) $(get_extra_partitions_attribute mountoptions ${i}) 0 0" >> /etc/fstab
FSTAB
			else
				cat <<FSTAB
echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")) $(if ([ "${distribution}" == "Bazzite" ] || [ "${distribution}" == "Fedora-Atomic" ]) && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home/*" ]] && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root/*" ]] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/var/*" ]]; then echo /var; fi)$(get_extra_partitions_attribute mountpoint ${i}) $(get_extra_partitions_attribute fstype ${i}) $(get_extra_partitions_attribute mountoptions ${i}) 0 2" >> /etc/fstab
FSTAB
			fi
		else
			if [ "$(get_extra_partitions_attribute fstype ${i})" == "btrfs" ]; then
				cat <<FSTAB
echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") $(if ([ "${distribution}" == "Bazzite" ] || [ "${distribution}" == "Fedora-Atomic" ]) && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home/*" ]] && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root/*" ]] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/var/*" ]]; then echo /var; fi)$(get_extra_partitions_attribute mountpoint ${i}) $(get_extra_partitions_attribute fstype ${i}) $(get_extra_partitions_attribute mountoptions ${i}) 0 0" >> /etc/fstab
FSTAB
			else
				cat <<FSTAB
echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") $(if ([ "${distribution}" == "Bazzite" ] || [ "${distribution}" == "Fedora-Atomic" ]) && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home/*" ]] && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root/*" ]] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/var/*" ]]; then echo /var; fi)$(get_extra_partitions_attribute mountpoint ${i}) $(get_extra_partitions_attribute fstype ${i}) $(get_extra_partitions_attribute mountoptions ${i}) 0 2" >> /etc/fstab
FSTAB
			fi
		fi
	done
fi)
$(if [ ${#extra_partitions[@]} -ne 0 ]; then
	if [ "$(echo ${version} | cut -d '/' -f2)" == "Openrc" ]; then
		rm -f /etc/conf.d/dmcrypt
		touch /etc/conf.d/dmcrypt
		chmod 0644 /etc/conf.d/dmcrypt
		for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
			if [ "$(get_extra_partitions_attribute encryption ${i})" == "Yes" ]; then
				if [ "${root_encryption}" == "Yes" ]; then
					cat <<DMCRYPT
echo -e "target=luks-\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")\nsource=UUID=\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")\nkey=/root/encryption.key\n" >> /etc/conf.d/dmcrypt
DMCRYPT
				else
					cat <<DMCRYPT
echo -e "target=luks-\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")\nsource=UUID=\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")\n" >> /etc/conf.d/dmcrypt
DMCRYPT
				fi
			fi
		done
	else
		rm -f /etc/crypttab
		touch /etc/crypttab
		chmod 0644 /etc/crypttab
		for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
			if [ "$(get_extra_partitions_attribute encryption ${i})" == "Yes" ]; then
				if [ "${root_encryption}" == "Yes" ]; then
					cat <<CRYPTTAB
echo -e "luks-\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") UUID=\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") /root/encryption.key luks" >> /etc/crypttab
CRYPTTAB
				else
					cat <<CRYPTTAB
echo -e "luks-\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") UUID=\$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))") none luks" >> /etc/crypttab
CRYPTTAB
				fi
			fi
		done
	fi
fi)
cat >/usr/sbin/linuxloops-btrfs-snapshot <<'LINUXLOOPS_BTRFS_SNAPSHOT'
#!/bin/bash

usage()
{
cat <<'USAGE'
linuxloops-btrfs-snapshot: btrfs system backup helper.
Usage: linuxloops-btrfs-snapshot --create|--restore
-c, --create		(Create a system backup)
-r, --restore		(Restore a system backup)
-h, --help		(Display this menu)
USAGE
}

create()
{
echo "Creating system backup."

if [ "\$(findmnt / -no SOURCE | cut -d '[' -f2 | cut -d ']' -f1)" == "/linuxloops-backup/@-backup" ] || [ "\$(findmnt /boot -no SOURCE | cut -d '[' -f2 | cut -d ']' -f1)" == "/linuxloops-backup/@boot-backup" ]; then
	echo "System backups cannot be created from the backup snapshot, restore the system backup and reboot first."
	exit 1
fi

if [ -d /boot/grub2 ]; then grub_version="2"; fi
cat /etc/grub.d/40_custom > /etc/grub.d/11_linuxloops_backup
echo "submenu 'Linuxloops backup' {" >> /etc/grub.d/11_linuxloops_backup
cat /boot/grub\${grub_version}/grub.cfg | sed -n '/^menuentry/,/^}/p' | sed 's#/@boot/#/linuxloops-backup/@boot-backup/#g' | sed 's#rootflags=subvol=@ #rootflags=subvol=linuxloops-backup/@-backup #g' >> /etc/grub.d/11_linuxloops_backup
echo "}" >> /etc/grub.d/11_linuxloops_backup
chmod 0755 /etc/grub.d/11_linuxloops_backup
grub\${grub_version}-mkconfig -o /boot/grub\${grub_version}/grub.cfg

subvolumes_dir="\$(mktemp -d /tmp/btrfs_backup.XXXXXXXX)"
mkdir "\${subvolumes_dir}"/{boot,root}
mount \$(findmnt /boot -no SOURCE | cut -d '[' -f1) -o subvol=/ "\${subvolumes_dir}"/boot
mount \$(findmnt / -no SOURCE | cut -d '[' -f1) -o subvol=/ "\${subvolumes_dir}"/root

mkdir -p "\${subvolumes_dir}"/boot/linuxloops-backup "\${subvolumes_dir}"/root/linuxloops-backup
if [ -d "\${subvolumes_dir}"/boot/linuxloops-backup/@boot-backup ]; then btrfs subvolume delete "\${subvolumes_dir}"/boot/linuxloops-backup/@boot-backup; fi
if [ -d "\${subvolumes_dir}"/root/linuxloops-backup/@-backup ]; then btrfs subvolume delete "\${subvolumes_dir}"/root/linuxloops-backup/@-backup; fi
btrfs subvolume snapshot "\${subvolumes_dir}"/boot/@boot "\${subvolumes_dir}"/boot/linuxloops-backup/@boot-backup
btrfs subvolume snapshot "\${subvolumes_dir}"/root/@ "\${subvolumes_dir}"/root/linuxloops-backup/@-backup
sed -i 's#subvol=@ #subvol=linuxloops-backup/@-backup #g' "\${subvolumes_dir}"/root/linuxloops-backup/@-backup/etc/fstab
sed -i 's#subvol=@boot #subvol=linuxloops-backup/@boot-backup #g' "\${subvolumes_dir}"/root/linuxloops-backup/@-backup/etc/fstab

umount "\${subvolumes_dir}"/root
umount "\${subvolumes_dir}"/boot

echo "System backup created."
}

restore()
{
echo "Restoring system backup."

subvolumes_dir="\$(mktemp -d /tmp/btrfs_backup.XXXXXXXX)"
mkdir "\${subvolumes_dir}"/{boot,root}
mount \$(findmnt /boot -no SOURCE | cut -d '[' -f1) -o subvol=/ "\${subvolumes_dir}"/boot
mount \$(findmnt / -no SOURCE | cut -d '[' -f1) -o subvol=/ "\${subvolumes_dir}"/root

if [ ! -d "\${subvolumes_dir}"/boot/linuxloops-backup/@boot-backup ] || [ ! -d "\${subvolumes_dir}"/root/linuxloops-backup/@-backup ]; then echo "No available snapshot to restore."; umount "\${subvolumes_dir}"/boot "\${subvolumes_dir}"/root; exit 1; fi

if [ -d "\${subvolumes_dir}"/boot/linuxloops-backup/@boot-replaced ]; then btrfs subvolume delete "\${subvolumes_dir}"/boot/linuxloops-backup/@boot-replaced; fi
if [ -d "\${subvolumes_dir}"/root/linuxloops-backup/@-replaced ]; then btrfs subvolume delete "\${subvolumes_dir}"/root/linuxloops-backup/@-replaced; fi
mv "\${subvolumes_dir}"/boot/@boot "\${subvolumes_dir}"/boot/linuxloops-backup/@boot-replaced
mv "\${subvolumes_dir}"/root/@ "\${subvolumes_dir}"/root/linuxloops-backup/@-replaced
btrfs subvolume snapshot "\${subvolumes_dir}"/boot/linuxloops-backup/@boot-backup "\${subvolumes_dir}"/boot/@boot
btrfs subvolume snapshot "\${subvolumes_dir}"/root/linuxloops-backup/@-backup "\${subvolumes_dir}"/root/@
sed -i 's#subvol=linuxloops-backup/@-backup #subvol=@ #g' "\${subvolumes_dir}"/root/@/etc/fstab
sed -i 's#subvol=linuxloops-backup/@boot-backup #subvol=@boot #g' "\${subvolumes_dir}"/root/@/etc/fstab

umount "\${subvolumes_dir}"/root
umount "\${subvolumes_dir}"/boot

echo "System backup restored, please reboot your computer."
}

if [[ \$EUID -ne 0 ]]; then echo "This script must be run as root."; exit 1; fi
if [ -z "\${1}" ] || [ ! -z "\${2}" ]; then usage; exit 1; fi

if [ -z "\$(command -v btrfs)" ] || [ -z "\$(findmnt / -no SOURCE | cut -d '[' -f1)" ] || ([ ! "\$(findmnt / -no SOURCE | cut -d '[' -f2 | cut -d ']' -f1)" == "/@" ] && [ ! "\$(findmnt / -no SOURCE | cut -d '[' -f2 | cut -d ']' -f1)" == "/linuxloops-backup/@-backup" ]) || [ -z "\$(findmnt /boot -no SOURCE | cut -d '[' -f1)" ] || ([ ! "\$(findmnt /boot -no SOURCE | cut -d '[' -f2 | cut -d ']' -f1)" == "/@boot" ] && [ ! "\$(findmnt /boot -no SOURCE | cut -d '[' -f2 | cut -d ']' -f1)" == "/linuxloops-backup/@boot-backup" ]); then
	echo "Conditions to run this script are not met."
	exit 1
fi

case "\${1}" in
	-c | --create)
		create
	;;
	-h | --help)
		usage
	;;
	-r | --restore)
		read -p "WARNING: Your root and boot partitions will be replaced by the backup ones, are you sure you want to continue ? (type yes to continue)"\$'\n' confirm
		if [ -z \${confirm} ] || [ ! \${confirm} == "yes" ]; then echo "Invalid answer \${confirm}, exiting"; exit 1; fi
		restore
	;;
	*)
		echo "\${1} argument is not valid"
		usage
		exit 1
	;;
esac

exit 0
LINUXLOOPS_BTRFS_SNAPSHOT
chmod 0755 /usr/sbin/linuxloops-btrfs-snapshot
GENERATEFSTAB
fi
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_fstab
}

add_linuxloops_pre()
{
touch "${bootstrapdir}"/tmp/linuxloops/install_initramfs
cat >>"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<'INITSCRIPT'
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin
if [ -f /usr/local/etc/profile ]; then source /usr/local/etc/profile; fi

mkdir -p /dev /proc /sys /run
mount -n -t devtmpfs devtmpfs /dev  -o nosuid,mode=0755
mount -n -t proc     proc     /proc -o nosuid,noexec,nodev
mount -n -t sysfs    sysfs    /sys  -o nosuid,noexec,nodev
mount -n -t tmpfs    tmpfs    /run  -o nosuid,nodev,mode=0755

echo "linuxloops: boot sequence started." > /dev/kmsg
echo "linuxloops: img_uuid=$img_uuid" > /dev/kmsg
echo "linuxloops: img_path=$img_path" > /dev/kmsg

INITSCRIPT
}

add_linuxloops_recovery()
{
touch "${bootstrapdir}"/tmp/linuxloops/install_initramfs
cat >>"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<'INITSCRIPT'
recovery_shell()
{
	printk_levels="$(cat /proc/sys/kernel/printk)"
	echo 0 0 0 0 > /proc/sys/kernel/printk
	echo -e "\n\nYou are in the recovery shell, you can notably use the included tools to obtain data on your partitions ("blkid" or "lsblk") or to perform an fscheck ("e2fsck" or "ntfsfix").\nOnce you are done with your modifications, type \"exit\" to reboot the computer.\n\n"
	sh
	reboot -f
}

INITSCRIPT
}

add_linuxloops_udev_start()
{
touch "${bootstrapdir}"/tmp/linuxloops/install_initramfs
cat >>"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<'INITSCRIPT'
if [ -z "$img_uuid" ] || [ -z "$img_path" ]; then echo "linuxloops: invalid GRUB configuration." > /dev/kmsg; recovery_shell; fi

if [ -x /sbin/udevd ]; then
	UDEVD=/sbin/udevd
	UDEVD_BIN="udevd"
elif [ -x /lib/udev/udevd ]; then
	UDEVD=/lib/udev/udevd
	UDEVD_BIN="udevd"
elif [ -x /lib/systemd/systemd-udevd ]; then
	UDEVD=/lib/systemd/systemd-udevd
	UDEVD_BIN="systemd-udevd"
elif [ -x /usr/lib/systemd/systemd-udevd ]; then
	UDEVD=/usr/lib/systemd/systemd-udevd
	UDEVD_BIN="systemd-udevd"
elif [ -x /usr/lib64/systemd/systemd-udevd ]; then
	UDEVD=/usr/lib64/systemd/systemd-udevd
	UDEVD_BIN="systemd-udevd"
else
	echo "linuxloops: Cannot find udevd nor systemd-udevd." > /dev/kmsg
	recovery_shell
fi

$UDEVD --daemon --resolve-names=never >/linuxloops_udev.log 2>&1
udevadm trigger --action=add --type=subsystems
udevadm trigger --action=add --type=devices
udevadm settle

INITSCRIPT
}

add_linuxloops_main()
{
touch "${bootstrapdir}"/tmp/linuxloops/install_initramfs
cat >>"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<'INITSCRIPT'
if [ ! -z "$img_uuid" ] && [ ! -z "$img_path" ]; then
	if [ ! -b /dev/disk/by-partuuid/"$img_uuid" ]; then echo "linuxloops: Boot partition was not found." > /dev/kmsg; recovery_shell; fi
	mkdir /linuxloops_root || { echo "linuxloops: Root directory cannot be created." > /dev/kmsg; recovery_shell; }
	if [ ! -z "$linuxloops_debug" ]; then recovery_shell; fi

	fstype=$(blkid -s TYPE -o value /dev/disk/by-partuuid/"$img_uuid")
	if [ "$fstype" = "ntfs" ]; then
		ntfs-3g /dev/disk/by-partuuid/"$img_uuid" /linuxloops_root || { echo "linuxloops: The boot partition could not be mounted." > /dev/kmsg; recovery_shell; }
	else
		mount -n -t "$fstype" /dev/disk/by-partuuid/"$img_uuid" /linuxloops_root || { echo "linuxloops: The boot partition could not be mounted." > /dev/kmsg; recovery_shell; }
	fi

	if [ -f /linuxloops_root/"$img_path" ]; then
		modprobe loop || { echo "linuxloops: Loop module is not available." > /dev/kmsg; recovery_shell; }
		if [ ! -b /dev/loop0 ]; then mknod -m 660 /dev/loop0 b 7 0 || { echo "linuxloops: The loop device could not be created." > /dev/kmsg; recovery_shell; }; fi
		losetup --direct-io=off -P /dev/loop0 /linuxloops_root"$img_path" || { echo "linuxloops: The loop device could not be configured." > /dev/kmsg; recovery_shell; }
		#losetup -P /dev/loop0 /linuxloops_root"$img_path" || { echo "linuxloops: The loop device could not be configured." > /dev/kmsg; recovery_shell; }
	else
		echo "linuxloops: The rootfs image file was not found, it might be due to an incorrect GRUB config or unsupported configuration." > /dev/kmsg
		recovery_shell
	fi

	udevadm trigger --action=add --type=subsystems
	udevadm trigger --action=add --type=devices
	udevadm settle
fi

INITSCRIPT
}

add_linuxloops_udev_end()
{
touch "${bootstrapdir}"/tmp/linuxloops/install_initramfs
cat >>"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<'INITSCRIPT'
udevadm control --exit
udevadm info --cleanup-db

timer=0
while ps | grep -q '[u]devd'; do
	echo "linuxloops: udevd is not yet killed, sleeping 1s" > /dev/kmsg
	if [ $timer -eq 3 ]; then echo "linuxloops: udevd could not be killed, continuing anyway..." > /dev/kmsg; break; fi
	sleep 1
	timer=$((timer+1))
done

INITSCRIPT
}

add_linuxloops_post()
{
touch "${bootstrapdir}"/tmp/linuxloops/install_initramfs
cat >>"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<'INITSCRIPT'
if [ -z "$linuxloops_init" ]; then
	if [ -x /init ]; then
		linuxloops_init="/init"
	elif [ -x /sbin/init ]; then
		linuxloops_init="/sbin/init"
	else
		echo "linuxloops: No init system found." > /dev/kmsg
		recovery_shell
	fi
fi

echo "linuxloops: boot sequence finished." > /dev/kmsg

umount /run
umount /sys
umount /proc
umount /dev > /dev/null 2>&1 || umount -l /dev > /dev/null 2>&1 || echo "linuxloops: /dev was not properly unmounted" > /dev/kmsg

#sh

exec "$linuxloops_init"
INITSCRIPT
}

generate_initcpio()
{
cat >"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<INITCPIOSTART
#!/bin/bash
set -e
if [ "${distribution}" == "Artix" ] || [ "${distribution}" == "BlendOS" ] || [ "${distribution}" == "SteamOS" ] || [ "${environment}" == "None" ]; then
	if [ "${root_encryption}" == "Yes" ]; then
		sed -i 's@ block filesystems fsck)@ block encrypt filesystems fsck linuxloops)@g' /etc/mkinitcpio.conf
	else
		sed -i 's@ block filesystems fsck)@ block filesystems fsck linuxloops)@g' /etc/mkinitcpio.conf
	fi
else
	if [ "${root_encryption}" == "Yes" ]; then
		sed -i 's@ block filesystems fsck)@ block plymouth encrypt filesystems fsck linuxloops)@g' /etc/mkinitcpio.conf
	else
		sed -i 's@ block filesystems fsck)@ block plymouth filesystems fsck linuxloops)@g' /etc/mkinitcpio.conf
	fi
fi
rm -rf /boot/linuxloops
mkdir -p /boot/linuxloops/initcpio-hook
cat >/boot/linuxloops/initcpio-hook/linuxloops <<'INSTALLHOOK'
#!/bin/bash

build() {
	add_module "8250_dw"
	add_module "aes"
	add_module "atkbd"
	add_module "btrfs"
	add_module "cbc"
	add_module "dm_crypt"
	add_module "exfat"
	add_module "ext4"
	add_module "fuse"
	add_module "i8042"
	add_module "intel_lpss"
	add_module "intel_lpss_pci"
	add_module "loop"
	add_module "nvme"
	add_module "quota_v1"
	add_module "quota_v2"
	add_module "serio"
	add_module "sha256"
	add_module "surface_aggregator"
	add_module "surface_aggregator_registry"
	add_module "surface_hid"
	add_module "surface_hid_core"
	add_module "usbhid"
	add_module "xhci_pci"

	add_binary "bash"
	add_binary "blkid"
	add_binary "cryptsetup"
	add_binary "cut"
	add_binary "e2fsck"
	add_binary "find"
	add_binary "grep"
	add_binary "losetup"
	add_binary "lsblk"
	add_binary "ntfs-3g"
	add_binary "ntfsfix"
	add_binary "ps"
	add_binary "setfont"
	add_binary "setsid"

	cp "/boot/linuxloops/linuxloops" "\$BUILDROOT/linuxloops"

	for i in \$(find /usr/lib/udev/rules.d/*-linuxloops.rules 2>/dev/null); do
		cp "\${i}" "\$BUILDROOT\$i"
	done

	if ls /boot/vmlinuz-* >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ ! -z "\$(command -v sbsign)" ] && [ ! -z "\$(command -v sbverify)" ]; then
		for i in /boot/vmlinuz-*; do
			if ! sbverify --list \$i | grep -q 'CN=Linuxloops Machine Owner Key'; then
				sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
}

help() {
    cat <<HELPEOF
Installs the linuxloops hook.
HELPEOF
}
INSTALLHOOK
chmod 0755 /boot/linuxloops/initcpio-hook/linuxloops
ln -s /boot/linuxloops/initcpio-hook/linuxloops /etc/initcpio/install/linuxloops
cat >/boot/linuxloops/linuxloops <<'LINUXLOOPSBINARY'
INITCPIOSTART
add_linuxloops_pre
add_linuxloops_recovery
add_linuxloops_udev_start
add_linuxloops_main
add_linuxloops_udev_end
add_linuxloops_post
echo -e "LINUXLOOPSBINARY" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "chmod 0755 /boot/linuxloops/linuxloops" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "(cd /boot/linuxloops && find . | cpio -o -H newc | gzip > /boot/linuxloops/linuxloops-recovery.img)" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
if [ "${distribution}" != "BlendOS" ]; then echo -e "mkinitcpio -P" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs; fi
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_initramfs
}

generate_initramfstools()
{
cat >"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<INITRAMFSTOOLSSTART
#!/bin/bash
set -e
rm -rf /boot/linuxloops
mkdir -p /boot/linuxloops/initramfstools-hook
cat >/boot/linuxloops/initramfstools-hook/linuxloops <<'INSTALLHOOK'
#!/bin/bash
PREREQ=""
prereqs()
{
   echo "\$PREREQ"
}

case \$1 in
prereqs)
   prereqs
   exit 0
   ;;
esac

. /usr/share/initramfs-tools/hook-functions
# Begin real processing below this line

	rm -f "\$DESTDIR/bin/losetup" "\$DESTDIR/sbin/losetup"

	manual_add_modules "8250_dw"
	manual_add_modules "aes"
	manual_add_modules "atkbd"
	manual_add_modules "btrfs"
	manual_add_modules "cbc"
	manual_add_modules "dm-crypt"
	manual_add_modules "exfat"
	manual_add_modules "ext4"
	manual_add_modules "fuse"
	manual_add_modules "i8042"
	manual_add_modules "intel_lpss"
	manual_add_modules "intel_lpss_pci"
	manual_add_modules "loop"
	manual_add_modules "nvme"
	manual_add_modules "quota_v1"
	manual_add_modules "quota_v2"
	manual_add_modules "serio"
	manual_add_modules "sha256"
	manual_add_modules "surface_aggregator"
	manual_add_modules "surface_aggregator_registry"
	manual_add_modules "surface_hid"
	manual_add_modules "surface_hid_core"
	manual_add_modules "usbhid"
	manual_add_modules "xhci_pci"

	copy_exec "\$(command -v bash)"
	copy_exec "\$(command -v blkid)"
	copy_exec "\$(command -v cryptsetup)"
	copy_exec "\$(command -v cut)"
	copy_exec "\$(command -v e2fsck)"
	copy_exec "\$(command -v find)"
	copy_exec "\$(command -v grep)"
	copy_exec "\$(command -v losetup)"
	copy_exec "\$(command -v lsblk)"
	copy_exec "\$(command -v ntfs-3g)"
	copy_exec "\$(command -v ntfsfix)"
	copy_exec "\$(command -v ps)"
	copy_exec "\$(command -v setfont)"
	copy_exec "\$(command -v setsid)"

	cp "/boot/linuxloops/linuxloops" "\$DESTDIR/linuxloops"

	for i in \$(find /usr/lib/udev/rules.d/*-linuxloops.rules 2>/dev/null); do
		cp "\${i}" "\$DESTDIR\$i"
	done

	if ls /boot/vmlinuz-* >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ ! -z "\$(command -v sbsign)" ] && [ ! -z "\$(command -v sbverify)" ]; then
		for i in /boot/vmlinuz-*; do
			if ! sbverify --list \$i | grep -q 'CN=Linuxloops Machine Owner Key'; then
				sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
INSTALLHOOK
chmod 0755 /boot/linuxloops/initramfstools-hook/linuxloops
ln -s /boot/linuxloops/initramfstools-hook/linuxloops /etc/initramfs-tools/hooks/linuxloops
cat >/boot/linuxloops/linuxloops <<'LINUXLOOPSBINARY'
INITRAMFSTOOLSSTART
add_linuxloops_pre
add_linuxloops_recovery
add_linuxloops_udev_start
add_linuxloops_main
add_linuxloops_udev_end
add_linuxloops_post
echo -e "LINUXLOOPSBINARY" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "chmod 0755 /boot/linuxloops/linuxloops" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "(cd /boot/linuxloops && find . | cpio -o -H newc | gzip > /boot/linuxloops/linuxloops-recovery.img)" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "DEBIAN_FRONTEND=noninteractive dpkg-reconfigure keyboard-configuration" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "DEBIAN_FRONTEND=noninteractive dpkg-reconfigure console-setup" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "update-initramfs -u -k all" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_initramfs
}

generate_dracut()
{
cat >"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<INITDRACUTSTART
#!/bin/bash
set -e
rm -rf /boot/linuxloops
mkdir -p /boot/linuxloops/dracut-hook
cat >/boot/linuxloops/dracut-hook/module-setup.sh <<'INSTALLHOOK'
#!/bin/bash

check() {
	return 0
}

installkernel() {
	instmods "8250_dw"
	instmods "aes"
	instmods "atkbd"
	instmods "btrfs"
	instmods "cbc"
	instmods "dm-crypt"
	instmods "exfat"
	instmods "ext4"
	instmods "fuse"
	instmods "i8042"
	instmods "intel_lpss"
	instmods "intel_lpss_pci"
	instmods "loop"
	instmods "nvme"
	instmods "quota_v1"
	instmods "quota_v2"
	instmods "serio"
	instmods "sha256"
	instmods "surface_aggregator"
	instmods "surface_aggregator_registry"
	instmods "surface_hid"
	instmods "surface_hid_core"
	instmods "usbhid"
	instmods "xhci_pci"
}

install() {
	inst "\$(command -v bash)" "/usr/bin/bash"
	inst "\$(command -v blkid)" "/usr/sbin/blkid"
	inst "\$(command -v cryptsetup)" "/usr/sbin/cryptsetup"
	inst "\$(command -v cut)" "/usr/sbin/cut"
	inst "\$(command -v e2fsck)" "/usr/sbin/e2fsck"
	inst "\$(command -v find)" "/usr/bin/find"
	inst "\$(command -v grep)" "/usr/sbin/grep"
	inst "\$(command -v losetup)" "/usr/sbin/losetup"
	inst "\$(command -v lsblk)" "/usr/sbin/lsblk"
	inst "\$(command -v ntfs-3g)" "/usr/sbin/ntfs-3g"
	inst "\$(command -v ntfsfix)" "/usr/sbin/ntfsfix"
	inst "\$(command -v ps)" "/usr/bin/ps"
	inst "\$(command -v setfont)" "/usr/bin/setfont"
	inst "\$(command -v setsid)" "/usr/sbin/setsid"

	cp "/boot/linuxloops/linuxloops" "\${initdir}/linuxloops"
	
	for i in \$(find /usr/lib/udev/rules.d/*-linuxloops.rules 2>/dev/null); do
		cp "\${i}" "\${initdir}\$i"
	done

	if ls /boot/vmlinuz-* >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ ! -z "\$(command -v sbsign)" ] && [ ! -z "\$(command -v sbverify)" ]; then
		for i in /boot/vmlinuz-*; do
			if ! sbverify --list \$i | grep -q 'CN=Linuxloops Machine Owner Key'; then
				sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
}
INSTALLHOOK
chmod 0755 /boot/linuxloops/dracut-hook/module-setup.sh
mkdir -p /usr/lib/dracut/modules.d/99linuxloops
ln -s /boot/linuxloops/dracut-hook/module-setup.sh /usr/lib/dracut/modules.d/99linuxloops/module-setup.sh
cat >/boot/linuxloops/linuxloops <<'LINUXLOOPSBINARY'
INITDRACUTSTART
add_linuxloops_pre
add_linuxloops_recovery
add_linuxloops_udev_start
add_linuxloops_main
add_linuxloops_udev_end
add_linuxloops_post
echo -e "LINUXLOOPSBINARY" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "chmod 0755 /boot/linuxloops/linuxloops" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "(cd /boot/linuxloops && find . | cpio -o -H newc | gzip > /boot/linuxloops/linuxloops-recovery.img)" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "mkdir -p /etc/dracut.conf.d" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "echo 'hostonly=\"no\"' > /etc/dracut.conf.d/99-linuxloops.conf" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
echo -e "dracut --regenerate-all --force" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_initramfs
}

generate_nixos_config()
{
cmdline="systemd.log_target=null quiet"
if [ ! -z "${kernel_parameters}" ]; then cmdline="${cmdline} ${kernel_parameters}"; fi
cat >"${bootstrapdir}"/tmp/linuxloops/install_initramfs <<INITNIXOS
#!/bin/bash
set -e
cmdline="${cmdline}"
if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
	if [ "${root_fstype}" == "btrfs" ]; then
		if [ "${root_encryption}" == "Yes" ]; then
			if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} resume=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) resume_offset=\$(btrfs inspect-internal map-swapfile -r /mnt/var/swap/swapfile)"; else cmdline="resume=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) resume_offset=\$(btrfs inspect-internal map-swapfile -r /mnt/var/swap/swapfile)"; fi
		else
			if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} resume=UUID=\$(blkid -s UUID -o value ${root_partition}) resume_offset=\$(btrfs inspect-internal map-swapfile -r /mnt/var/swap/swapfile)"; else cmdline="resume=UUID=\$(blkid -s UUID -o value ${root_partition}) resume_offset=\$(btrfs inspect-internal map-swapfile -r /mnt/var/swap/swapfile)"; fi
		fi
	else
		if [ "${root_encryption}" == "Yes" ]; then
			if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} resume=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) resume_offset=\$(filefrag -v /mnt/var/swap/swapfile | head -4 | tail -1 | tr -s ' ' | cut -d' ' -f5 | cut -d'.' -f1)"; else cmdline="resume=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) resume_offset=\$(filefrag -v /mnt/var/swap/swapfile | head -4 | tail -1 | tr -s ' ' | cut -d' ' -f5 | cut -d'.' -f1)"; fi
		else
			if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} resume=UUID=\$(blkid -s UUID -o value ${root_partition}) resume_offset=\$(filefrag -v /mnt/var/swap/swapfile | head -4 | tail -1 | tr -s ' ' | cut -d' ' -f5 | cut -d'.' -f1)"; else cmdline="resume=UUID=\$(blkid -s UUID -o value ${root_partition}) resume_offset=\$(filefrag -v /mnt/var/swap/swapfile | head -4 | tail -1 | tr -s ' ' | cut -d' ' -f5 | cut -d'.' -f1)"; fi
		fi
	fi
fi
cmdline=\$(echo -n "\"\${cmdline}\"" | sed 's@ @" "@g')
mkdir -p /mnt/etc/nixos
if [ "${distribution}" == "FoxFlake" ]; then
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/sebanc/foxflake/raw/refs/heads/$(echo ${foxflake_version} | tr A-Z a-z)/installer/target-configuration/flake.nix -o /mnt/etc/nixos/flake.nix
case "$(echo ${environment} | cut -d'/' -f2)" in
	'Minimal')
		bundles=' '
	;;
	'Standard')
		bundles='"standard"'
	;;
	'Gaming')
		bundles='"gaming"'
	;;
	'Studio')
		bundles='"studio"'
	;;
	'Standard+Gaming')
		bundles='"standard" "gaming"'
	;;
	'Standard+Studio')
		bundles='"standard" "studio"'
	;;
	'Gaming+Studio')
		bundles='"gaming" "studio"'
	;;
	'Full')
		bundles='"standard" "gaming" "studio"'
	;;
esac
	cat >/mnt/etc/nixos/configuration.nix <<NIXOSCONFIGURATION
{ pkgs, lib, ... }:

{
  # Imports
  imports =
    [
      ./hardware-configuration.nix
      ./linuxloops.nix
    ];

  # Desktop environment type
  foxflake.environment.type = "$(echo ${environment} | cut -d'/' -f1 | tr A-Z a-z)";

${autologin_commands}

  # Bundles, system packages, flatpaks and waydroid configuration
  foxflake.system.bundles = [ \${bundles} ];         # e.g.: "standard" and/or "gaming" and/or "studio"
  foxflake.system.packages = with pkgs; [ ];         # e.g.: with pkgs; [ firefox ]
  foxflake.system.flatpaks = [ ];                    # e.g.: [ "org.mozilla.firefox" ];
  foxflake.system.waydroid = true;

  # User configuration (including user packages and flatpaks)
  foxflake.users.${useraccount_name}.extraGroups = [ "wheel" "networkmanager" ];
  foxflake.users.${useraccount_name}.packages = with pkgs; [ ];         # e.g.: with pkgs; [ firefox ]
  foxflake.users.${useraccount_name}.flatpaks = [ ];                    # e.g.: [ "org.mozilla.firefox" ];

${foxflake_nvidia}

  # Keyboard configuration
  foxflake.internationalisation.keyboard.layout = "${keymap}";
  foxflake.internationalisation.keyboard.variant = "";
  foxflake.internationalisation.keyboard.consoleKeymap = "${keymap}";

  # Locale configuration
  foxflake.internationalisation.defaultLocale = "${locale}.UTF-8";

  # Timezone configuration
  foxflake.internationalisation.timezone = "${timezone}";

  # Initially installed version (DO NOT TOUCH)
  foxflake.stateVersion = "25.05";
}
NIXOSCONFIGURATION
elif [ "${distribution}" == "GLF-OS" ]; then
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/Gaming-Linux-FR/GLF-OS/raw/refs/heads/$(echo ${glfos_version} | tr A-Z a-z)/iso-cfg/flake.nix -o /mnt/etc/nixos/flake.nix
	mkdir /mnt/etc/nixos/customConfig
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/Gaming-Linux-FR/GLF-OS/raw/refs/heads/$(echo ${glfos_version} | tr A-Z a-z)/iso-cfg/customConfig/default.nix -o /mnt/etc/nixos/customConfig/default.nix
	cat >/mnt/etc/nixos/configuration.nix <<NIXOSCONFIGURATION
{ pkgs, lib, ... }:

{
  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  imports = [
    ./hardware-configuration.nix
    ./linuxloops.nix
    ./customConfig
  ];

  glf.environment.type = "$(echo ${environment} | cut -d'/' -f1 | tr A-Z a-z)";
  glf.environment.edition = "$(echo ${environment} | cut -d'/' -f2 | tr A-Z a-z)";
  glf.nvidia_config.enable = false;
  glf.standBy.enable = false;

  users.users.${useraccount_name} = {
    isNormalUser = true;
    extraGroups = [ "wheel" "networkmanager" "scanner" "lp" "disk" ];
  };

  boot.kernelParams = [ \${cmdline} ];

  console.earlySetup = true;
  console.keyMap = "${keymap}";
  i18n.defaultLocale = "${locale}.UTF-8";
  time.timeZone = "${timezone}";

  services.thermald.enable = true;

  services.xserver = {
    xkb.layout = "${keymap}";
    xkb.variant = "";
  };

  networking.hostName = "${hostname}";
  networking.networkmanager.enable = true;

${autologin_commands}

${nixos_nvidia}

  system.stateVersion = "25.05"; # DO NOT TOUCH
}
NIXOSCONFIGURATION
else
	cat >/mnt/etc/nixos/configuration.nix <<NIXOSCONFIGURATION
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
imports = [
  ./hardware-configuration.nix
  ./linuxloops.nix
];

boot.kernelPackages = pkgs.linuxPackages;
boot.kernelParams = [ \${cmdline} ];
boot.plymouth.enable = true;

users.users.${useraccount_name} = {
  isNormalUser = true;
  extraGroups = [ "wheel" "networkmanager" ];
};

console.earlySetup = true;
console.keyMap = "${keymap}";
i18n.defaultLocale = "${locale}.UTF-8";
time.timeZone = "${timezone}";

hardware.bluetooth.enable = true;
hardware.sensor.iio.enable = true;
services.pipewire = {
  enable = true;
  alsa.enable = true;
  alsa.support32Bit = true;
  pulse.enable = true;
};
services.pulseaudio.enable = false;
services.thermald.enable = true;

networking.hostName = "${hostname}";
networking.networkmanager.enable = true;

hardware.sane.enable = true;
services.avahi.enable = true;
services.avahi.nssmdns4 = true;
services.printing.enable = true;

environment.systemPackages = with pkgs; [ firefox ffmpeg ${custom_packages} ];
$(if echo "${custom_packages}" | grep -wq 'steam'; then echo -e 'programs.steam = {\n  enable = true;\n  remotePlay.openFirewall = true;\n  dedicatedServer.openFirewall = true;\n  localNetworkGameTransfers.openFirewall = true;\n};'; fi)

${nixos_desktop}

hardware.graphics.enable = true;
hardware.graphics.extraPackages = with pkgs; [ intel-media-driver ];
$(if echo "${custom_packages}" | grep -wq 'steam\|wine'; then echo -e 'hardware.graphics.enable32Bit = true;'; fi)
${nixos_nvidia}

$(cat "${custom_script}" 2>/dev/null)

nix.gc = {
  automatic = true;
  dates = "weekly";
  options = "--delete-older-than 30d";
};
nix.settings.auto-optimise-store = true;
nixpkgs.config.allowUnfree = true;

systemd.services."getty@tty1".enable = false;
systemd.services."autovt@tty1".enable = false;

# This value determines the NixOS release from which the default
# settings for stateful data, like file locations and database versions
# on your system were taken. It‘s perfectly fine and recommended to leave
# this value at the release version of the first install of this system.
# Before changing this value read the documentation for this option
# (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
system.stateVersion = "25.05"; # Did you read the comment?
}
NIXOSCONFIGURATION
fi
cat >/mnt/etc/nixos/shim-signed.nix <<'NIXOSSHIM'
{ pkgs }:
pkgs.stdenv.mkDerivation rec {
  pname = "shim-signed";
  version = "15.8";
  src = pkgs.fetchurl {
    url = "http://archive.ubuntu.com/ubuntu/pool/main/s/shim-signed/shim-signed_1.59+15.8-0ubuntu2_amd64.deb";
    sha256 = "f8ed71ce2d91a304b6d5eb84997f846f331b554578bc02dbfe78e13ad8ac81a9";
  };
  unpackPhase = ''
    runHook preUnpack
    dpkg-deb -x \$src shim-signed
    runHook postUnpack
  '';
  installPhase = ''
    runHook preInstall
    mkdir -p "\$out/share"
    cp -r shim-signed/usr/lib/shim "\$out/share/"
    runHook postInstall
  '';
  nativeBuildInputs = with pkgs; [ dpkg ];
}
NIXOSSHIM
echo -e '# This file contains the fstab configuration.\n{ config, lib, pkgs, ... }:\n\n{' > /mnt/etc/nixos/hardware-configuration.nix
cat /tmp/linuxloops/fstab >>/mnt/etc/nixos/hardware-configuration.nix
echo -e "}" >> /mnt/etc/nixos/hardware-configuration.nix
cat >/mnt/etc/nixos/linuxloops.nix <<'NIXOSLINUXLOOPS'
# Do not modify this file which contains the linuxloops configuration.
# Please make changes to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, ... }:

{
nixpkgs.overlays = [ (final: prev: { shim-signed = prev.callPackage ./shim-signed.nix {}; }) ];
environment.systemPackages = with pkgs; [ ntfs3g openssl sbsigntool shim-signed ];
boot.consoleLogLevel = 3;
hardware.cpu.intel.updateMicrocode = true;
hardware.cpu.amd.updateMicrocode = true;
hardware.enableAllFirmware = true;
services.logrotate.checkConfig = false;

$(if [ "${install_type}" == "image" ]; then echo -e "boot.kernelParams = [ \"\\\${linuxloops_args}\" ];\n"; fi)
boot.loader.efi.canTouchEfiVariables = false;
boot.loader.efi.efiSysMountPoint = "/boot/efi";
boot.loader.grub.configurationLimit = 5;
boot.loader.grub.device = "nodev";
boot.loader.grub.efiInstallAsRemovable = true;
boot.loader.grub.efiSupport = true;
boot.loader.grub.enable = true;
boot.loader.grub.extraInstallCommands = ''	
  \${pkgs.coreutils}/bin/cat >/tmp/sbat.csv <<GRUBSBAT
sbat,1,SBAT Version,sbat,1,https://github.com/rhboot/shim/blob/main/SBAT.md
grub,3,Free Software Foundation,grub,2:\$(\${pkgs.grub2_efi}/bin/grub-install -V | \${pkgs.coreutils}/bin/cut -d' ' -f3),https//www.gnu.org/software/grub/
grub.$(echo ${distribution} | tr [:upper:] [:lower:]),1,${distribution} Linux,grub,2:\$(\${pkgs.grub2_efi}/bin/grub-install -V | \${pkgs.coreutils}/bin/cut -d' ' -f3),https//www.gnu.org/software/grub/
GRUBSBAT
  \${pkgs.coreutils}/bin/rm -rf /boot/efi/EFI/BOOT /boot/efi/EFI/${bootloader_id}
  \${pkgs.grub2_efi}/bin/grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --bootloader-id="${bootloader_id}" --sbat=/tmp/sbat.csv --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
  \${pkgs.grub2_efi}/bin/grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --removable --sbat=/tmp/sbat.csv --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
  if [ -f \${pkgs.shim-signed}/share/shim/shimx64.efi.signed.latest ] && [ -f \${pkgs.shim-signed}/share/shim/mmx64.efi ]; then
    \${pkgs.coreutils}/bin/mv /boot/efi/EFI/BOOT/BOOTX64.EFI /boot/efi/EFI/BOOT/grubx64.efi
    \${pkgs.coreutils}/bin/cp \${pkgs.shim-signed}/share/shim/shimx64.efi.signed.latest /boot/efi/EFI/BOOT/BOOTX64.EFI
    \${pkgs.coreutils}/bin/cp \${pkgs.shim-signed}/share/shim/shimx64.efi.signed.latest /boot/efi/EFI/${bootloader_id}/shimx64.efi
    \${pkgs.coreutils}/bin/cp \${pkgs.shim-signed}/share/shim/mmx64.efi /boot/efi/EFI/BOOT/mmx64.efi
    \${pkgs.coreutils}/bin/cp \${pkgs.shim-signed}/share/shim/mmx64.efi /boot/efi/EFI/${bootloader_id}/mmx64.efi
    if [ -x \${pkgs.sbsigntool}/bin/sbverify ] && [ -x \${pkgs.sbsigntool}/bin/sbattach ] && [ -x \${pkgs.sbsigntool}/bin/sbsign ] && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ]; then
      for grubefi in \$(\${pkgs.findutils}/bin/find /boot/efi/EFI/BOOT/grubx64.efi) \$(\${pkgs.findutils}/bin/find /boot/efi/EFI/"${bootloader_id}"/grubx64.efi); do
        for sig in \$(\${pkgs.sbsigntool}/bin/sbverify --list "\$grubefi" | \${pkgs.gnugrep}/bin/grep '^signature' | \${pkgs.gnused}/bin/sed 's@signature @@g' | \${pkgs.coreutils}/bin/sort -r); do \${pkgs.sbsigntool}/bin/sbattach --signum "\$sig" --remove "\$grubefi"; done
        \${pkgs.sbsigntool}/bin/sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output "\$grubefi" "\$grubefi"
      done
    fi
  fi
  if \${pkgs.coreutils}/bin/ls /boot/kernels/*-linux-*Image >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ -x \${pkgs.sbsigntool}/bin/sbsign ] && [ -x \${pkgs.sbsigntool}/bin/sbverify ]; then
    for i in /boot/kernels/*-linux-*Image; do
      if ! \${pkgs.sbsigntool}/bin/sbverify --list \$i | \${pkgs.gnugrep}/bin/grep -q 'CN=Linuxloops Machine Owner Key'; then
        \${pkgs.sbsigntool}/bin/sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
      fi
    done
  fi
'';
boot.loader.grub.fsIdentifier = "uuid";
boot.loader.grub.splashImage = lib.mkForce null;
boot.loader.grub.theme = lib.mkForce null;
boot.loader.grub.timeoutStyle = $(if [ ! -z "${grub_hide}" ] && [ "${grub_hide}" == "Yes" ]; then echo "\"hidden\""; else echo "\"menu\""; fi);
boot.loader.grub.useOSProber = false;
boot.loader.timeout = $(if [ ! -z "${grub_hide}" ] && [ "${grub_hide}" == "Yes" ]; then echo 2; else echo 5; fi);

#https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/profiles/all-hardware.nix
boot.initrd.availableKernelModules = [ "3w-9xxx" "3w-xxxx" "8250_dw" "aes" "ahci" "aic79xx" "aic7xxx" "arcmsr" "ata_piix" "atkbd" "btrfs" "cbc" "dm_crypt" "ehci_hcd" "encrypted_keys" "exfat" "ext4" "fuse" "hv_storvsc" "i8042" "intel_lpss" "intel_lpss_pci" "loop" "mmc_block" "mptspi" "nvme" "ohci1394" "pata_ali" "pata_amd" "pata_artop" "pata_atiixp" "pata_efar" "pata_hpt366" "pata_hpt37x" "pata_hpt3x2n" "pata_hpt3x3" "pata_it8213" "pata_it821x" "pata_jmicron" "pata_marvell" "pata_mpiix" "pata_netcell" "pata_ns87410" "pata_oldpiix" "pata_pcmcia" "pata_pdc2027x" "pata_qdi" "pata_rz1000" "pata_serverworks" "pata_sil680" "pata_sis" "pata_sl82c105" "pata_triflex" "pata_via" "pata_winbond" "quota_v1" "quota_v2" "sata_inic162x" "sata_nv" "sata_promise" "sata_qstor" "sata_sil" "sata_sil24" "sata_sis" "sata_svw" "sata_sx4" "sata_uli" "sata_via" "sata_vsc" "sbp2" "sd_mod" "sdhci_acpi" "sdhci_pci" "serio" "sha256" "sr_mod" "surface_aggregator" "surface_aggregator_registry" "surface_hid" "surface_hid_core" "uas" "uhci_hcd" "usbhid" "usb_storage" "virtio_net" "virtio_pci" "virtio_mmio" "virtio_blk" "virtio_scsi" "virtio_balloon" "virtio_console" "vmxnet3" "vsock" "vmw_balloon" "vmw_vmci" "vmwgfx" "vmw_vsock_vmci_transport" "xhci_pci" ];
boot.initrd.compressor="gzip";
boot.initrd.extraUtilsCommands = ''
  copy_bin_and_libs "\${pkgs.bash}/bin/bash"
  copy_bin_and_libs "\${pkgs.util-linux}/bin/blkid"
  copy_bin_and_libs "\${pkgs.cryptsetup}/bin/cryptsetup"
  copy_bin_and_libs "\${pkgs.coreutils}/bin/cut"
  copy_bin_and_libs "\${pkgs.e2fsprogs}/bin/e2fsck"
  copy_bin_and_libs "\${pkgs.findutils}/bin/find"
  copy_bin_and_libs "\${pkgs.gnugrep}/bin/grep"
  copy_bin_and_libs "\${pkgs.util-linux}/bin/losetup"
  copy_bin_and_libs "\${pkgs.util-linux}/bin/lsblk"
  copy_bin_and_libs "\${pkgs.ntfs3g}/bin/ntfs-3g"
  copy_bin_and_libs "\${pkgs.ntfs3g}/bin/ntfsfix"
  copy_bin_and_libs "\${pkgs.procps}/bin/ps"
  copy_bin_and_libs "\${pkgs.kbd}/bin/setfont"
  copy_bin_and_libs "\${pkgs.util-linux}/bin/setsid"
'';
boot.initrd.preLVMCommands = ''
INITNIXOS
add_linuxloops_recovery
add_linuxloops_main
echo -e "'';\n}\nNIXOSLINUXLOOPS\n" >> "${bootstrapdir}"/tmp/linuxloops/install_initramfs
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_initramfs
}

generate_iso_init()
{
add_linuxloops_pre
add_linuxloops_recovery
add_linuxloops_udev_start
add_linuxloops_main
add_linuxloops_udev_end
add_linuxloops_post
}

generate_install_initramfs()
{
if [ "${initramfs_type}" == "initcpio" ] || [ "${initramfs_type}" == "initramfstools" ] || [ "${initramfs_type}" == "dracut" ] || [ "${initramfs_type}" == "nixos_config" ] || [ "${initramfs_type}" == "iso_init" ]; then
	generate_"${initramfs_type}"
fi
}

generate_install_swap()
{
cat >"${bootstrapdir}"/tmp/linuxloops/install_swap <<CREATESWAP
#!/bin/bash
set -e
echo "Please wait while the swap file is being generated..."
mkdir -p /mnt/var/swap
truncate -s 0 /mnt/var/swap/swapfile
if [ "${root_fstype}" == "btrfs" ]; then chattr +C /mnt/var/swap/swapfile; fi
fallocate -l "${swap_size}"G /mnt/var/swap/swapfile
chmod 0600 /mnt/var/swap/swapfile
mkswap /mnt/var/swap/swapfile
CREATESWAP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_swap
}

generate_install_bootloader()
{
if [ "${distribution}" == "BlissOS" ] || [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ] || [ "${distribution}" == "Tails" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/install_bootloader <<INSTALLEFI
#!/bin/bash
set -e
if [ "${install_type}" == "image" ]; then cmdline="\\\\\\\${linuxloops_args}"; fi
if [ "${initramfs_type}" == "initcpio" ]; then
	if [ "${root_encryption}" == "Yes" ]; then if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} "; fi; cmdline="\${cmdline}cryptdevice=UUID=\$(blkid -s UUID -o value "${root_partition}"):luks-\$(blkid -s UUID -o value "${root_partition}") rd.luks.uuid=\$(blkid -s UUID -o value "${root_partition}")"; fi
elif [ "${initramfs_type}" == "initramfstools" ]; then
	if [ "${root_encryption}" == "Yes" ]; then if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} "; fi; cmdline="\${cmdline}cryptopts=target=luks-\$(blkid -s UUID -o value "${root_partition}"),source=/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}"),luks"; fi
elif [ "${initramfs_type}" == "dracut" ] || [ "${distribution}" == "Bazzite" ] || [ "${distribution}" == "Fedora-Atomic" ]; then
	if [ "${root_encryption}" == "Yes" ]; then if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} "; fi; cmdline="\${cmdline}rd.luks.uuid=\$(blkid -s UUID -o value "${root_partition}")"; fi
fi
if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
	if [ "${root_fstype}" == "btrfs" ]; then
		if [ "${distribution}" != "Pop" ] && [ "${distribution}" != "Zorin" ]; then
			if [ "${root_encryption}" == "Yes" ]; then
				if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} resume=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) resume_offset=\$(btrfs inspect-internal map-swapfile -r /var/swap/swapfile)"; else cmdline="resume=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) resume_offset=\$(btrfs inspect-internal map-swapfile -r /var/swap/swapfile)"; fi
			else
				if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} resume=UUID=\$(blkid -s UUID -o value ${root_partition}) resume_offset=\$(btrfs inspect-internal map-swapfile -r /var/swap/swapfile)"; else cmdline="resume=UUID=\$(blkid -s UUID -o value ${root_partition}) resume_offset=\$(btrfs inspect-internal map-swapfile -r /var/swap/swapfile)"; fi
			fi
		fi
	else
		if [ "${root_encryption}" == "Yes" ]; then
			if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} resume=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) resume_offset=\$(filefrag -v /var/swap/swapfile | head -4 | tail -1 | tr -s ' ' | cut -d' ' -f5 | cut -d'.' -f1)"; else cmdline="resume=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) resume_offset=\$(filefrag -v /var/swap/swapfile | head -4 | tail -1 | tr -s ' ' | cut -d' ' -f5 | cut -d'.' -f1)"; fi
		else
			if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} resume=UUID=\$(blkid -s UUID -o value ${root_partition}) resume_offset=\$(filefrag -v /var/swap/swapfile | head -4 | tail -1 | tr -s ' ' | cut -d' ' -f5 | cut -d'.' -f1)"; else cmdline="resume=UUID=\$(blkid -s UUID -o value ${root_partition}) resume_offset=\$(filefrag -v /var/swap/swapfile | head -4 | tail -1 | tr -s ' ' | cut -d' ' -f5 | cut -d'.' -f1)"; fi
		fi
	fi
fi
if [ ! "${distribution}" == "Artix" ] && [ ! "${distribution}" == "Devuan" ] && [ ! "${distribution}" == "Gentoo" ] && [ ! "${distribution}" == "Void" ]; then
	if [ ! -z "${kernel_parameters}" ]; then
		cmdline_extra="systemd.log_target=null quiet splash loglevel=3 ${kernel_parameters}"
	else
		cmdline_extra="systemd.log_target=null quiet splash loglevel=3"
	fi
else
	if [ ! -z "${kernel_parameters}" ]; then
		cmdline_extra="quiet splash loglevel=3 ${kernel_parameters}"
	else
		cmdline_extra="quiet splash loglevel=3"
	fi
fi
cat >/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
#!/bin/bash
set -e
cat >/etc/default/grub <<'GRUBDEFAULTS'
GRUB_DISTRIBUTOR="\$(if [ "${distribution}" == "MX" ]; then echo "MX"; elif [ "${distribution}" == "Parrot" ]; then echo "Parrot OS"; elif [ "${distribution}" == "SteamOS" ]; then echo "SteamOS"; elif [ "${distribution}" == "Proxmox" ]; then echo "Proxmox Virtual Environment"; elif [ -f /etc/system-release ]; then echo "\\\$(sed 's, release .*$,,g' /etc/system-release)"; elif [ ! -z "\$(command -v lsb_release)" ]; then echo "\\\$(lsb_release -is 2> /dev/null || echo "${distribution}")"; else echo "${distribution}"; fi)"
GRUB_CMDLINE_LINUX_DEFAULT="\${cmdline} \${cmdline_extra}"
GRUB_CMDLINE_LINUX_RECOVERY="\${cmdline} init=/bin/bash"
GRUB_CMDLINE_XEN=""
GRUB_CMDLINE_XEN_DEFAULT="${xen_cmdline_extra}"
GRUB_TIMEOUT_STYLE=$(if [ ! -z "${grub_hide}" ] && [ "${grub_hide}" == "Yes" ]; then echo "\"hidden\""; else echo "\"menu\""; fi)
GRUB_TIMEOUT=$(if [ ! -z "${grub_hide}" ] && [ "${grub_hide}" == "Yes" ]; then echo "2"; else echo "5"; fi)
GRUB_DISABLE_OS_PROBER=true
GRUB_ENABLE_BLSCFG=false
GRUBDEFAULTS
if [ "${install_type}" == "image" ] && [ ! -z "${grub_disable_recordfail}" ] && [ "${grub_disable_recordfail}" == "Yes" ]; then
	echo -e '#!/bin/sh\nif [ -f /etc/grub.d/00_header ]; then sed -i "s@{recordfail}@{norecordfail}@g" /etc/grub.d/00_header; fi' > /etc/grub.d/00_disable_recordfail
	chmod 0755 /etc/grub.d/00_disable_recordfail
fi
if [ "${live}" == "Yes" ]; then echo -e "GRUB_DISABLE_SUBMENU=true\nGRUB_DISABLE_RECOVERY=true" >> /etc/default/grub; fi
if [ -d "/etc/default/grub.d" ]; then for cfgfile in /etc/default/grub.d/*.cfg; do echo '' > \\\${cfgfile}; done; fi
for i in \\\$(find /etc/grub.d | grep debian_theme); do chmod 0644 \\\$i; done
for i in \\\$(find /etc/grub.d | grep fallback_counting); do chmod 0644 \\\$i; done
for i in \\\$(find /etc/grub.d | grep menu_auto_hide); do chmod 0644 \\\$i; done
for i in \\\$(find /etc/grub.d | grep menu_show_once); do chmod 0644 \\\$i; done
for i in \\\$(find /etc/grub.d | grep reset_boot_success); do chmod 0644 \\\$i; done
REINSTALLBOOTLOADER
if [ "${install_type}" == "image" ]; then
	cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
for i in \\\$(find /etc/grub.d | grep uefi-firmware); do chmod 0644 \\\$i; done
REINSTALLBOOTLOADER
fi
cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
rm -rf /boot/efi/EFI
REINSTALLBOOTLOADER
if [ "${distribution}" == "Bazzite" ] || [ "${distribution}" == "Fedora-Atomic" ]; then
	if [ "${root_encryption}" == "Yes" ]; then
		if [ "${root_fstype}" == "btrfs" ]; then
			cmdline_root="root=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) rw rootflags=subvol=@"
		else
			cmdline_root="root=UUID=\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value ${root_partition})) rw"
		fi
	else
		if [ "${root_fstype}" == "btrfs" ]; then
			cmdline_root="root=UUID=\$(blkid -s UUID -o value ${root_partition}) rw rootflags=subvol=@"
		else
			cmdline_root="root=UUID=\$(blkid -s UUID -o value ${root_partition}) rw"
		fi
	fi
	for i in \$(echo \${cmdline_root} \${cmdline} \${cmdline_extra} | sed -e 's@ @\n@g'); do kargs="\${kargs} --append-if-missing=\${i}"; done
	cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
rpm-ostree kargs \${kargs}
echo -e 'add_drivers+=" 8250_dw aes atkbd btrfs cbc dm-crypt exfat ext4 fuse i8042 intel_lpss intel_lpss_pci loop nvme quota_v1 quota_v2 serio sha256 surface_aggregator surface_aggregator_registry surface_hid surface_hid_core usbhid xhci_pci "' > /etc/dracut.conf.d/99-linuxloops.conf
echo -e 'install_items+=" /etc/vconsole.conf /usr/bin/bash /usr/sbin/blkid /usr/sbin/cryptsetup /usr/bin/cut /usr/sbin/e2fsck /usr/bin/find /usr/bin/grep /usr/sbin/losetup /usr/bin/lsblk /usr/bin/ntfs-3g /usr/bin/ntfsfix /usr/bin/ps /usr/bin/setfont /usr/bin/setsid /usr/lib/systemd/systemd-sysroot-fstab-check "' >> /etc/dracut.conf.d/99-linuxloops.conf
echo 'hostonly=\"no\"' >> /etc/dracut.conf.d/99-linuxloops.conf
rpm-ostree initramfs --enable
curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/ostreedev/ostree/raw/refs/heads/main/src/boot/grub2/grub2-15_ostree -o /etc/grub.d/15_ostree
if [ "${install_type}" == "image" ]; then
	sed "s#ostree admin instutil grub2-generate#ostree admin instutil grub2-generate | sed 's|linux16 |linux |g' | sed 's|initrd16 |initrd $(if [ "${root_fstype}" == "btrfs" ]; then echo /@boot; fi)/linuxloops/linuxloops.img |g'$(if [ "${root_fstype}" == "btrfs" ]; then echo " | sed 's| /ostree| /@boot/ostree|g'"; fi)#g" /etc/grub.d/15_ostree > /etc/grub.d/15_ostree_linuxloops
else
	sed "s#ostree admin instutil grub2-generate#ostree admin instutil grub2-generate | sed 's|linux16 |linux |g' | sed 's|initrd16 |initrd |g'$(if [ "${root_fstype}" == "btrfs" ]; then echo " | sed 's| /ostree| /@boot/ostree|g'"; fi)#g" /etc/grub.d/15_ostree > /etc/grub.d/15_ostree_linuxloops
fi
chmod 0644 /etc/grub.d/15_ostree
chmod 0755 /etc/grub.d/15_ostree_linuxloops
mkdir /boot/grub2
ln -s ../loader/grub.cfg /boot/grub2/grub.cfg
mkdir -p /boot/efi/EFI/fedora
cat >/boot/efi/EFI/fedora/grub.cfg <<'EFI_GRUB_CFG'
search --no-floppy --root-dev-only --fs-uuid --set=dev \$(blkid -s UUID -o value ${boot_partition})
set prefix=(\\\$dev)$(if [ "${root_fstype}" == "btrfs" ]; then echo /@boot; fi)/grub2
export \\\$prefix
configfile \\\$prefix/grub.cfg
EFI_GRUB_CFG
bootupctl backend install /
REINSTALLBOOTLOADER
	chmod 0755 /boot/linuxloops/reinstall-bootloader
	/boot/linuxloops/reinstall-bootloader
	exit 0
elif [ -d /boot/grub2 ]; then
	cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
grub2-mkconfig -o /boot/grub2/grub.cfg
REINSTALLBOOTLOADER
	if [ "${distribution}" == "OpenSUSE" ]; then
		cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
shim-install --no-nvram
shim-install --removable --no-nvram
REINSTALLBOOTLOADER
	elif [ "${distribution}" == "Qubes" ]; then
cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
dnf --setopt=reposdir=/etc/yum.repos.d/ reinstall -y shim-* grub2-efi-* grub2-common
mkdir -p /boot/efi/EFI/BOOT
cp -r /boot/efi/EFI/qubes/* /boot/efi/EFI/BOOT/
mv /boot/efi/EFI/BOOT/grubx64.efi /boot/efi/EFI/BOOT/BOOTX64.EFI
REINSTALLBOOTLOADER
	else
		cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
dnf reinstall -y shim-* grub2-efi-* grub2-common
cp /boot/efi/EFI/"${bootloader_id}"/grubx64.efi /boot/efi/EFI/BOOT/grubx64.efi
cp /boot/efi/EFI/"${bootloader_id}"/grub.cfg /boot/efi/EFI/BOOT/grub.cfg
REINSTALLBOOTLOADER
	fi
	cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
find /boot/efi -name "*.rpmsave" -type f -delete
REINSTALLBOOTLOADER
	if [ "${distribution}" == "AlmaLinux" ] || [ "${distribution}" == "OpenSUSE" ] || [ "${distribution}" == "RockyLinux" ]; then
		chmod 0755 /boot/linuxloops/reinstall-bootloader
		/boot/linuxloops/reinstall-bootloader
		if [ -z "\$(find /boot/efi/EFI/BOOT/BOOTX64.EFI 2> /dev/null)" ]; then echo "Warning: The bootloader is not installed in the removable path."; fi
		if [ -z "\$(find /boot/efi/EFI/"${bootloader_id}"/"${bootloader_name}" 2> /dev/null)" ]; then echo "The bootloader is not correctly installed"; exit 1; fi
		exit 0
	fi
else
	if [ ! -z \$(command -v debconf-set-selections) ]; then
		cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
echo "grub-efi-amd64 grub2/update_nvram boolean false" | debconf-set-selections
echo "grub-efi-amd64 grub-efi/install_devices multiselect /dev/disk/by-uuid/\$(blkid -s UUID -o value "${efi_partition}")" | debconf-set-selections
REINSTALLBOOTLOADER
		if [ "${distribution}" != "Proxmox" ]; then
		cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
dpkg-divert --divert /usr/sbin/grub-install.real --rename /usr/sbin/grub-install
REINSTALLBOOTLOADER
		fi
		cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
cat >/usr/sbin/grub-install <<'GRUBINSTALL'
#!/bin/sh
grub-install.real "\\\$@" --bootloader-id="${bootloader_id}"
# Do not use removable as Ubuntu will install the live iso version in that case which has a specific GRUB configuration path
grub-install.real "\\\$@" --bootloader-id="BOOT"
rm -f /boot/efi/EFI/BOOT/BOOTX64.EFI
if [ -f /boot/efi/EFI/BOOT/shimx64.efi ]; then mv /boot/efi/EFI/BOOT/shimx64.efi /boot/efi/EFI/BOOT/BOOTX64.EFI; else mv /boot/efi/EFI/BOOT/grubx64.efi /boot/efi/EFI/BOOT/BOOTX64.EFI; fi
find /boot/efi -type f -iname fbx64.efi -exec rm {} \;
find /boot/efi -type f -iname bootx64.csv -exec rm {} \;
GRUBINSTALL
chmod 0755 /usr/sbin/grub-install
grub-install --target=x86_64-efi --efi-directory=/boot/efi
REINSTALLBOOTLOADER
	elif [ "${distribution}" == "Arch" ] || [ "${distribution}" == "Artix" ] || [ "${distribution}" == "BlendOS" ] || [ "${distribution}" == "CachyOS" ] || [ "${distribution}" == "KDE" ] || [ "${distribution}" == "Manjaro" ] || [ "${distribution}" == "SteamOS" ]; then
		cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
pacman -Syu --noconfirm --needed git fakeroot
git clone --depth=1 -b shim-signed https://github.com/archlinux/aur.git /tmp/shim-signed
chown -R 'nobody':'nobody' /tmp/shim-signed
sudo -u nobody bin/bash -c "cd /tmp/shim-signed && makepkg -s"
pacman -U --noconfirm /tmp/shim-signed/*.pkg.tar.*
mkdir -p /etc/pacman.d/hooks
cat >/etc/pacman.d/hooks/99-secureboot-grub.hook <<PACMANHOOK
[Trigger]
Operation = Install
Operation = Upgrade
Type = File
Target = usr/lib/grub/*

[Action]
Description = Installing GRUB with grub-install
Depends = grub
When = PostTransaction
Exec = /bin/sh -c secureboot-install
PACMANHOOK
cat >/usr/sbin/secureboot-install <<'SECUREBOOTINSTALL'
#!/bin/bash
set -e
grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --sbat=/usr/share/grub/sbat.csv --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo" --bootloader-id="${bootloader_id}"
mkdir -p /boot/efi/EFI/BOOT
cp /boot/efi/EFI/"${bootloader_id}"/grubx64.efi /boot/efi/EFI/BOOT/grubx64.efi
cp /usr/share/shim-signed/shimx64.efi /boot/efi/EFI/BOOT/BOOTX64.EFI
cp /usr/share/shim-signed/shimx64.efi /boot/efi/EFI/"${bootloader_id}"/shimx64.efi
cp /usr/share/shim-signed/mmx64.efi /boot/efi/EFI/BOOT/mmx64.efi
cp /usr/share/shim-signed/mmx64.efi /boot/efi/EFI/"${bootloader_id}"/mmx64.efi
if [ ! -z "\\\$(command -v sbverify)" ] && [ ! -z "\\\$(command -v sbattach)" ] && [ ! -z "\\\$(command -v sbsign)" ] && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ]; then
	for grubefi in \\\$(find /boot/efi/EFI/BOOT/grub.efi 2> /dev/null) \\\$(find /boot/efi/EFI/"${bootloader_id}"/grub.efi 2> /dev/null) \\\$(find /boot/efi/EFI/BOOT/grubx64.efi 2> /dev/null) \\\$(find /boot/efi/EFI/"${bootloader_id}"/grubx64.efi 2> /dev/null); do
		for sig in \\\$(sbverify --list \\\$grubefi | grep '^signature' | sed 's@signature @@g' | sort -r); do sbattach --signum \\\$sig --remove \\\$grubefi; done
		sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \\\$grubefi \\\$grubefi
	done
fi
SECUREBOOTINSTALL
chmod 0755 /usr/sbin/secureboot-install
secureboot-install
REINSTALLBOOTLOADER
	elif [ "${distribution}" == "Gentoo" ]; then
		cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
mkdir /tmp/grub
cat >/tmp/grub/sbat.csv <<'GRUBSBAT'
sbat,1,SBAT Version,sbat,1,https://github.com/rhboot/shim/blob/main/SBAT.md
grub,3,Free Software Foundation,grub,2:\\\$(grub-install -V | cut -d' ' -f3),https//www.gnu.org/software/grub/
grub.$(echo ${distribution} | tr [:upper:] [:lower:]),1,${distribution} Linux,grub,2:\\\$(grub-install -V | cut -d' ' -f3),https//www.gnu.org/software/grub/
GRUBSBAT
grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --sbat=/tmp/grub/sbat.csv --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --removable --sbat=/tmp/grub/sbat.csv --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
if [ -f /usr/share/shim/BOOTX64.EFI ]; then
	mv /boot/efi/EFI/BOOT/BOOTX64.EFI /boot/efi/EFI/BOOT/grubx64.efi
	cp /usr/share/shim/BOOTX64.EFI /boot/efi/EFI/BOOT/BOOTX64.EFI
	cp /usr/share/shim/BOOTX64.EFI /boot/efi/EFI/"${bootloader_id}"/shimx64.efi
	cp /usr/share/shim/mmx64.efi /boot/efi/EFI/BOOT/mmx64.efi
	cp /usr/share/shim/mmx64.efi /boot/efi/EFI/"${bootloader_id}"/mmx64.efi
fi
REINSTALLBOOTLOADER
	else
cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --removable --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
REINSTALLBOOTLOADER
	fi
cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
mkdir -p /boot/grub
grub-mkconfig -o /boot/grub/grub.cfg
REINSTALLBOOTLOADER
fi
cat >>/boot/linuxloops/reinstall-bootloader <<REINSTALLBOOTLOADER
if [ ! -z "\\\$(command -v sbverify)" ] && [ ! -z "\\\$(command -v sbattach)" ] && [ ! -z "\\\$(command -v sbsign)" ] && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ]; then
	for grubefi in \\\$(find /boot/efi/EFI/BOOT/grub.efi 2> /dev/null) \\\$(find /boot/efi/EFI/"${bootloader_id}"/grub.efi 2> /dev/null) \\\$(find /boot/efi/EFI/BOOT/grubx64.efi 2> /dev/null) \\\$(find /boot/efi/EFI/"${bootloader_id}"/grubx64.efi 2> /dev/null); do
			for sig in \\\$(sbverify --list "\\\$grubefi" | grep '^signature' | sed 's@signature @@g' | sort -r); do sbattach --signum "\\\$sig" --remove "\\\$grubefi"; done
			sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output "\\\$grubefi" "\\\$grubefi"
	done
fi
REINSTALLBOOTLOADER
chmod 0755 /boot/linuxloops/reinstall-bootloader
/boot/linuxloops/reinstall-bootloader
# Due to a bug with certain shim binaries, use the Ubuntu shim for initial key registration.
if [ "${distribution}" == "Debian" ] || [ "${distribution}" == "Devuan" ] || [ "${distribution}" == "Gentoo" ] || [ "${distribution}" == "LMDE" ] || [ "${distribution}" == "MX" ] || [ "${distribution}" == "PikaOS" ] || [ "${distribution}" == "Proxmox" ]; then
	mkdir /tmp/ubuntu_shim
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f http://archive.ubuntu.com/ubuntu/pool/main/s/shim-signed/shim-signed_1.59+15.8-0ubuntu2_amd64.deb -o /tmp/ubuntu_shim/shim.deb
	(cd /tmp/ubuntu_shim && ar p shim.deb data.tar.xz | tar -xJ)
	cp /tmp/ubuntu_shim/usr/lib/shim/shimx64.efi.signed.latest /boot/efi/EFI/BOOT/BOOTX64.EFI
	cp /tmp/ubuntu_shim/usr/lib/shim/shimx64.efi.signed.latest /boot/efi/EFI/"${bootloader_id}"/shimx64.efi
	cp /tmp/ubuntu_shim/usr/lib/shim/mmx64.efi /boot/efi/EFI/BOOT/mmx64.efi
	cp /tmp/ubuntu_shim/usr/lib/shim/mmx64.efi /boot/efi/EFI/"${bootloader_id}"/mmx64.efi
fi
if [ -z "\$(find /boot/efi/EFI/BOOT/BOOTX64.EFI 2> /dev/null)" ]; then echo "Warning: The bootloader is not installed in the removable path."; fi
if [ -z "\$(find /boot/efi/EFI/"${bootloader_id}"/"${bootloader_name}" 2> /dev/null)" ]; then echo "The bootloader is not correctly installed"; exit 1; fi
INSTALLEFI
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_bootloader
}

generate_install_live()
{
if [ ! "${live}" == "Yes" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/install_live <<INSTALLLIVE
#!/bin/bash
set -e
echo "live ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
cat >/etc/polkit-1/rules.d/49-nopasswd_live.rules <<'POLKIT'
polkit.addRule(function(action, subject) {
    if (subject.isInGroup("live")) {
        return polkit.Result.YES ;
    }
}) ;
POLKIT
cat >/usr/bin/linuxloops <<'LIVELAUNCHER'
#!/bin/bash
set -e
sudo curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/sebanc/linuxloops/raw/refs/heads/main/linuxloops -o /usr/bin/linuxloops.real || zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Please make sure you have internet connectivity before running this program.\n" 2>/dev/null
sudo chmod 0755 /usr/bin/linuxloops.real
bash /usr/bin/linuxloops.real "\${@}"
LIVELAUNCHER
chmod 0755 /usr/bin/linuxloops
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_noscreenlock.gschema.override <<'DCONF'
[org.cinnamon.desktop.screensaver]
lock-delay=0
lock-enabled=false
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/repart.d
echo -e '[Partition]\nType=linux-generic' > /etc/repart.d/50-root.conf
cat >/etc/systemd/system/live-configuration.service <<'LIVE_CONFIGURATION_SERVICE'
[Unit]
Description=Apply linuxloops live configuration
DefaultDependencies=no
After=systemd-remount-fs.service
Before=systemd-modules-load.service

[Service]
Type=oneshot
ExecStart=/bin/bash -c "/usr/bin/live-configuration"

[Install]
WantedBy=local-fs-pre.target
LIVE_CONFIGURATION_SERVICE
systemctl enable live-configuration.service
mkdir -p /boot/linuxloops
cat >/usr/bin/live-configuration <<'LIVE_CONFIGURATION_SCRIPT'
#!/bin/bash
variant=""
if grep -qi 'variant_wifi' /proc/cmdline; then variant="wifi"; fi

for i in \$(ls /etc/modprobe.d/broadcom*.conf) \$(ls /etc/modules-load.d/broadcom*.conf); do
	conf=\${i%.*}
	rm -f \${conf}.disabled
	mv \${conf}.conf \${conf}.disabled
done

if [ "\${variant}" == "wifi" ]; then
	for i in \$(ls /etc/modprobe.d/broadcom*.disabled) \$(ls /etc/modules-load.d/broadcom*.disabled); do
		conf=\${i%.*}
		mv \${conf}.disabled \${conf}.conf
	done
else
	echo -e "blacklist wl" > /etc/modprobe.d/live-configuration.conf
fi
LIVE_CONFIGURATION_SCRIPT
chmod 0755 /usr/bin/live-configuration
sed 's@"\\\${OS}"@"\${OS} (with additional wifi drivers)"@g' /etc/grub.d/10_linux > /etc/grub.d/10_linux_wifi
sed -i 's@\\\${GRUB_CMDLINE_LINUX}@\${GRUB_CMDLINE_LINUX} variant_wifi@g' /etc/grub.d/10_linux_wifi
chmod 0755 /etc/grub.d/10_linux_wifi
rm -rf /lib/firmware/bnx2x /lib/firmware/dpaa2 /lib/firmware/liquidio /lib/firmware/mellanox /lib/firmware/mrvl/prestera /lib/firmware/netronome /lib/firmware/qcom /lib/firmware/qed /lib/firmware/ti-connectivity
if [ "${distribution}" == "Linuxmint" ]; then
	rm -r /usr/share/icons/Bibata-Original*
	rm -r /usr/share/icons/Mint-X*
	DEBIAN_FRONTEND=noninteractive apt install --purge -y systemd-repart broadcom-sta-dkms firmware-b43-installer curl python3-venv python3-gi gir1.2-gtk-3.0 gir1.2-webkit2-4.1 xz-utils evince file-roller firefox gedit gparted language-selector-gnome qemu-guest-agent spice-vdagent
else
	DEBIAN_FRONTEND=noninteractive apt install --purge -y systemd-repart broadcom-sta-dkms firmware-b43-installer curl python3-venv python3-gi gir1.2-gtk-3.0 gir1.2-webkit2-4.1 xz-utils evince file-roller firefox-esr gedit gparted qemu-guest-agent spice-vdagent
fi
apt clean
sudo -u '${useraccount_name}' bash << 'INSTALLERICONS'
mkdir -p \$HOME/Desktop
cat >\$HOME/Desktop/linuxloops.desktop <<'LIVEDESKTOPICON'
[Desktop Entry]
Name=Linuxloops installer
Exec=linuxloops
Icon=system-software-install
Terminal=true
Type=Application
StartupNotify=false
LIVEDESKTOPICON
chmod 0755 \$HOME/Desktop/linuxloops.desktop
mkdir -p \$HOME/.local/share/applications
cat >\$HOME/.local/share/applications/linuxloops.desktop <<'LIVEMENUICON'
[Desktop Entry]
Name=Linuxloops installer
Exec=linuxloops
Icon=system-software-install
Terminal=true
Type=Application
Categories=System;Filesystem;
LIVEMENUICON
INSTALLERICONS
INSTALLLIVE
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_live
}

generate_cleanup()
{
cat >"${bootstrapdir}"/tmp/linuxloops/cleanup <<CLEANUP
#!/bin/bash
set -e
if [ ! -z "\$(command -v apt)" ]; then
	if [ "${distribution}" == "Elementary" ] || [ "${distribution}" == "Linuxmint" ] || [ "${distribution}" == "Neon" ] || [ "${distribution}" == "Pop" ] || [ "${distribution}" == "Ubuntu" ] || [ "${distribution}" == "Zorin" ]; then DEBIAN_FRONTEND=noninteractive apt install --purge -y \$(check-language-support -l ${packages_locale}); fi
	rm -f /etc/apt/apt.conf.d/99linuxloops
	DEBIAN_FRONTEND=noninteractive apt autoremove -y
elif [ ! -z "\$(command -v dnf)" ]; then
	if [ "${distribution}" == "Qubes" ]; then
		dnf --setopt=reposdir=/etc/yum.repos.d/ autoremove -y
	else
		dnf autoremove -y
	fi
elif [ ! -z "\$(command -v emerge)" ]; then
	emerge --depclean
	eselect news read new
elif [ ! -z "\$(command -v rpm-ostree)" ]; then
	echo "Cleaning up"
	rpm-ostree cleanup --base
elif [ ! -z "\$(command -v zypper)" ]; then
	sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
fi
rm -rf /usr/share/xsessions/lightdm-xsession.desktop /usr/share/xsessions/Xsession.desktop
CLEANUP
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/cleanup
}

generate_efi_entry()
{
cat >"${bootstrapdir}"/tmp/linuxloops/efi_entry <<EFIENTRY
#!/bin/bash
set -e
if ! mountpoint -q /sys/firmware/efi/efivars; then exit 0; fi
if [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "Tails" ]; then
	if [ "${install_type}" == "disk" ] && [ -f /sys/block/\$(echo "${destination}" | sed 's@/dev/@@g')/removable ] && [ "\$(cat /sys/block/\$(echo "${destination}" | sed 's@/dev/@@g')/removable)" -eq 0 ] && [ ! -z \$(command -v efibootmgr) ]; then
		echo "Creating EFI boot manager entry..."
		if [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ]; then
			efibootmgr -c -d "${destination}" -p 12 -L "${distribution}" -l "\efi\\${bootloader_id}\\${bootloader_name}"
		else
			efibootmgr -c -d "${destination}" -p 1 -L "${distribution}" -l "\efi\\${bootloader_id}\\${bootloader_name}"
		fi
	fi
else
	if [ "${install_type}" == "disk" ] && [ -f /sys/block/\$(echo "${destination}" | sed 's@/dev/@@g')/removable ] && [ "\$(cat /sys/block/\$(echo "${destination}" | sed 's@/dev/@@g')/removable)" -eq 0 ] && [ ! -z \$(command -v efibootmgr) ]; then
		echo "Creating EFI boot manager entry..."
		efibootmgr -c -d "${destination}" -p 1 -L "${distribution}" -l "\efi\\${bootloader_id}\\${bootloader_name}"
	fi
fi
EFIENTRY
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/efi_entry
}

generare_install_userpw()
{
if [ "${distribution}" == "BlissOS" ] || [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "Tails" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/install_userpw <<INSTALLUSERPW
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:/usr/lib64:/usr/lib/x86_64-linux-gnu:/usr/lib:/lib64:/lib/x86_64-linux-gnu:/lib
if [ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ]; then mkdir /mnt/tmp/linuxloops; fi
cat >/mnt/tmp/linuxloops/set_userpw <<'SETUSERPW'
#!/bin/bash
set -e
echo -e '${useraccount_password}\n${useraccount_password}' | passwd '${useraccount_name}'
if [ "${distribution}" == "Proxmox" ]; then echo -e '${useraccount_password}\n${useraccount_password}' | passwd root; fi
SETUSERPW
chmod 0755 /mnt/tmp/linuxloops/set_userpw
if [ "${distribution}" == "BlendOS" ]; then
	cat >>/mnt/tmp/linuxloops/set_userpw <<BLENDOS_AKSHARA
akshara update
if [ "${environment}" != "None" ]; then if [ ! -f /.update_rootfs/usr/share/xsessions/${default_session}.desktop ] && [ ! -f /.update_rootfs/usr/share/wayland-sessions/${default_session}.desktop ]; then echo "Default session ${default_session} not found."; exit 1; fi; fi
cp /.update_rootfs/etc/mkinitcpio.conf.d/* /etc/mkinitcpio.conf.d/
cp /.update_rootfs/etc/mkinitcpio.d/* /etc/mkinitcpio.d/
rm -rf /lib/modules
cp -r /.update_rootfs/lib/modules /lib/
mkinitcpio -P
BLENDOS_AKSHARA
fi
if [ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ]; then
	sed -i '1d' /mnt/tmp/linuxloops/set_userpw
	sudo -u temp bash << 'NIXOSSETPW'
source \$HOME/.nix-profile/etc/profile.d/nix.sh
sudo \$(command -v nixos-enter) << 'NIXOSCHROOT'
set -e
/tmp/linuxloops/set_userpw
NIXOSCHROOT
NIXOSSETPW
rm -rf /mnt/tmp/*
elif [ "${systemd_init}" == "Yes" ]; then
	nsenter --pid=/tmp/pid_ns unshare --mount-proc --root=/mnt bash /tmp/linuxloops/set_userpw
	if [ -f /tmp/linuxloops/selinux_fix ]; then nsenter --pid=/tmp/pid_ns unshare --mount-proc --root=/mnt bash /tmp/linuxloops/selinux_fix; fi
else
	chroot /mnt /tmp/linuxloops/set_userpw
	if [ -f /tmp/linuxloops/selinux_fix ]; then chroot /mnt /tmp/linuxloops/selinux_fix; fi
fi
rm -f /mnt/tmp/linuxloops/set_userpw
INSTALLUSERPW
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/install_userpw
}

generate_selinux_fix()
{
if [ "${distribution}" != "AlmaLinux" ] && [ "${distribution}" != "Bazzite" ] && [ "${distribution}" != "Fedora" ] && [ "${distribution}" != "Fedora-Atomic" ] && [ "${distribution}" != "RockyLinux" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/selinux_fix <<SELINUXFIX
#!/bin/bash
set -e
mkdir -p /var/lib/bluetooth /var/lib/NetworkManager
chmod 0700 /var/lib/bluetooth /var/lib/NetworkManager
if [ "${distribution}" == "Bazzite" ] || [ "${distribution}" == "Fedora-Atomic" ]; then
	ostree admin finalize-staged
	sed -i "/(ostree:1)/,/}/d" /boot/loader/grub.cfg
	echo "Applying selinux labels..."
	echo '/var/swap(/.*)?       system_u:object_r:swapfile_t:s0' >> /etc/selinux/targeted/contexts/files/file_contexts.local
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts /boot
	for i in \$(ls /ostree/deploy/fedora/deploy | grep -v '\.origin'); do
		setfiles -r /ostree/deploy/fedora/deploy/\${i} -c /ostree/deploy/fedora/deploy/\${i}/etc/selinux/targeted/policy/policy.* /ostree/deploy/fedora/deploy/\${i}/etc/selinux/targeted/contexts/files/file_contexts /ostree/deploy/fedora/deploy/\${i}
	done
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts /etc
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts /var
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts.homedirs /var/home
	if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
		setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts.local /var/swap
	fi
	$(if [ ${#extra_partitions[@]} -ne 0 ]; then
		for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
			cat <<RELABEL_CUSTOM_MOUNT
setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts $(if [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home/*" ]] && [ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root" ] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/root/*" ]] && [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/var/*" ]]; then echo /var; fi)$(get_extra_partitions_attribute mountpoint ${i})
RELABEL_CUSTOM_MOUNT
		done
	fi)
else
	echo "Applying selinux labels..."
	echo '/var/swap(/.*)?       system_u:object_r:swapfile_t:s0' >> /etc/selinux/targeted/contexts/files/file_contexts.local
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts /
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts /boot
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts.homedirs /home
	if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
		setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts.local /var/swap
	fi
	$(if [ ${#extra_partitions[@]} -ne 0 ]; then
		for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
			if [[ ! "$(get_extra_partitions_attribute mountpoint ${i})" == "/home/*" ]]; then
				cat <<RELABEL_CUSTOM_MOUNT
setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts.homedirs $(get_extra_partitions_attribute mountpoint ${i})
RELABEL_CUSTOM_MOUNT
			else
				cat <<RELABEL_CUSTOM_MOUNT
setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts $(get_extra_partitions_attribute mountpoint ${i})
RELABEL_CUSTOM_MOUNT
			fi
		done
	fi)
fi
SELINUXFIX
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/selinux_fix
}

generate_exit_chroot()
{
if [ "${distribution}" == "BlissOS" ] || [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "Tails" ]; then return; fi
cat >"${bootstrapdir}"/tmp/linuxloops/exit_chroot <<EXITCHROOT
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:/usr/lib64:/usr/lib/x86_64-linux-gnu:/usr/lib:/lib64:/lib/x86_64-linux-gnu:/lib
for ROOT in \$(find /proc/*/root 2>/dev/null); do
	LINK="\$(readlink -f \${ROOT})"
	if echo "\${LINK}" | grep -q /mnt; then
		PID=\$(basename \$(dirname "\${ROOT}"))
		kill -STOP \${PID} 2>/dev/null
	fi
done
sleep 2
for ROOT in \$(find /proc/*/root 2>/dev/null); do
	LINK="\$(readlink -f \${ROOT})"
	if echo "\${LINK}" | grep -q /mnt; then
		PID=\$(basename \$(dirname "\${ROOT}"))
		kill -9 \${PID} 2>/dev/null
	fi
done
sleep 5
if mountpoint -q /mnt/tmp/linuxloops; then umount /mnt/tmp/linuxloops; fi
rm -rf /mnt/tmp/linuxloops
if mountpoint -q /mnt/tmp; then umount /mnt/tmp; fi
if mountpoint -q /mnt/run/keys; then umount /mnt/run/keys; fi
if mountpoint -q /mnt/run; then umount /mnt/run; fi
if mountpoint -q /mnt/dev/shm; then umount /mnt/dev/shm; fi
if mountpoint -q /mnt/dev/pts; then umount /mnt/dev/pts; fi
if mountpoint -q /mnt/dev/console; then umount /mnt/dev/console; fi
if mountpoint -q /mnt/dev; then umount /mnt/dev; fi
if mountpoint -q /mnt/sys/module/apparmor; then umount /mnt/sys/module/apparmor; fi
if mountpoint -q /mnt/sys/firmware/efi/efivars; then umount /mnt/sys/firmware/efi/efivars; fi
if mountpoint -q /mnt/sys; then umount /mnt/sys; fi
if mountpoint -q /mnt/proc/sys; then umount /mnt/proc/sys; fi
if mountpoint -q /mnt/proc; then umount /mnt/proc; fi
if mountpoint -q /mnt/boot/efi; then umount /mnt/boot/efi; fi
if [ -f /tmp/linuxloops/efi_loop ]; then losetup -d \$(cat /tmp/linuxloops/efi_loop); fi
if mountpoint -q /mnt/boot; then umount /mnt/boot; fi
if [ -f /tmp/linuxloops/boot_loop ]; then losetup -d \$(cat /tmp/linuxloops/boot_loop); fi
$(if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		cat <<UMOUNTPARTITION
if mountpoint -q "/mnt$(get_extra_partitions_attribute mountpoint ${i})"; then umount "/mnt$(get_extra_partitions_attribute mountpoint ${i})"; fi
if mountpoint -q "/mnt/var$(get_extra_partitions_attribute mountpoint ${i})"; then umount "/mnt/var$(get_extra_partitions_attribute mountpoint ${i})"; fi
UMOUNTPARTITION
	done
fi)
if mountpoint -q /mnt/sysroot; then umount /mnt/sysroot; fi
if mountpoint -q /mnt/var/swap; then umount /mnt/var/swap; fi
if mountpoint -q /mnt/root; then umount /mnt/root; fi
if mountpoint -q /mnt/home; then umount /mnt/home; fi
if mountpoint -q /mnt/var; then umount /mnt/var; fi
if mountpoint -q /mnt/efi; then umount /mnt/efi; fi
if mountpoint -q /mnt; then umount /mnt; fi
if mountpoint -q /atomic/boot/efi; then umount /atomic/boot/efi; fi
if mountpoint -q /atomic/boot; then umount /atomic/boot; fi
$(if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		cat <<UMOUNTPARTITION
if mountpoint -q "/atomic$(get_extra_partitions_attribute mountpoint ${i})"; then umount "/atomic$(get_extra_partitions_attribute mountpoint ${i})"; fi
UMOUNTPARTITION
	done
fi)
if mountpoint -q /atomic/var/swap; then umount /atomic/var/swap; fi
if mountpoint -q /atomic/root; then umount /atomic/root; fi
if mountpoint -q /atomic/home; then umount /atomic/home; fi
if mountpoint -q /atomic; then umount /atomic; fi
EXITCHROOT
chmod 0755 "${bootstrapdir}"/tmp/linuxloops/exit_chroot
}

end_bootstrap()
{
rm -f "${bootstrapdir}"/tmp/linuxloops/setup_and_mount_rootfs "${bootstrapdir}"/tmp/linuxloops/install_userpw "${chrootdir}"/tmp/linuxloops/set_userpw
for ROOT in $(find /proc/*/root 2>/dev/null); do
	LINK="$(readlink -f ${ROOT})"
	if echo "${LINK}" | grep -q "${bootstrapdir}"; then
		PID=$(basename $(dirname "${ROOT}"))
		kill -STOP ${PID} 2>/dev/null
	fi
done
sleep 2
for ROOT in $(find /proc/*/root 2>/dev/null); do
	LINK="$(readlink -f ${ROOT})"
	if echo "${LINK}" | grep -q "${bootstrapdir}"; then
		PID=$(basename $(dirname "${ROOT}"))
		kill -9 ${PID} 2>/dev/null
	fi
done
sleep 5
if mountpoint -q "${chrootdir}"/tmp/linuxloops; then umount "${chrootdir}"/tmp/linuxloops; fi
if mountpoint -q "${chrootdir}"/tmp; then umount "${chrootdir}"/tmp; fi
if mountpoint -q "${chrootdir}"/run/keys; then umount "${chrootdir}"/run/keys; fi
if mountpoint -q "${chrootdir}"/run; then umount "${chrootdir}"/run; fi
if mountpoint -q "${chrootdir}"/dev/shm; then umount "${chrootdir}"/dev/shm; fi
if mountpoint -q "${chrootdir}"/dev/pts; then umount "${chrootdir}"/dev/pts; fi
if mountpoint -q "${chrootdir}"/dev/console; then umount "${chrootdir}"/dev/console; fi
if mountpoint -q "${chrootdir}"/dev; then umount "${chrootdir}"/dev; fi
if mountpoint -q "${chrootdir}"/sys/module/apparmor; then umount "${chrootdir}"/sys/module/apparmor; fi
if mountpoint -q "${chrootdir}"/sys/firmware/efi/efivars; then umount "${chrootdir}"/sys/firmware/efi/efivars; fi
if mountpoint -q "${chrootdir}"/sys; then umount "${chrootdir}"/sys; fi
if mountpoint -q "${chrootdir}"/proc/sys; then umount "${chrootdir}"/proc/sys; fi
if mountpoint -q "${chrootdir}"/proc; then umount "${chrootdir}"/proc; fi
if mountpoint -q "${chrootdir}"/boot/efi; then umount "${chrootdir}"/boot/efi; fi
if mountpoint -q "${chrootdir}"/boot; then umount "${chrootdir}"/boot; fi
if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		if mountpoint -q "${chrootdir}$(get_extra_partitions_attribute mountpoint ${i})"; then umount "${chrootdir}$(get_extra_partitions_attribute mountpoint ${i})"; fi
		if mountpoint -q "${chrootdir}/var$(get_extra_partitions_attribute mountpoint ${i})"; then umount "${chrootdir}/var$(get_extra_partitions_attribute mountpoint ${i})"; fi
	done
fi
if mountpoint -q "${chrootdir}"/sysroot; then umount "${chrootdir}"/sysroot; fi
if mountpoint -q "${chrootdir}"/var/swap; then umount "${chrootdir}"/var/swap; fi
if mountpoint -q "${chrootdir}"/root; then umount "${chrootdir}"/root; fi
if mountpoint -q "${chrootdir}"/home; then umount "${chrootdir}"/home; fi
if mountpoint -q "${chrootdir}"/var; then umount "${chrootdir}"/var; fi
if mountpoint -q "${chrootdir}"/efi; then umount "${chrootdir}"/efi; fi
if mountpoint -q "${chrootdir}"; then umount "${chrootdir}"; fi
if mountpoint -q "${bootstrapdir}"/atomic/boot/efi; then umount "${bootstrapdir}"/atomic/boot/efi; fi
if mountpoint -q "${bootstrapdir}"/atomic/boot; then umount "${bootstrapdir}"/atomic/boot; fi
if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		if mountpoint -q "${bootstrapdir}/atomic$(get_extra_partitions_attribute mountpoint ${i})"; then umount "${bootstrapdir}/atomic$(get_extra_partitions_attribute mountpoint ${i})"; fi
	done
fi
if mountpoint -q "${bootstrapdir}"/atomic/var/swap; then umount "${bootstrapdir}"/atomic/var/swap; fi
if mountpoint -q "${bootstrapdir}"/atomic/root; then umount "${bootstrapdir}"/atomic/root; fi
if mountpoint -q "${bootstrapdir}"/atomic/home; then umount "${bootstrapdir}"/atomic/home; fi
if mountpoint -q "${bootstrapdir}"/atomic; then umount "${bootstrapdir}"/atomic; fi
if ([ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ]) && mountpoint -q "${chrootdir}"; then umount "${chrootdir}"; fi
if mountpoint -q "${bootstrapdir}"/tmp/linuxloops; then umount "${bootstrapdir}"/tmp/linuxloops; fi
if mountpoint -q "${bootstrapdir}"/isomount/data; then umount "${bootstrapdir}"/isomount/data; fi
if mountpoint -q "${bootstrapdir}"/isomount/efi; then umount "${bootstrapdir}"/isomount/efi; fi
if mountpoint -q "${bootstrapdir}"/isomount/iso; then umount "${bootstrapdir}"/isomount/iso; fi
if mountpoint -q "${bootstrapdir}"/isomount/roota; then umount "${bootstrapdir}"/isomount/roota; fi
if mountpoint -q "${bootstrapdir}"/isomount/rootc; then umount "${bootstrapdir}"/isomount/rootc; fi
if mountpoint -q "${bootstrapdir}"/isomount/tmp; then umount "${bootstrapdir}"/isomount/tmp; fi
if mountpoint -q "${bootstrapdir}"/isomount; then umount "${bootstrapdir}"/isomount; fi
if mountpoint -q "${bootstrapdir}"/tmp/pid_ns; then umount "${bootstrapdir}"/tmp/pid_ns; fi
if mountpoint -q "${bootstrapdir}"/tmp; then umount "${bootstrapdir}"/tmp; fi
if mountpoint -q "${bootstrapdir}"/run; then umount "${bootstrapdir}"/run; fi
if mountpoint -q "${bootstrapdir}"/dev/shm; then umount "${bootstrapdir}"/dev/shm; fi
if mountpoint -q "${bootstrapdir}"/dev/pts; then umount "${bootstrapdir}"/dev/pts; fi
if mountpoint -q "${bootstrapdir}"/dev; then umount "${bootstrapdir}"/dev; fi
if mountpoint -q "${bootstrapdir}"/sys/firmware/efi/efivars; then umount "${bootstrapdir}"/sys/firmware/efi/efivars; fi
if mountpoint -q "${bootstrapdir}"/sys; then umount "${bootstrapdir}"/sys; fi
if mountpoint -q "${bootstrapdir}"/proc; then umount "${bootstrapdir}"/proc; fi
if mountpoint -q "${bootstrapdir}"; then umount "${bootstrapdir}"; fi
if mountpoint -q "${homebinddir}"; then umount "${homebinddir}"; fi
if ! mountpoint -q "${homebinddir}"; then rm -r "${homebinddir}"; fi
if [ ${#extra_partitions[@]} -ne 0 ]; then
	for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
		if [ -b /dev/mapper/luks-"$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")" ]; then cryptsetup luksClose luks-"$(blkid -s UUID -o value "${partition_path}$(( ${i} + 4 ))")"; fi
	done
fi
if [ -b /dev/mapper/luks-"$(blkid -s UUID -o value "${root_partition}")" ]; then cryptsetup luksClose luks-"$(blkid -s UUID -o value "${root_partition}")"; fi
if [ "${install_type}" == "image" ] && [ -b "${destination_device}" ]; then losetup -d "${destination_device}"; fi
for removedir in "${linuxloopsdir}"/tmp/*; do if [ -d "${removedir}" ] && ! mountpoint -q "${removedir}"; then rm -rf "${removedir}"; fi; done
if [ ! -z "${brunch}" ] || [ ! -z "${chromeos}" ]; then for removedir in /usr/local/tmp/linuxloops/*; do if [ -d "${removedir}" ] && ! mountpoint -q "${removedir}"; then rm -rf "${removedir}"; fi; done; fi
if mountpoint -q "${linuxloopsdir}"/cache/iso/rootfs; then umount "${linuxloopsdir}"/cache/iso/rootfs; fi
if mountpoint -q "${linuxloopsdir}"/cache/iso/level1; then umount "${linuxloopsdir}"/cache/iso/level1; fi
if mountpoint -q "${linuxloopsdir}"/cache/iso/level2; then umount "${linuxloopsdir}"/cache/iso/level2; fi
}

exit_with_error()
{
if [ ! -z "${gui}" ]; then
	gui_launch -m messagebox -t "Error" -q "Installation failed: ${1}" 2>/dev/null
else
	echo -e "${1}\nInstallation failed."
fi
exit 1
}

download_bootstrap()
{
local skip_gpg=0
sudo -u ${SUDO_USER} mkdir -p "${linuxloopsdir}"/cache "${linuxloopsdir}"/gnupg
sudo -u ${SUDO_USER} chmod 0700 "${linuxloopsdir}"/gnupg
if [ "${1}" == "iso" ]; then
	echo "Downloading ${distribution} iso image from ${2}"
	for i in 1 .. 3; do
		if sudo -u ${SUDO_USER} curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f "${2}" -o "${linuxloopsdir}"/cache/"${distribution}".iso; then
			sudo -u ${SUDO_USER} curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f ${iso_sha256sum} -o "${linuxloopsdir}"/cache/"${distribution}".iso.sha256sum
			sudo -u ${SUDO_USER} sed "s@$(basename ${2})@${linuxloopsdir}/cache/${distribution}.iso@g" "${linuxloopsdir}"/cache/"${distribution}".iso.sha256sum > "${linuxloopsdir}"/cache/"${distribution}".iso.sha256sum.mod
			if sha256sum -c "${linuxloopsdir}"/cache/"${distribution}".iso.sha256sum.mod; then
				echo "sha256sum verification succeeded"
				break
			else
				echo "sha256sum verification failed, retrying download..."
			fi
		fi
		if [ "${i}" -eq 3 ]; then if [ "${install_type}" == "image" ]; then losetup -d "${destination_device}"; fi; exit_with_error "Download of ${distribution} iso image from ${2} failed"; fi
	done
	if [ -z "$(command -v gpg)" ] || [ -z "$(command -v dirmngr)" ]; then
		echo "Warning: iso cannot be verified as gpg is not available."
		skip_gpg=1
	elif [ -z "${iso_signature}" ] || [ -z "${master_key}" ]; then
		echo "Warning: iso cannot be verified as no signature or master key provided."
		skip_gpg=1
	else
		echo "Importing master key"
		sudo -u ${SUDO_USER} gpg --homedir "${linuxloopsdir}"/gnupg --keyserver hkp://keyserver.ubuntu.com:80 --recv "${master_key}"
		echo "Downloading iso signature"
		sudo -u ${SUDO_USER} curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f ${iso_signature} -o "${linuxloopsdir}"/cache/"${distribution}".iso.asc
		echo "Verifying iso signature"
	fi
	if [ ${skip_gpg} -eq 1 ] || sudo -u ${SUDO_USER} gpg --homedir "${linuxloopsdir}"/gnupg --verify "${linuxloopsdir}"/cache/"${distribution}".iso.asc "${linuxloopsdir}"/cache/"${distribution}".iso; then
		if [ ! -z "${4}" ]; then
			rm -rf "${linuxloopsdir}"/cache/iso
			sudo -u ${SUDO_USER} mkdir -p "${linuxloopsdir}"/cache/iso/rootfs "${linuxloopsdir}"/cache/iso/level1 "${linuxloopsdir}"/cache/iso/level2
			mount "${linuxloopsdir}"/cache/"${distribution}".iso "${linuxloopsdir}"/cache/iso/level2
			mount "${linuxloopsdir}"/cache/iso/level2"${3}" "${linuxloopsdir}"/cache/iso/level1
			mount "${linuxloopsdir}"/cache/iso/level1"${4}" "${linuxloopsdir}"/cache/iso/rootfs
			cp -aT "${linuxloopsdir}"/cache/iso/rootfs "${bootstrapdir}"
			if [ "${distribution}" == "Qubes" ]; then
				mkdir -p "${bootstrapdir}"/source
				cp -a "${linuxloopsdir}"/cache/iso/level2/Packages "${bootstrapdir}"/source/
				cp -a "${linuxloopsdir}"/cache/iso/level2/repodata "${bootstrapdir}"/source/
			fi
			umount "${linuxloopsdir}"/cache/iso/rootfs
			umount "${linuxloopsdir}"/cache/iso/level1
			umount "${linuxloopsdir}"/cache/iso/level2
		elif  [ ! -z "${3}" ]; then
			mkdir -p "${linuxloopsdir}"/cache/iso/rootfs "${linuxloopsdir}"/cache/iso/level1
			mount "${linuxloopsdir}"/cache/"${distribution}".iso "${linuxloopsdir}"/cache/iso/level1
			mount "${linuxloopsdir}"/cache/iso/level1"${3}" "${linuxloopsdir}"/cache/iso/rootfs
			cp -aT "${linuxloopsdir}"/cache/iso/rootfs "${bootstrapdir}"
			umount "${linuxloopsdir}"/cache/iso/rootfs
			umount "${linuxloopsdir}"/cache/iso/level1
		else
			mkdir -p "${linuxloopsdir}"/cache/iso/rootfs
			mount "${linuxloopsdir}"/cache/"${distribution}".iso "${linuxloopsdir}"/cache/iso/rootfs
			cp -aT "${linuxloopsdir}"/cache/iso/rootfs "${bootstrapdir}"
			umount "${linuxloopsdir}"/cache/iso/rootfs	
		fi
		rm "${linuxloopsdir}"/cache/"${distribution}".iso*
		return 0
	else
		echo "iso signature verification failed, will not proceed."
		rm "${linuxloopsdir}"/cache/"${distribution}".iso*
	fi
elif [ "${1}" == "lxc" ]; then
	master_key=E7FB0CAEC8173D669066514CBAEFF88C22F6E216
	cur_speed=0; for lxcserver in https://sgp1lxdmirror01.do.letsbuildthe.cloud https://sfo3lxdmirror01.do.letsbuildthe.cloud https://fra1lxdmirror01.do.letsbuildthe.cloud; do if ! avg_speed=$(curl -4fsSL -m 5 -r 0-1048576 -w '%{speed_download}' -o /dev/null --url "${lxcserver}/images" 2> /dev/null); then avg_speed=0; fi; echo Download speed rating for mirror ${lxcserver} is ${avg_speed}; if [ ${avg_speed} -gt ${cur_speed} ]; then cur_speed=${avg_speed}; lxc_mirror=${lxcserver}; fi; done; echo Using mirror ${lxc_mirror}
	available_builds=$(curl -Ls ${lxc_mirror}/images/"${2}"/"${3}"/amd64/"${4}"/ | tr '>' '\n' | grep '<a href' | cut -d '=' -f2 | cut -d'"' -f2 | cut -d'/' -f1 | sort -r)
	for build in ${available_builds}; do
		if [ "${build}" == "" ] || [ "${build}" == ".." ] || ! curl -L --output /dev/null --silent --head --fail ${lxc_mirror}/images/"${2}"/"${3}"/amd64/"${4}"/"${build}"/rootfs.tar.xz; then continue; fi
		echo "Downloading lxc rootfs checksum"
		rm -f "${linuxloopsdir}"/cache/"${2}"-SHA256SUMS
		sudo -u ${SUDO_USER} curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f ${lxc_mirror}/images/"${2}"/"${3}"/amd64/"${4}"/"${build}"/SHA256SUMS -o "${linuxloopsdir}"/cache/"${2}"-SHA256SUMS
		if [ -f "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz ] && [ -f "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz.asc ] && [ "$(sha256sum ${linuxloopsdir}/cache/${2}-rootfs.tar.xz | cut -d' ' -f1)" == "$(cat ${linuxloopsdir}/cache/${2}-SHA256SUMS | grep rootfs.tar.xz | cut -d' ' -f1)" ]; then
			if [ -z "$(command -v gpg)" ] || [ -z "$(command -v dirmngr)" ] || [ -z "${master_key}" ]; then skip_gpg=1; fi
			if ([ ${skip_gpg} -eq 1 ] || sudo -u ${SUDO_USER} gpg --homedir "${linuxloopsdir}"/gnupg --verify "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz.asc "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz) && tar xf "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz -C "${bootstrapdir}"; then
				echo "Using cached lxc rootfs."
				rm -f "${linuxloopsdir}"/cache/"${2}"-SHA256SUMS
				return 0
			fi
		fi
		rm -f "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz*
		echo "Downloading lxc rootfs image from ${lxc_mirror}/images/${2}/${3}/amd64/${4}/${build}/rootfs.tar.xz..."
		if ! sudo -u ${SUDO_USER} curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f ${lxc_mirror}/images/"${2}"/"${3}"/amd64/"${4}"/"${build}"/rootfs.tar.xz -o "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz; then if [ "${install_type}" == "image" ]; then losetup -d "${destination_device}"; fi; exit_with_error "Download of ${2} lxc image from ${lxc_mirror}/images/${2}/${3}/amd64/${4}/${build}/rootfs.tar.xz failed."; fi
		echo "Verifying lxc rootfs checksum"
		if [ "$(sha256sum ${linuxloopsdir}/cache/${2}-rootfs.tar.xz | cut -d' ' -f1)" == "$(cat ${linuxloopsdir}/cache/${2}-SHA256SUMS | grep rootfs.tar.xz | cut -d' ' -f1)" ]; then
			if [ -z "$(command -v gpg)" ] || [ -z "$(command -v dirmngr)" ]; then
				echo "Warning: lxc rootfs cannot be verified as gpg is not available."
				skip_gpg=1
			elif [ -z "${master_key}" ]; then
				echo "Warning: lxc rootfs cannot be verified as no master key provided."
				skip_gpg=1
			else
				echo "Importing lxc master key"
				sudo -u ${SUDO_USER} gpg --homedir "${linuxloopsdir}"/gnupg --keyserver hkp://keyserver.ubuntu.com:80 --recv "${master_key}"
				echo "Downloading lxc rootfs signature"
				sudo -u ${SUDO_USER} curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f ${lxc_mirror}/images/"${2}"/"${3}"/amd64/"${4}"/"${build}"/rootfs.tar.xz.asc -o "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz.asc
				echo "Verifying lxc rootfs signature"
			fi
			if [ ${skip_gpg} -eq 1 ] || sudo -u ${SUDO_USER} gpg --homedir "${linuxloopsdir}"/gnupg --verify "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz.asc "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz; then
				if tar xf "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz -C "${bootstrapdir}"; then
					echo "lxc rootfs successfylly extracted."
					rm -f "${linuxloopsdir}"/cache/"${2}"-SHA256SUMS
					return 0
				else
					echo "Failed to extract lxc rootfs, trying next image."
				fi
			else
				echo "signature verification failed, trying next image."
			fi
		else
			echo "sha256sum verification failed, trying next image."
		fi
		rm -f "${linuxloopsdir}"/cache/"${2}"-rootfs.tar.xz* "${linuxloopsdir}"/cache/"${2}"-SHA256SUMS
	done
elif [ "${1}" == "rootfs-xz" ]; then
	echo "Downloading rootfs image checksum"
	rm -f "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum*
	sudo -u ${SUDO_USER} curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f ${rootfs_sha256sum} -o "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum
	if [ "${distribution}" == "OpenSUSE" ]; then
		sudo -u ${SUDO_USER} sed "s@ opensuse.*@${linuxloopsdir}/cache/${distribution}-rootfs.tar.xz@g" "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum > "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum.mod
	else
		sudo -u ${SUDO_USER} sed "s@$(basename ${2})@${linuxloopsdir}/cache/${distribution}-rootfs.tar.xz@g" "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum > "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum.mod
	fi
	if [ -f "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz ] && [ -f "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.asc ] && sha256sum -c "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum.mod; then
		if [ -z "$(command -v gpg)" ] || [ -z "$(command -v dirmngr)" ] || [ -z "${master_key}" ]; then skip_gpg=1; fi
		if ([ ${skip_gpg} -eq 1 ] || sudo -u ${SUDO_USER} gpg --homedir "${linuxloopsdir}"/gnupg --verify "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.asc "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz"${gpg_check_extension}") && tar xf "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz -C "${bootstrapdir}"; then
			echo "Using cached xz rootfs."
			rm -f "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum*
			return 0	
		fi
	fi
	rm -f "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz{,.asc}
	echo "Downloading ${distribution} rootfs image from ${2}"
	for i in 1 .. 3; do
		if sudo -u ${SUDO_USER} curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f "${2}" -o "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz; then
			if sha256sum -c "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum.mod; then
				echo "sha256sum verification succeeded"
				break
			else
				echo "sha256sum verification failed, retrying download..."
			fi
		fi
		if [ "${i}" -eq 3 ]; then if [ "${install_type}" == "image" ]; then losetup -d "${destination_device}"; fi; exit_with_error "Download of ${distribution} rootfs from ${2} failed"; fi
	done
	if [ -z "$(command -v gpg)" ] || [ -z "$(command -v dirmngr)" ]; then
		echo "Warning: rootfs cannot be verified as gpg is not available."
		skip_gpg=1
	elif [ -z "${rootfs_signature}" ] || [ -z "${master_key}" ]; then
		echo "Warning: rootfs cannot be verified as no signature or master key provided."
		skip_gpg=1
	else
		echo "Importing master key"
		sudo -u ${SUDO_USER} gpg --homedir "${linuxloopsdir}"/gnupg --keyserver hkp://keyserver.ubuntu.com:80 --recv "${master_key}"
		echo "Downloading rootfs signature"
		sudo -u ${SUDO_USER} curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f ${rootfs_signature} -o "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.asc
		echo "Verifying rootfs signature"
	fi
	if [ ${skip_gpg} -eq 1 ] || sudo -u ${SUDO_USER} gpg --homedir "${linuxloopsdir}"/gnupg --verify "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.asc "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz"${gpg_check_extension}"; then
		if tar xf "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz -C "${bootstrapdir}"; then
			echo "${distribution} rootfs successfylly extracted."
			rm -f "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz.sha256sum*
			return 0
		else
			echo "Failed to extract ${distribution} rootfs, will not proceed."
		fi
	else
		echo "rootfs signature verification failed, will not proceed."
	fi
	rm "${linuxloopsdir}"/cache/"${distribution}"-rootfs.tar.xz*
fi
if [ "${install_type}" == "image" ]; then losetup -d "${destination_device}"; fi
exit_with_error "Download of bootstrap image failed."
}

bootstrap()
{
return_value=0
if [ "${systemd_init}" == "Yes" ]; then
	if [ ! -z "${brunch}" ] || [ ! -z "${chromeos}" ]; then
		mkdir -p /usr/local/tmp/linuxloops
		chown 1000:1000 /usr/local/tmp /usr/local/tmp/linuxloops
		homebinddir="$(sudo -u ${SUDO_USER} mktemp -d /usr/local/tmp/linuxloops/linuxloops.XXXXXXXX)"
		bootstrapdir="${homebinddir}/bootstrap"
	else
		bootstrapdir="$(mktemp -d /tmp/linuxloops.XXXXXXXX)/bootstrap"
		homebinddir="${linuxloopsdir}/tmp/$(echo ${bootstrapdir} | cut -d'/' -f3)"
	fi
	chrootdir="${bootstrapdir}"/mnt
	trap 'end_bootstrap; clear -x; echo "Installation cancelled by INT or TERM signal."; exit 1' INT TERM
	mkdir -p "${bootstrapdir}"
	sudo -u ${SUDO_USER} mkdir -p "${homebinddir}"
	mount --bind "${homebinddir}" "${homebinddir}"
	mount --make-slave "${homebinddir}"
	mount --bind "${homebinddir}" "${bootstrapdir}"
	mount --make-slave "${bootstrapdir}"
	if ! mountpoint -q "${bootstrapdir}" || ! mountpoint -q "${homebinddir}" ; then echo "Linuxloops systemd init working directories could not be mounted."; exit 1; fi
else
	if [ ! -z "${brunch}" ] || [ ! -z "${chromeos}" ]; then
		mkdir -p /usr/local/tmp/linuxloops
		chown 1000:1000 /usr/local/tmp /usr/local/tmp/linuxloops
		homebinddir="$(sudo -u ${SUDO_USER} mktemp -d /usr/local/tmp/linuxloops/linuxloops.XXXXXXXX)"
		bootstrapdir="${homebinddir}/bootstrap"
	else
		homebinddir="$(sudo -u ${SUDO_USER} mktemp -d ${linuxloopsdir}/tmp/linuxloops.XXXXXXXX)"
		bootstrapdir="${homebinddir}/bootstrap"
	fi
	chrootdir="${bootstrapdir}"/mnt
	trap 'end_bootstrap; clear -x; echo "Installation cancelled by INT or TERM signal."; exit 1' INT TERM
	sudo -u ${SUDO_USER} mkdir -p "${bootstrapdir}"
	mount --bind "${homebinddir}" "${homebinddir}"
	mount --make-slave "${homebinddir}"
	mount --bind "${bootstrapdir}" "${bootstrapdir}"
	mount --make-slave "${bootstrapdir}"
	if ! mountpoint -q "${bootstrapdir}" || ! mountpoint -q "${homebinddir}" ; then echo "Linuxloops systemd init working directories could not be mounted."; exit 1; fi
fi
download_bootstrap ${bootstrap}
if [ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ]; then
	mount --bind "${homebinddir}" "${chrootdir}"
	if ! mountpoint -q "${chrootdir}" ; then echo "NixOS specific working directory could not be mounted."; exit 1; fi
fi
mount -t proc none "${bootstrapdir}"/proc
mount --bind /sys "${bootstrapdir}"/sys
mount --make-slave "${bootstrapdir}"/sys
if mountpoint -q /sys/firmware/efi/efivars; then
	mount --bind /sys/firmware/efi/efivars "${bootstrapdir}"/sys/firmware/efi/efivars
	mount --make-slave "${bootstrapdir}"/sys/firmware/efi/efivars
fi
mount --bind /dev "${bootstrapdir}"/dev
mount --make-slave "${bootstrapdir}"/dev
mount --bind /dev/pts "${bootstrapdir}"/dev/pts
mount --make-slave "${bootstrapdir}"/dev/pts
mount -t tmpfs -o mode=1777 none "${bootstrapdir}"/dev/shm
mount -t tmpfs none "${bootstrapdir}"/run
mount -t tmpfs -o mode=1777 none "${bootstrapdir}"/tmp
mkdir -p "${bootstrapdir}"/tmp/linuxloops
if [ ! -z "${brunch}" ] || [ ! -z "${chromeos}" ]; then
	mount -t ramfs -o mode=1777,exec,symfollow none "${bootstrapdir}"/tmp/linuxloops
else
	mount -t tmpfs -o mode=1777,exec,symfollow none "${bootstrapdir}"/tmp/linuxloops
fi
if [ -f /etc/hostname ]; then
    cp /etc/hostname "${bootstrapdir}"/etc/hostname
else
    echo "bootstrap" > "${bootstrapdir}"/etc/hostname
fi
cp /etc/hosts "${bootstrapdir}"/etc/hosts
rm -f "${bootstrapdir}"/etc/resolv.conf
cp /etc/resolv.conf "${bootstrapdir}"/etc/resolv.conf
chroot_"${chroot_function}" || (return_value=1 && return)
generate_bootstrap_init
generate_partition_script
generate_setup_and_mount_rootfs
generate_mount_efi
generate_enter_chroot
generate_install_settings
generate_install_secureboot
generate_install_surface
generate_install_nvidia
generate_install_fstab
generate_install_initramfs
generate_install_swap
generate_install_bootloader
generate_cleanup
generate_install_live
generate_efi_entry
generate_exit_chroot
chroot "${bootstrapdir}" /tmp/linuxloops/bootstrap_init || return_value=1
rm -f "${bootstrapdir}"/tmp/linuxloops/setup_and_mount_rootfs
if ([ ! -z "${github}" ] && [ "${distribution}" == "Bazzite" ]) || ([ ! -z "${github}" ] && [ "${distribution}" == "Fedora-Atomic" ]); then exit 0; fi
if [ "${return_value}" -eq 0 ]; then
	generare_install_userpw
	generate_selinux_fix
	if [ -x "${bootstrapdir}"/tmp/linuxloops/install_userpw ]; then
		chroot "${bootstrapdir}" /tmp/linuxloops/install_userpw || return_value=1
		rm -f "${bootstrapdir}"/tmp/linuxloops/install_userpw "${chrootdir}"/tmp/linuxloops/set_userpw
	fi
	if [ "${install_type}" == "image" ] && [ -f "${chrootdir}"/etc/secureboot_key/MOK.der ]; then
		cp "${chrootdir}"/etc/secureboot_key/MOK.der "${fullpath}".der
		chown ${SUDO_UID}:$(id -g ${SUDO_UID}) "${fullpath}".der
	fi
fi
if [ -x "${bootstrapdir}"/tmp/linuxloops/exit_chroot ]; then chroot "${bootstrapdir}" /tmp/linuxloops/exit_chroot || return_value=1; fi
end_bootstrap
trap '' INT TERM
}

set_packages_locale()
{
if [ "$(echo ${locale} | cut -d'_' -f1)" == "C" ]; then
	packages_locale="en"
else
	packages_locale="$(echo ${locale} | cut -d'_' -f1)"
fi
}

start_install()
{
set_packages_locale
if [ "${install_type}" == "disk" ]; then
	for i in ls "${fullpath}"?*; do
		umount ${i} > /dev/null 2>&1
		ret="${?}"
		if [ ! "${ret}" -eq 0 ] && [ ! "${ret}" -eq 32 ]; then exit_with_error "Automatic unmounting of partitions failed with error ${ret}. Please unmount all device partitions manually and try again."; fi
	done
	destination_device="${fullpath}"
	if (expr match "${fullpath}" ".*[0-9]$" >/dev/null); then
		partition_path="${destination_device}"p
	else
		partition_path="${destination_device}"
	fi
	
else
	echo "Creating image file ${fullpath}..."
	rm -f "${fullpath}" "${fullpath}".der "${fullpath}".grub.txt
	echo -n > "${fullpath}"
	if [ "x$(df -T "${fullpath}" | tail -1 | cut -d' ' -f2)" == "xbtrfs" ]; then chattr +C "${fullpath}"; chattr -c "${fullpath}"; fi
	if [ "${live}" == "Yes" ]; then
		dd if=/dev/zero of="${fullpath}" bs=1M count=${install_sizeMB} status=progress
	else
		dd if=/dev/zero of="${fullpath}" bs=1M count=0 seek=${install_sizeMB} status=none
	fi
	chown ${SUDO_UID}:$(id -g ${SUDO_UID}) "${fullpath}"
	destination_device="$(losetup --show -fP "${fullpath}")" || exit_with_error "losetup command failed."
	partition_path="${destination_device}"p
fi
efi_partition="${partition_path}"1
if [ "${distribution}" == "BlissOS" ]; then
	root_partition="${partition_path}"2
else
	boot_partition="${partition_path}"2
	root_partition="${partition_path}"3
fi
bootstrap
return "${return_value}"
}

grub_config()
{
if [ ! -z "${wsl}" ]; then
	img_uuid=$(sudo -u ${SUDO_USER} /mnt/c/Windows/System32/mountvol.exe $(echo ${fullpath:5:1} | tr a-z A-Z): /L | cut -d'{' -f2 | cut -d'}' -f1)
else
	img_uuid=$(blkid -s PARTUUID -o value "$(df "${fullpath}" --output=source | sed 1d)")
fi
img_path=$(if [ "$(findmnt -n -o FSTYPE $(findmnt -n -o TARGET -T ${fullpath}))" == "btrfs" ] && [ ! -b "$(findmnt -n -o SOURCE $(findmnt -n -o TARGET -T ${fullpath}))" ]; then echo "$(findmnt -n -o SOURCE $(findmnt -n -o TARGET -T ${fullpath}) | cut -d"[" -f2 | cut -d"]" -f1)"; fi)$(if [ "$(findmnt -n -o TARGET -T ${fullpath})" == "/" ]; then echo "$(realpath ${fullpath})"; else echo "$(realpath ${fullpath})" | sed "s#$(findmnt -n -o TARGET -T ${fullpath})##g"; fi)
if [ -z "${wsl}" ] && ([ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "debian" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "ubuntu" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "linuxmint" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "fedora" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "zorin" ]); then remove_tpm="\n	rmmod tpm"; fi
if [ "${distribution}" == "BlissOS" ]; then
config="menuentry '${distribution}' --class '$(echo ${distribution} | tr [:upper:] [:lower:])' {${remove_tpm}
	insmod regexp
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \"\${img_path}\"
	loopback loop \"\${img_path}\"
	for bliss in (loop,2)/android-*; do set root=\$bliss; done
	linux \$root/kernel rdinit=/linuxloops img_uuid=\${img_uuid} img_path=\${img_path} root=/dev/ram0
	initrd \$root/initrd.img (loop,2)/linuxloops.img
}
"
elif [ "${distribution}" == "Brunch" ]; then
config="submenu '${distribution}' {
menuentry '${distribution}' --class '$(echo ${distribution} | tr [:upper:] [:lower:])' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \${img_path}
	loopback loop \${img_path}
	source (loop,12)/efi/boot/settings.cfg
	if [ -z \${verbose} ] -o [ \${verbose} -eq 0 ]; then
		linux (loop,7)\${kernel} boot=local noresume noswap loglevel=7 options=\${options} chromeos_bootsplash=\${chromeos_bootsplash} \${cmdline_params} \\
			cros_secure cros_debug img_uuid=\${img_uuid} img_path=\${img_path} \\
			console= vt.global_cursor_default=0 brunch_bootsplash=\${brunch_bootsplash} quiet
	else
		linux (loop,7)\${kernel} boot=local noresume noswap loglevel=7 options=\${options} chromeos_bootsplash=\${chromeos_bootsplash} \${cmdline_params} \\
			cros_secure cros_debug img_uuid=\${img_uuid} img_path=\${img_path}
	fi
	initrd (loop,7)/lib/firmware/amd-ucode.img (loop,7)/lib/firmware/intel-ucode.img (loop,7)/initramfs.img
}
menuentry '${distribution} settings' --class '$(echo ${distribution} | tr [:upper:] [:lower:])-settings' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \${img_path}
	loopback loop \${img_path}
	source (loop,12)/efi/boot/settings.cfg
	linux (loop,7)/kernel boot=local noresume noswap loglevel=7 options= chromeos_bootsplash= edit_brunch_config=1 \\
		cros_secure cros_debug img_uuid=\${img_uuid} img_path=\${img_path}
	initrd (loop,7)/lib/firmware/amd-ucode.img (loop,7)/lib/firmware/intel-ucode.img (loop,7)/initramfs.img
}
}
"
elif [ "${distribution}" == "ChromeOS-Flex" ]; then
config="menuentry '${distribution}' --class '$(echo ${distribution} | tr [:upper:] [:lower:])' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \${img_path}
	loopback loop \${img_path}
	if [ -f (loop,7)/bootimage.cfg ]; then source (loop,7)/bootimage.cfg; else bootimage=A; fi
	linux (loop,12)/syslinux/vmlinuz.\${bootimage} img_uuid=\${img_uuid} img_path=\${img_path} bootimage=\${bootimage} loop.max_part=16 ro quiet splash boot=local noresume noswap loglevel=7 console= cros_efi kvm-intel.vmentry_l1d_flush=always loadpin.enabled=0 loadpin.enforce=0 rootfstype=ramfs ${dev_mode}
	initrd (loop,7)/initramfs.img (loop,7)/firmwares.img (loop,7)/modules.img
}
"
elif [ "${distribution}" == "FoxFlake" ] || [ "${distribution}" == "GLF-OS" ] || [ "${distribution}" == "NixOS" ]; then
config="menuentry '${distribution}' --class '$(echo ${distribution} | tr [:upper:] [:lower:])' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \"\${img_path}\"
	loopback loop \"\${img_path}\"
	linuxloops_args=\"img_path=\${img_path} img_uuid=\${img_uuid}\"
	export linuxloops_args
	configfile (loop,2)$(if [ \"${root_fstype}\" == \"btrfs\" ]; then echo /@boot; fi)/grub$(if [ \"${distribution}\" == \"AlmaLinux\" ] || [ \"${distribution}\" == \"Bazzite\" ] || [ \"${distribution}\" == \"Fedora\" ] || [ \"${distribution}\" == \"Fedora-Atomic\" ] || [ \"${distribution}\" == \"Nobara\" ] || [ \"${distribution}\" == \"OpenSUSE\" ] || [ \"${distribution}\" == \"Qubes\" ] || [ \"${distribution}\" == \"RockyLinux\" ]; then echo 2; fi)/grub.cfg
}
"
elif [ "${distribution}" == "Tails" ]; then
config="menuentry '${distribution}' --class '$(echo ${distribution} | tr [:upper:] [:lower:])' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \"\${img_path}\"
	loopback loop \"\${img_path}\"
	probe --set rootuuid --fs-uuid (loop,1)
	linux (loop,1)/live/vmlinuz rdinit=/linuxloops img_uuid=\${img_uuid} img_path=\${img_path} boot=live config live-media=/dev/loop0p1 nopersistence noprompt timezone=Etc/UTC splash noautologin module=Tails slab_nomerge slub_debug=FZ mce=0 vsyscall=none init_on_free=1 mds=full,nosmt page_alloc.shuffle=1 randomize_kstack_offset=on FSUUID=\${rootuuid} quiet splash
	initrd (loop,1)/live/initrd.img (loop,1)/live/linuxloops.img
}
"
else
if [ "${distribution}" == "Fedora-Atomic" ]; then
	label="Fedora ${environment}"
	class="fedora"
else
	label="${distribution}"
	class="$(echo ${distribution} | tr [:upper:] [:lower:])"
fi
config="menuentry '${label}' --class '${class}' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \"\${img_path}\"
	loopback loop \"\${img_path}\"
	linuxloops_args=\"rdinit=/linuxloops img_path=\${img_path} img_uuid=\${img_uuid}\"
	export linuxloops_args
	configfile (loop,2)$(if [ \"${root_fstype}\" == \"btrfs\" ]; then echo /@boot; fi)/grub$(if [ \"${distribution}\" == \"AlmaLinux\" ] || [ \"${distribution}\" == \"Bazzite\" ] || [ \"${distribution}\" == \"Fedora\" ] || [ \"${distribution}\" == \"Fedora-Atomic\" ] || [ \"${distribution}\" == \"Nobara\" ] || [ \"${distribution}\" == \"OpenSUSE\" ] || [ \"${distribution}\" == \"Qubes\" ] || [ \"${distribution}\" == \"RockyLinux\" ]; then echo 2; fi)/grub.cfg
}
"
fi
echo -e "${config}" > "${fullpath}".grub.txt
chown ${SUDO_UID}:$(id -g ${SUDO_UID}) "${fullpath}".grub.txt
if [ ! -z "${chromeos}" ]; then
	mkdir -p /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	source=$(blkid --match-token PARTLABEL=EFI-SYSTEM | head -1 | cut -d':' -f1)
	mount "${source}" /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	rm -rf /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot
	mkdir -p /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot
	curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/sebanc/brunch-unstable/raw/continuous-integration/efi-partition/efi/boot/grubx64.efi -o /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot/bootx64.efi
	echo -e "set timeout=5\n"> /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot/grub.cfg
	echo -e "${config}" >> /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot/grub.cfg
	umount /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
fi
}

set_mirror()
{
case "${1}" in
	"AlmaLinux")
		if ! curl -sfLo/dev/null -r0-0 "${2}/$(echo ${almalinux_version} | tr A-Z a-z)/BaseOS/x86_64/os/repodata/repomd.xml"; then return 1; fi
		mirror_AlmaLinux="${2}"
	;;
	"Arch")
		if ! curl -sfLo/dev/null -r0-0 "${2}/core/os/x86_64/core.db"; then return 1; fi
		mirror_Arch="${2}"
	;;
	"Artix")
		if ! curl -sfLo/dev/null -r0-0 "${2}/system/os/x86_64/system.db"; then return 1; fi
		mirror_Artix="${2}"
	;;
	"BlendOS")
		if ! curl -sfLo/dev/null -r0-0 "${2}/breakfast.db"; then return 1; fi
		mirror_BlendOS="${2}"
	;;
	"CachyOS")
		if ! curl -sfLo/dev/null -r0-0 "${2}/x86_64/cachyos/cachyos.db"; then return 1; fi
		mirror_CachyOS="${2}"
	;;
	"Debian")
		if ! curl -sfLo/dev/null -r0-0 "${2}/dists/$(echo ${debian_version} | tr A-Z a-z)/Release"; then return 1; fi
		mirror_Debian="${2}"
	;;
	"Devuan")
		if ! curl -sfLo/dev/null -r0-0 "${2}/merged/dists/$(echo ${devuan_version} | tr A-Z a-z)/Release"; then return 1; fi
		mirror_Devuan="${2}"
	;;
	"Fedora")
		if ! curl -sfLo/dev/null -r0-0 "${2}/updates/$(echo ${fedora_version} | tr A-Z a-z)/Everything/x86_64/repodata/repomd.xml"; then return 1; fi
		mirror_Fedora="${2}"
	;;
	"Fedora-Atomic")
		if ! curl -sfLo/dev/null -r0-0 "${2}/config"; then return 1; fi
		mirror_Fedora_Atomic="${2}"
	;;
	"Gentoo")
		if ! curl -sfLo/dev/null -r0-0 "${2}/releases/amd64/binpackages/23.0/x86-64/Packages"; then return 1; fi
		mirror_Gentoo="${2}"
	;;
	"Kali")
		if ! curl -sfLo/dev/null -r0-0 "${2}/dists/kali-$(echo ${kali_version} | tr A-Z a-z)/Release"; then return 1; fi
		mirror_Kali="${2}"
	;;
	"Linuxmint")
		if ! curl -sfLo/dev/null -r0-0 "${2}/dists/$(echo ${linuxmint_version} | tr A-Z a-z)/Release"; then return 1; fi
		mirror_Linuxmint="${2}"
	;;
	"Manjaro")
		if ! curl -sfLo/dev/null -r0-0 "${2}/$(echo ${manjaro_version} | tr A-Z a-z)/core/x86_64/core.db"; then return 1; fi
		mirror_Manjaro="${2}"
	;;
	"MX")
		if ! curl -sfLo/dev/null -r0-0 "${2}/mx/repo/dists/$(echo ${debian_version} | tr A-Z a-z)/Release"; then return 1; fi
		mirror_MX="${2}"
	;;
	"Neon")
		if ! curl -sfLo/dev/null -r0-0 "${2}/$(echo ${neon_version} | tr A-Z a-z)/dists/$(echo ${ubuntu_version} | tr A-Z a-z)/Release"; then return 1; fi
		mirror_Neon="${2}"
	;;
	"OpenSUSE")
		if ! curl -sfLo/dev/null -r0-0 "${2}/$(echo ${opensuse_version} | tr A-Z a-z)/repo/oss/INDEX.gz"; then return 1; fi
		mirror_OpenSUSE="${2}"
	;;
	"Parrot")
		if ! curl -sfLo/dev/null -r0-0 "${2}/dists/$(echo ${parrot_version} | tr A-Z a-z)/Release"; then return 1; fi
		mirror_Parrot="${2}"
	;;
	"PikaOS")
		if ! curl -sfLo/dev/null -r0-0 "${2}/dists/pika/Release"; then return 1; fi
		mirror_PikaOS="${2}"
	;;
	"RockyLinux")
		if ! curl -sfLo/dev/null -r0-0 "${2}/$(echo ${rockylinux_version} | tr A-Z a-z)/BaseOS/x86_64/os/repodata/repomd.xml"; then return 1; fi
		mirror_RockyLinux="${2}"
	;;
	"SteamOS")
		if ! curl -sfLo/dev/null -r0-0 "${2}/core-$(echo ${steamos_version} | tr A-Z a-z)/os/x86_64/core-$(echo ${steamos_version} | tr A-Z a-z).db"; then return 1; fi
		mirror_SteamOS="${2}"
	;;
	"Ubuntu")
		if ! curl -sfLo/dev/null -r0-0 "${2}/dists/$(echo ${ubuntu_version} | tr A-Z a-z)/Release"; then return 1; fi
		mirror_Ubuntu="${2}"
	;;
	"Void")
		if ! curl -sfLo/dev/null -r0-0 "${2}/$(echo ${void_version} | tr A-Z a-z)/x86_64-repodata"; then return 1; fi
		mirror_Void="${2}"
	;;
	*)
		exit_with_error "\"${1}\" mirror is not supported for this distribution, supported mirrors are: \"$(echo ${mirrors_supported[@]} | sed 's@ @|@g')\"."
	;;
esac
}

list_array()
{
if [ "${1}" == "available_distributions" ]; then for distribution in "${available_distributions[@]}"; do echo -e "${distribution}"; done; fi
if [ "${1}" == "available_versions" ]; then for version in "${available_versions[@]}"; do echo -e "${version}"; done; fi
if [ "${1}" == "available_environments" ]; then for environment in "${available_environments[@]}"; do echo -e "${environment}"; done ; fi
if [ "${1}" == "available_locales" ]; then for i in "${!available_locales[@]}"; do if [ "${available_locales[$i]}" == "TRUE" ] || [ "${available_locales[$i]}" == "FALSE" ]; then echo "${available_locales[$i+1]}"; fi; done; fi
if [ "${1}" == "available_keymaps" ]; then for i in "${!available_keymaps[@]}"; do if [ "${available_keymaps[$i]}" == "TRUE" ] || [ "${available_keymaps[$i]}" == "FALSE" ]; then echo "${available_keymaps[$i+1]}"; fi; done; fi
if [ "${1}" == "available_timezones" ]; then for i in "${!available_timezones[@]}"; do if [ "${available_timezones[$i]}" == "TRUE" ] || [ "${available_timezones[$i]}" == "FALSE" ]; then echo "${available_timezones[$i+1]}"; fi; done; fi
if [ "${1}" == "mirrors_supported" ]; then for repository in "${mirrors_supported[@]}"; do echo -e "\"${repository}\""; done; fi
if [ "${1}" == "all" ]; then
	for distribution in "${available_distributions[@]}"; do
		distribution_parameters
		echo -en "Distribution: ${distribution}"
		for version in "${available_versions[@]}"; do
			distribution_version_parameters
			echo -en "\n\tVersion: ${version}"
			echo -en "\n\t\tAvailable environments: "
			for environment in "${available_environments[@]}"; do
				echo -en "${environment} "
			done
			echo -en "\n\t\tInstall on btrfs filesystem possible: ${btrfs_supported}"
			echo -en "\n\t\tNvidia proprietary driver installation possible: ${nvidia_supported}"
			echo -en "\n\t\tSurface patches installation possible: ${surface_supported}"
			echo -en "\n\t\tCustom mirrors supported: ${mirrors_supported[@]}"
		done
	echo -e '\n'
	done
fi
}

check_home_space()
{
find "${linuxloopsdir}"/cache/* -type f -mtime +7 -exec rm {} \; 2>/dev/null
for removedir in "${linuxloopsdir}"/tmp/*; do if [ -d "${removedir}" ] && ! mountpoint -q "${removedir}"; then rm -rf "${removedir}"; fi; done
if [ ! -z "${brunch}" ] || [ ! -z "${chromeos}" ]; then for removedir in /usr/local/tmp/linuxloops/*; do if [ -d "${removedir}" ] && ! mountpoint -q "${removedir}"; then rm -rf "${removedir}"; fi; done; fi
case "${distribution}" in
	'Bazzite')
		available_space_needed=4
	;;
	'BlissOS')
		available_space_needed=3
	;;
	'Brunch')
		available_space_needed=7
	;;
	'ChromeOS-Flex')
		available_space_needed=7
	;;
	'Fedora-Atomic')
		available_space_needed=4
	;;
	'Qubes')
		available_space_needed=7
	;;
	'Tails')
		available_space_needed=4
	;;
	*)
		available_space_needed=1
	;;
esac
}

possible_image_size()
{
if [ -f "${destination}" ]; then freed_space=$(( $(du "${destination}" | cut -d'	' -f1) / 1024 / 1024 )); else freed_space=0; fi
if [ "$(df --output=source -- ${linuxloopsdir} | sed 1d)" == "$(df --output=source -- $(echo $(realpath ${destination}) | sed 's![^/]*$!!') | sed 1d)" ]; then bootstrap_space=${available_space_needed}; else bootstrap_space=0; fi
maximum_image_size=$(( ($(df -k --output=avail $(echo $(realpath ${destination}) | sed 's![^/]*$!!') | sed 1d) / 1024 / 1024) + ${freed_space} - ${bootstrap_space} ))
}

get_extra_partitions_attribute()
{
if [ "${1}" == "mountpoint" ]; then echo $(echo ${extra_partitions[${2}]} | cut -d'*' -f1); fi
if [ "${1}" == "name" ]; then echo $(echo ${extra_partitions[${2}]} | cut -d'*' -f2); fi
if [ "${1}" == "fstype" ]; then echo $(echo ${extra_partitions[${2}]} | cut -d'*' -f3); fi
if [ "${1}" == "mountoptions" ]; then
	if [ "$(get_extra_partitions_attribute fstype ${2})" == "btrfs" ]; then
		extra_partition_mount_options="defaults,subvol=@$(echo $(get_extra_partitions_attribute mountpoint ${2}) | sed 's@/@@g')"
	else
		extra_partition_mount_options="defaults"
	fi
	if [ "$(echo ${extra_partitions[${2}]} | cut -d'*' -f4)" != "" ]; then extra_partition_mount_options="${extra_partition_mount_options},$(echo ${extra_partitions[${2}]} | cut -d'*' -f4)"; fi
	echo ${extra_partition_mount_options}
fi
if [ "${1}" == "size" ]; then echo $(echo ${extra_partitions[${2}]} | cut -d'*' -f5); fi
if [ "${1}" == "encryption" ]; then echo $(echo ${extra_partitions[${2}]} | cut -d'*' -f6); fi
if [ "${1}" == "isencryptionused" ]; then
	encryption_used="No"
	if [ ${#extra_partitions[@]} -ne 0 ]; then
		for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
			if [ "$(get_extra_partitions_attribute encryption ${i})" == "Yes" ]; then encryption_used="Yes"; fi
		done
	fi
	echo ${encryption_used}
fi
if [ "${1}" == "totalsize" ]; then
	extra_partitions_size=0
	if [ ${#extra_partitions[@]} -ne 0 ]; then
		for i in $(seq 0 $(( ${#extra_partitions[@]} - 1 ))); do
			if [ ! -z $(get_extra_partitions_attribute size ${i}) ]; then extra_partitions_size=$(( ${extra_partitions_size} + $(get_extra_partitions_attribute size ${i}) )); fi
		done
	fi
	echo ${extra_partitions_size}
fi
}

compute_partitions()
{
if [ ! -z "${efi_name}" ]; then
	if ! echo "${efi_name}" | grep -Eq '[a-zA-Z0-9_-]$'; then echo "Name provided for EFI partition is invalid."; exit 1; fi
else
	efi_name="EFI"
fi
if [ ! -z "${boot_name}" ]; then
	if ! echo "${boot_name}" | grep -Eq '[a-zA-Z0-9_-]$'; then echo "Name provided for Boot partition is invalid."; exit 1; fi
else
	boot_name="Boot"
fi
if [ ! -z "${root_name}" ]; then
	if ! echo "${root_name}" | grep -Eq '[a-zA-Z0-9_-]$'; then echo "Name provided for Root partition is invalid."; exit 1; fi
else
	root_name="Root"
fi
if [ ! -z "${efi_mountoptions}" ]; then
	if ! echo "${efi_mountoptions}" | grep -Eq '[a-zA-Z0-9,:=.-]$'; then echo "Mountoptions provided for EFI partition is invalid."; exit 1; fi
fi
if [ ! -z "${boot_mountoptions}" ]; then
	if ! echo "${boot_mountoptions}" | grep -Eq '[a-zA-Z0-9,:=.-]$'; then echo "Mountoptions provided for Boot partition is invalid."; exit 1; fi
fi
if [ ! -z "${root_mountoptions}" ]; then
	if ! echo "${root_mountoptions}" | grep -Eq '[a-zA-Z0-9,:=.-]$'; then echo "Mountoptions provided for Root partition is invalid."; exit 1; fi
fi
default_mount_option="defaults"
if [ ! -z "${efi_mountoptions}" ]; then final_efi_mountoptions="${default_mount_option},${efi_mountoptions}"; else final_efi_mountoptions="${default_mount_option}"; fi
if [ "${root_fstype}" == "btrfs" ]; then
	if [ ! -z "${boot_mountoptions}" ]; then final_boot_mountoptions="${default_mount_option},${boot_mountoptions},subvol=@boot"; else final_boot_mountoptions="${default_mount_option},subvol=@boot"; fi
	if  [ "${root_compression}" == "Yes" ]; then compression_mountoptions=",compress=zstd"; fi
	if [ ! -z "${root_mountoptions}" ]; then
		final_root_mountoptions="${default_mount_option},subvol=@${compression_mountoptions},${root_mountoptions}"
		final_home_subvol_mountoptions="${default_mount_option},subvol=@home${compression_mountoptions},${root_mountoptions}"
	else
		final_root_mountoptions="${default_mount_option},subvol=@${compression_mountoptions}"
		final_home_subvol_mountoptions="${default_mount_option},subvol=@home${compression_mountoptions}"
	fi
	final_swap_subvol_mountoptions="${default_mount_option},subvol=@swap"
else
	if [ ! -z "${boot_mountoptions}" ]; then final_boot_mountoptions="${default_mount_option},${boot_mountoptions}"; else final_boot_mountoptions="${default_mount_option}"; fi
	if [ ! -z "${root_mountoptions}" ]; then final_root_mountoptions="${default_mount_option},${root_mountoptions},errors=remount-ro"; else final_root_mountoptions="${default_mount_option},errors=remount-ro"; fi
fi
if [ "${partition4}" == "*****No" ] || [ "${partition4}" == "*****Yes" ]; then partition4=""; fi
if [ "${partition5}" == "*****No" ] || [ "${partition5}" == "*****Yes" ]; then partition5=""; fi
if [ "${partition6}" == "*****No" ] || [ "${partition6}" == "*****Yes" ]; then partition6=""; fi
if [ "${partition7}" == "*****No" ] || [ "${partition7}" == "*****Yes" ]; then partition7=""; fi
if [ "${partition8}" == "*****No" ] || [ "${partition8}" == "*****Yes" ]; then partition8=""; fi
extra_partitions=("${partition4}" "${partition5}" "${partition6}" "${partition7}" "${partition8}")
i=4
while [ ${i} -ge 0 ]; do
	if [ "${extra_partitions[${i}]}" == "" ]; then
		unset extra_partitions[${i}]
		i=$(( ${i} - 1 ))
		continue
	fi
	if [ $(echo "${extra_partitions[${i}]}" | grep -o '*' | grep -c .) -ne 5 ]; then echo "Format of extra partition $(( ${i} + 1 )) is incorrect."; exit 1; fi
	if [ -z "$(echo ${extra_partitions[${i}]} | cut -d'*' -f1)" ]; then echo "Mountpoint was not provided for partition extra partition $(( ${i} + 1 ))."; exit 1; fi
	if ! echo "${extra_partitions[${i}]}" | cut -d'*' -f1 | grep -Eq '/[a-zA-Z0-9_/-]*$'; then echo "Mountpoint provided for extra partition $(( ${i} + 1 )) is not valid: $(echo "${extra_partitions[${i}]}" | cut -d'*' -f1)."; exit 1; fi
	extra_partitions[${i}]="$(echo $(realpath -m $(echo ${extra_partitions[${i}]} | cut -d'*' -f1)))*$(echo ${extra_partitions[${i}]} | cut -d'*' -f2-)"
	for j in / /bin /boot /boot/efi /etc /nix /nix/store /sbin /usr /usr/bin /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib64 /usr/sbin /var /var/lib /var/lib/nixos /var/log; do if [ "$(echo ${extra_partitions[${i}]} | cut -d'*' -f1)" == "${j}" ]; then echo "The following mounpoints are not supported: /, /bin, /boot, /boot/efi, /etc, /nix, /nix/store, /sbin, /usr, /usr/bin, /usr/lib, /usr/lib/x86_64-linux-gnu, /usr/lib64, /usr/sbin, /var, /var/lib, /var/lib/nixos, /var/log"; exit 1; fi; done
	for j in {0..4}; do if [ ${j} -ne ${i} ] && [ ! -z "$(echo ${extra_partitions[${i}]} | cut -d'*' -f1)" ]; then if [ "$(echo ${extra_partitions[${i}]} | cut -d'*' -f1)" == "$(echo ${extra_partitions[${j}]} | cut -d'*' -f1)" ]; then echo "The mounpoint $(echo ${extra_partitions[${i}]} | cut -d'*' -f1) defined several times."; exit 1; fi; fi; done
	if [ "$(echo ${extra_partitions[${i}]} | cut -d'*' -f1)" == "/home" ]; then separate_home="Yes"; fi
	if [ -z "$(echo ${extra_partitions[${i}]} | cut -d'*' -f2)" ]; then echo "Name was not provided for extra partition $(( ${i} + 1 ))."; exit 1; fi
	if ! echo "${extra_partitions[${i}]}" | cut -d'*' -f2 | grep -Eq '[a-zA-Z0-9_-]*$'; then echo "Name provided for extra partition $(( ${i} + 1 )) is not valid: $(echo "${extra_partitions[${i}]}" | cut -d'*' -f2)."; exit 1; fi
	if [ -z "$(echo ${extra_partitions[${i}]} | cut -d'*' -f3)" ]; then echo "FS type was not provided for extra partition $(( ${i} + 1 ))."; exit 1; fi
	if [ "$(echo ${extra_partitions[${i}]} | cut -d'*' -f3)" != "ext4" ] && [ "$(echo ${extra_partitions[${i}]} | cut -d'*' -f3)" != "btrfs" ]; then echo "FS type should be ext4 or btrfs: $(echo ${extra_partitions[${i}]} | cut -d'*' -f3)"; exit 1; fi
	if [ "$(echo ${extra_partitions[${i}]} | cut -d'*' -f3)" == "btrfs" ] && [ ! "${btrfs_supported}" == "Yes" ]; then echo "Filesystem type btrfs is not supported for this distribution version."; exit 1; fi
	if [ "$(echo ${extra_partitions[${i}]} | cut -d'*' -f4)" != "" ] && ! echo "${extra_partitions[${i}]}" | cut -d'*' -f4 | grep -Eq '[a-zA-Z0-9,:=.-]*$'; then echo "Mountoptions provided for extra partition $(( ${i} + 1 )) are not valid: $(echo "${extra_partitions[${i}]}" | cut -d'*' -f4)."; exit 1; fi
	if [ -z "$(echo ${extra_partitions[${i}]} | cut -d'*' -f5)" ]; then echo "Size was not provided for extra partition $(( ${i} + 1 ))."; exit 1; fi
	if ! echo "${extra_partitions[${i}]}" | cut -d'*' -f5 | grep -Eq '[!0-9]$' || [ $(echo ${extra_partitions[${i}]} | cut -d'*' -f5) -lt 0 ]; then echo "Size is not a positive integer for extra partition $(( ${i} + 1 )): $(echo ${extra_partitions[${i}]} | cut -d'*' -f5)"; fi
	if [ -z "$(echo ${extra_partitions[${i}]} | cut -d'*' -f6)" ]; then echo "Encryption was not provided for extra partition $(( ${i} + 1 ))."; exit 1; fi
	if [ "$(echo ${extra_partitions[${i}]} | cut -d'*' -f6)" != "Yes" ] && [ "$(echo ${extra_partitions[${i}]} | cut -d'*' -f6)" != "No" ]; then echo "Encryption should be Yes or No: $(echo ${extra_partitions[${i}]} | cut -d'*' -f3)"; exit 1; fi
	i=$(( ${i} - 1 ))
done
extra_partitions=( $(echo "${extra_partitions[@]}" | sed 's@ @\n@g' | sort -t "|" -k 1,1) )
if [ -z "${root_size}" ] || [ ${install_size} -eq $(( 1 + ${root_size} + $(get_extra_partitions_attribute totalsize) )) ]; then
	root_size=$(( ${install_size} - 1 - $(get_extra_partitions_attribute totalsize) ))
	root_sizeMB=$(( ${install_sizeMB} - 1024 - $(get_extra_partitions_attribute totalsize) * 1024 ))
else
	root_sizeMB=$(( ${root_size} * 1024 ))
fi
if [ ! "${live}" == "Yes" ] && [ "${root_sizeMB}" -lt $(( 12 * 1024 )) ]; then echo "Rootfs size cannot be lower than 12 GB."; exit 1; fi
}

generate_declarative_config()
{
rm -f "${generate_config}"
cat >"${generate_config}" <<DECLARATIVE_CONFIG
# Linuxloops generated config file
# If you intend to share this config, make sure to clear the options that are specific to your personal choices (destination, install_size, user account name, passwords and options)

# Main parameters
distribution="${distribution}"
version="${version}"
environment="${environment}"

# Parameters obtained interactively if not provided
destination="${destination}"
install_size="${install_size}"
useraccount_name="${useraccount_name}"
useraccount_password=""
encryption_password=""

# Optional parameters
useraccount_autologin="${useraccount_autologin}"
user_password_for_encryption="${user_password_for_encryption}"
hostname="${hostname}"
locale="${locale}"
keymap="${keymap}"
timezone="${timezone}"
grub_hide="${grub_hide}"
nvidia="${nvidia}"
surface="${surface}"
kernel_parameters="${kernel_parameters}"

# Optional partitioning parameters
# By default linuxloops create a standard setup with 3 partitions (EFI, Boot and Root)
# Additional partitions can be added by defining partition4 to partition8 variables in the format "<Mountpoint>*<Name>*<FS Type>*<Mountoptions>*<Size in GB>*<Encryption>"
efi_name="${efi_name}"
efi_mountoptions="${efi_mountoptions}"
boot_name="${boot_name}"
boot_mountoptions="${boot_mountoptions}"
root_name="${root_name}"
root_fstype="${root_fstype}"
root_mountoptions="${root_mountoptions}"
root_encryption="${root_encryption}"
partition4="${partition4}"
partition5="${partition5}"
partition6="${partition6}"
partition7="${partition7}"
partition8="${partition8}"
# Swap:A swap file of the defined size will be created on the rootfs (Swap is not mandatory but a minimum of 4 GB is generally recommended or 1.5 times the amount of RAM if you intend to use hibernation)
swap_size=${swap_size}

# List of additional packages to install (default: "")
custom_packages="${custom_packages}"

# Script that will be executed as root at the end of the install process (default: "").
# Make sure to escape special characters inside the "custom_commands" variable, notably double quotes and dollar signs (for variables that should be interpreted inside the target install).
custom_commands="${custom_commands}"

DECLARATIVE_CONFIG
chown ${SUDO_USER}:$(id -g ${SUDO_UID}) "${generate_config}"
}

gui_create_env()
{
if [ -f ./linuxloops_gui.py ] || [ ! -f "${linuxloopsdir}"/gui/linuxloops_gui.py ] || [ ! -f "${linuxloopsdir}"/gui/linuxloops.sha256sum ] || [ "$(sha256sum ${0} | cut -d' ' -f1)" != "$(cat ${linuxloopsdir}/gui/linuxloops.sha256sum)" ]; then
	echo "Creating the GUI python environment, please wait..."
	rm -rf "${linuxloopsdir}"/gui
	sudo -u ${SUDO_USER} mkdir -p "${linuxloopsdir}"/gui &&
	(if [ -f ./linuxloops_gui.py ]; then
		sudo -u ${SUDO_USER} cp ./linuxloops_gui.py "${linuxloopsdir}"/gui/linuxloops_gui.py
	else
		cat >"${linuxloopsdir}"/gui/linuxloops_gui.py <<'LINUXLOOPS_GUI'
import argparse
import os
import re
import subprocess
import sys
import webview

"""
Linuxloops GUI app made with pywebview.
"""

parser = argparse.ArgumentParser()
parser.add_argument('-t', '--title', required=True, help="Window title")
parser.add_argument('-m', '--menu', required=True, help="Menu to display")
parser.add_argument('-p', '--parameters', required=False, help="Parameters to use")
parser.add_argument('-q', '--question', required=False, help="Question to display")
parser.add_argument('-w', '--writepid', required=False, help="Write pid to file")
args = parser.parse_args()

html = """
<!DOCTYPE html>
<html>
<head lang="en">
<meta charset="UTF-8">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css" integrity="sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls" crossorigin="anonymous">
<style>
body {
    background: #ffffff;
    color: #555555;
    font-family: Ubuntu, "times new roman", times, roman, serif;
    text-align: center;
}

table, th, tr, td {
    box-sizing: border-box;
    margin-bottom: 0px !important;
    margin-top: 0px !important;
    padding-bottom: 0px !important;
    padding-top: 0px !important;
    text-align: center;
}

th, tr, td {
    margin-left: 0px !important;
    margin-right: 0px !important;
    padding-left: 5px !important;
    padding-right: 5px !important;
    width: auto;
}

input:disabled, select:disabled {
     color: #bbbbbb;
}

input:not(:disabled), select:not(:disabled) {
     border: 2px solid lightgrey;
     color: #555555;
}

.containing-table {
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
    padding: 10px;
    display: none;
    width: fit-content;
    max-height: 320px;
    overflow: auto;
    border: 1px dotted blue;
    text-align: left;
}

.center {
   width: 100%;
   text-align: center;
}

.round {
  border-radius: 10%;
  width: 150px;
}

.tooltip {
  position: relative;
  display: inline-block;
  border-bottom: 1px dotted black; /* If you want dots under the hoverable text */
}

.tooltip .tooltiptext {
  display: none;
  width: 300px;
  background-color: grey;
  color: #fff;
  text-align: center;
  padding: 5px 0;
  border-radius: 6px;
  padding-left: 5px;
  padding-right: 5px;
  position: absolute;
  z-index: 1;
  bottom: 100%;
  margin-left: -60px;
}

.tooltip:hover .tooltiptext {
  display: inline-flex;
}

.progress-bar {
  height: 4px;
  background-color: rgba(5, 114, 206, 0.2);
  width: 80%;
  overflow: hidden;
  margin: auto;
}

.progress-bar-value {
  width: 100%;
  height: 100%;
  background-color: rgb(5, 114, 206);
  animation: indeterminateAnimation 1s infinite linear;
  transform-origin: 0% 50%;
}

@keyframes indeterminateAnimation {
  0% {
    transform:  translateX(0) scaleX(0);
  }
  40% {
    transform:  translateX(0) scaleX(0.4);
  }
  100% {
    transform:  translateX(100%) scaleX(0.5);
  }
}
</style>
</head>
<body>
<span align="center"><h1><img style="vertical-align: middle; margin-right: 15px" src="https://github.com/sebanc/linuxloops/raw/main/linuxloops.png" width="64px" alt="Logo"/>Linuxloops</h1></span>
<hr style="border-top: 1px solid #bbbbbb;">
"""
if args.menu == "radiofirst":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">Exit</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }
    
    function exit() {
        pywebview.api.destroy()
    }

    function select() {
        const radioButtons = document.querySelectorAll('input[name="radio"]')
            for (const radioButton of radioButtons) {
                if (radioButton.checked) {
                    radio = radioButton.value
                    break
                }
            }
        pywebview.api.selected(radio)
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
        pywebview.api.generate_radio().then(showResponse)
    })
</script>
"""
elif args.menu == "radio":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">&laquo; Previous</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }
    
    function exit() {
        pywebview.api.selected("return")
    }

    function select() {
        const radioButtons = document.querySelectorAll('input[name="radio"]')
            for (const radioButton of radioButtons) {
                if (radioButton.checked) {
                    radio = radioButton.value
                    break
                }
            }
        pywebview.api.selected(radio)
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
        pywebview.api.generate_radio().then(showResponse)
    })
</script>
"""
elif args.menu == "range":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">&laquo; Previous</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }
    
    function exit() {
        pywebview.api.selected("return")
    }

    function select() {
        pywebview.api.selected(document.getElementById('installsize').value)
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
        pywebview.api.generate_range().then(showResponse)
    })
</script>
"""
elif args.menu == "disk":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">&laquo; Previous</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }
    
    function exit() {
        pywebview.api.selected("return")
    }

    function select() {
        const radioButtons = document.querySelectorAll('input[name="radio"]')
            for (const radioButton of radioButtons) {
                if (radioButton.checked) {
                    radio = radioButton.id
                    break
                }
            }
        pywebview.api.selected(radio)
    }
    
    function refresh_drives() {
        pywebview.api.selected("refresh")
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
        pywebview.api.generate_disk().then(showResponse)
    })
</script>
"""
elif args.menu == "image":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">&laquo; Previous</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }
    
    function exit() {
        pywebview.api.selected("return")
    }

    function create_image_file() {
        pywebview.api.save_image()
    }

    function select() {
        if (document.getElementById("image_path").value == "") {
            alert("Please select the image file path before continuing.")
        } else {
            pywebview.api.selected(document.getElementById("image_path").value)
        }
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
        pywebview.api.generate_image().then(showResponse)
    })
</script>
"""
elif args.menu == "partitioning":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">&laquo; Previous</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }

    function exit() {
        pywebview.api.selected("return")
    }

    function select() {
        const radioButtons = document.querySelectorAll('input[name="radio"]')
            for (const radioButton of radioButtons) {
                if (radioButton.checked) {
                    radio = radioButton.value
                    break
                }
            }
        pywebview.api.selected(document.getElementById('swapsize').value + '^' + radio)
    }

    function custom_partitioning() {
        pywebview.api.selected('custom')
    }
    
    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
        pywebview.api.generate_partitioning().then(showResponse)
    })
</script>
"""
elif args.menu == "partitions":
        html += """
<br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">&laquo; Previous</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }
    
    function exit() {
        pywebview.api.selected("return")
    }

    function verify(result) {
        if (result == "ko") { alert(thiserror); thiselement.value = "" }
    }

    function isValidName(element) {
        thiselement = element
        thiserror = "Invalid partition name format (should match the regex '[a-zA-Z0-9_-]*$')"
        regex = '[a-zA-Z0-9_-]*$'
        pywebview.api.regex_match(element.value, regex).then(verify)
    }
    
    function isValidMountpoint(element) {
        if (element.value == "") { return }
        i = element.value.length
        while (i > 1) { if (element.value.substring(i - 1, i) == "/" && element.value.substring(i - 2, i - 1) == "/") { element.value = element.value.substring(0, i - 2) + element.value.substring(i-1, element.value.length) }; i = i - 1 }
        if (element.value != "/" && element.value.substring(element.value.length - 1, element.value.length) == "/") { element.value = element.value.substring(0, element.value.length - 1) }
        switch(element.value) {
            case '/':
            case '/bin':
            case '/boot':
            case '/boot/efi':
            case '/etc':
            case '/nix':
            case '/nix/store':
            case '/sbin':
            case '/usr':
            case '/usr/bin':
            case '/usr/lib':
            case '/usr/lib/x86_64-linux-gnu':
            case '/usr/lib64':
            case '/usr/sbin':
            case '/var':
            case '/var/lib':
            case '/var/lib/nixos':
            case '/var/log':
                alert("The following mounpoints are not supported: /, /bin, /boot, /boot/efi, /etc, /nix, /nix/store, /sbin, /usr, /usr/bin, /usr/lib, /usr/lib/x86_64-linux-gnu, /usr/lib64, /usr/sbin, /var, /var/lib, /var/lib/nixos, /var/log")
                element.value = ""
                return
        }
        for (i = 3; i < 8; i++) {
            if (element != document.getElementById('mountpoint' + i) && document.getElementById('mountpoint' + i).value && element.value == document.getElementById('mountpoint' + i).value) {
                alert("The mounpoint " + element.value + " is already defined.")
                element.value = ""
                return
            }
        }
        thiselement = element
        thiserror = "Invalid partition mountpoint format (should match the regex '/[a-zA-Z0-9_/-]*$')"
        regex = '/[a-zA-Z0-9_/-]*$'
        pywebview.api.regex_match(element.value, regex).then(verify)
    }

    function isValidMountoptions(element) {
        thiselement = element
        thiserror = "Invalid partition mountoptions format (should match the regex '[a-zA-Z0-9,:=.-]*$')"
        regex = '[a-zA-Z0-9,:=.-]*$'
        pywebview.api.regex_match(element.value, regex).then(verify)
    }

    function checkSize(element, disksize, maxswap) {
        if (document.getElementById('size2').value && document.getElementById('size2').value < 12) { element.value=12; alert('Root partition size should be at least 12 GB.') }
        else if (element.value && element.value < 0) { element.value=""; alert('Partition size should be a positive integer') }
        totalsize = 1
        for (i = 2; i < 8; i++) { if (document.getElementById('size' + i).value) { totalsize = totalsize + Number(document.getElementById('size' + i).value) } }
        if (totalsize > disksize) { totalsize = totalsize - element.value; element.value = ""; alert('Total partitions size cannot exceed the remaining size of ' + disksize + ' GB.') }
        document.getElementById('remaining').innerHTML = disksize - totalsize
        possible_swap = document.getElementById('size2').value - 10
        if (possible_swap > maxswap) { possible_swap = maxswap }
        document.getElementById('range').max = possible_swap
        if (document.getElementById('swapsize').value > possible_swap) { document.getElementById('swapsize').value = possible_swap }
    }

    function select() {
        partitions = ''
        for (i = 0; i < 8; i++) {
            if (document.getElementById('mountpoint' + i).value != "" || document.getElementById('name' + i).value != "" || document.getElementById('fstype' + i).value != "" || document.getElementById('size' + i).value != "") {
                if (document.getElementById('mountpoint' + i).value == "") { alert("Mountpoint not provided for partition " + i + "."); return }
                if (document.getElementById('name' + i).value == "") { alert("Name not provided for partition " + i + "."); return }
                if (document.getElementById('fstype' + i).value == "") { alert("Filesystem type not selected for partition " + i + "."); return }
                if (document.getElementById('size' + i).value == "") { alert("Size not provided for partition " + i + "."); return }
            }
            encryption = []
            if (document.getElementById('encryption' + i).checked) {
                encryption[i] = "Yes"
            } else {
                encryption[i] = "No"
            }
            if (i == 0) { partitions = partitions + document.getElementById("mountoptions" + i).value + '^' }
            else if (i == 1) { partitions = partitions + document.getElementById("name" + i).value + '^' + document.getElementById("mountoptions" + i).value + '^' }
            else if (i == 2) { partitions = partitions + document.getElementById("name" + i).value + '^' + document.getElementById("fstype" + i).value + '^' + document.getElementById("mountoptions" + i).value + '^' + document.getElementById("size" + i).value + '^' + encryption[i] + '^' }
            else { partitions = partitions + document.getElementById("mountpoint" + i).value + '^' + document.getElementById("name" + i).value + '^' + document.getElementById("fstype" + i).value + '^' + document.getElementById("mountoptions" + i).value + '^' + document.getElementById("size" + i).value + '^' + encryption[i] + '^' }
        }
        pywebview.api.selected(document.getElementById('swapsize').value + '^' + partitions)
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.generate_partitions_table().then(showResponse)
    })
</script>
"""
elif args.menu == "user":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">&laquo; Previous</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }
    
    function exit() {
        pywebview.api.selected("return")
    }

    function verify(result) {
        if (result == "ko") { alert(thiserror); thiselement.value = "" }
    }

    function isValidUsername(element) {
        thiselement = element
        thiserror = "Invalid Username (username can only contain lowercase and numerical characters)."
        regex = '^[a-z][-a-z0-9]*$'
        pywebview.api.regex_match(element.value, regex).then(verify)
    }

    function isValidPassword(element) {
        thiselement = element
        thiserror = "Invalid character in password (passwords cannot contain the ^ character)."
        regex = '[^^^]*$'
        pywebview.api.regex_match(element.value, regex).then(verify)
    }

    function isValidPasswordVerification(element) {
        if (document.getElementById("user_password").value == "" || document.getElementById("user_password").value != element.value) { alert("Verification password does not match."); element.value = "" }
    }
    
    function display_encryption_password() {
        if (document.getElementById("encryption_auto").checked) { document.getElementById("encryption_box").style.display = "none" }
        else { document.getElementById("encryption_box").style.display = "block" }
    }

    function select() {
        username=document.getElementById("username").value
        user_password=document.getElementById("user_password").value
        user_password_verification=document.getElementById("user_password_verification").value
        if (document.getElementById("encryption_password")) { encryption_password=document.getElementById("encryption_password").value } else { encryption_password="" }
        if (document.getElementById("encryption_password_verification")) { encryption_password_verification=document.getElementById("encryption_password_verification").value } else { encryption_password_verification="" }
        password_two=document.getElementById("user_password_verification").value
        if (document.getElementById("autologin") && document.getElementById("autologin").checked) { autologin = "Yes" } else { autologin = "No" }
        if (document.getElementById("encryption_auto") && document.getElementById("encryption_auto").checked) { encryption_auto = "Yes" } else { encryption_auto = "No" }
        pywebview.api.selected(username + '^' + user_password + '^' + user_password_verification + '^' + autologin + '^' + encryption_auto + '^' + encryption_password + '^' + encryption_password_verification)
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
        pywebview.api.generate_user().then(showResponse)
    })
</script>
"""
elif args.menu == "parameters":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">&laquo; Previous</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }
    
    function exit() {
        pywebview.api.selected("return")
    }

    function select() {
        language=document.getElementById("language").value
        keymap=document.getElementById("keymap").value
        timezone=document.getElementById("timezone").value
        pywebview.api.selected(language + '^' + keymap + '^' + timezone)
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
        pywebview.api.generate_parameters().then(showResponse)
    })
</script>
"""
elif args.menu == "customizations":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div style="position: fixed; bottom: 15px; left: 15px;"><a onclick="exit()" href="#" class="pure-button round">&laquo; Previous</a></div>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="select()" href="#" class="pure-button pure-button-primary round">Next &raquo;</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function showResponse(response) {
        document.getElementById('response-container').innerHTML = response
        document.getElementById('response-container').style.display = 'block'
    }
    
    function exit() {
        pywebview.api.selected("return")
    }

    function open_custom_file() {
        pywebview.api.open_custom_file()
    }

    function select() {
        if (document.getElementById("hostname")) { hostname = document.getElementById("hostname").value }
	if (document.getElementById("nvidia") && document.getElementById("hide_grub").checked) { hide_grub = "Yes" } else { hide_grub = "No" }
        if (document.getElementById("nvidia") && document.getElementById("nvidia").checked) { nvidia = "Yes" } else { nvidia = "No" }
        if (document.getElementById("surface") && document.getElementById("surface").checked) { surface = "Yes" } else { surface = "No" }
        if (document.getElementById("custom_packages")) { custom_packages = document.getElementById("custom_packages").value }
        if (document.getElementById("custom_script")) { custom_script = document.getElementById("custom_script").value }
        if (document.getElementById("kernel_parameters")) { kernel_parameters = document.getElementById("kernel_parameters").value }
        if (document.querySelectorAll('input[name="mirror"]')) {
            const mirrors = document.querySelectorAll('input[name="mirror"]')
            mirrorlist = ''
            for (const mirror of mirrors) {
                mirrorlist = mirrorlist + mirror.value + '^'
            }
            pywebview.api.selected(hostname + '^' + hide_grub + '^' + nvidia + '^' + surface + '^' + custom_packages + '^' + custom_script + '^' + kernel_parameters + '^' + mirrorlist)
        }
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
        pywebview.api.generate_customizations().then(showResponse)
    })
</script>
"""
elif args.menu == "progress":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div class="containing-table" id="response-container"></div>
<div class="center" style="margin-top: 100px;">
  <div class="progress-bar">
    <div class="progress-bar-value"></div>
  </div>
</div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
    })
</script>
"""
        if args.writepid:
            pidfile = open(args.writepid, 'w')
            pidfile.write(str(os.getpid()))
            pidfile.close()
elif args.menu == "finished":
        html += """
<div id='title' style="margin-top: 30px;"></div><br>
<div style="position: fixed; bottom: 15px; right: 15px;"><a onclick="exit()" href="#" class="pure-button pure-button-primary round">Exit</a></div>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }

    function copy_configuration() {
        document.getElementById('configuration').select()
        document.execCommand("copy");
    }
    
    function exit() {
        pywebview.api.destroy()
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
    })
</script>
"""
elif args.menu == "messagebox":
        html = """
<!DOCTYPE html>
<html>
<head lang="en">
<meta charset="UTF-8">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css" integrity="sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls" crossorigin="anonymous">
<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Ubuntu:regular,bold&subset=Latin">
<body>
<div style="display: flex; height: 100px; width: 100%;">
    <img src="https://cdn.pixabay.com/photo/2015/06/09/16/12/error-803716_1280.png" style="height: 80px; margin-top: auto; margin-bottom: auto;">
    <div id='title' style="text-align: center; margin-left: 30px; margin-right: 30px; margin-top: auto; margin-bottom: auto; width: 500px;"></div>
</div>
<div style="width: 100%; text-align: center;"><a onclick="exit()" href="#" class="pure-button">Ok</a></span>
<script>
    function showText(text) {
        document.getElementById('title').innerHTML = text
    }
    
    function exit() {
        pywebview.api.destroy()
    }

    window.addEventListener('pywebviewready', function() {
        pywebview.api.add_text().then(showText)
    })
</script>
"""
else:
        if args.menu != "confirmation" and args.menu != "file-select" and args.menu != "file-open" and args.menu != "jsalert":
            print("Please select a menu to display.")
            sys.exit()
html += """
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>
"""

class linuxloops:
    def add_text(self):
        innerhtml = args.question
        return innerhtml
    def regex_match(self, path, regex):
        p = re.compile(regex)
        m = p.fullmatch(path)
        if m is not None:
            return "ok"
        else:
            return "ko"
    def generate_radio(self):
        listargs=args.parameters.split('^')
        innerhtml = ''
        for i in listargs:
            innerhtml += '<label for="' + i + '" class="pure-radio" style="margin-right: 50px;"><input type="radio" id="' + i + '" name="radio" value="' + i + '"/> ' + i.replace('_', ' ') + '</label><br>'
        return innerhtml
    def generate_range(self):
        listargs=args.parameters.split('^')
        innerhtml = '<div class="center"><input type="range" id="range" name="range" step="1" min="' + listargs[0] + '" value="' + listargs[1] + '" max="' + listargs[2] + '" oninput="installsize.value=range.value" style="width: 400px"><br><input type="text" id="installsize" value="' + listargs[1] + '" style="width: 50px; text-align: center;" disabled></div>'
        return innerhtml
    def generate_disk(self):
        listargs = args.parameters.split('^')
        innerhtml = '<table class="pure-table center"><thead style="vertical-align: middle;"><tr><th style="padding: 5px !important;">Select</th><th style="padding: 5px !important;">Drive ID</th><th style="padding: 5px !important;">Drive size</th><th style="padding: 5px !important;">Drive name</th></tr></thead><tbody>'
        for i in listargs:
            disk = i.split('|')
            innerhtml += '<tr><td style="padding: 5px !important;"><input type="radio" class="pure-radio" name="radio" id="' + disk[0] + '" /></td><td style="padding: 5px !important;">' + disk[0] + '</td><td style="padding: 5px !important;">' + disk[1] + '</td><td style="padding: 5px !important;">' + disk[2] + '</td></tr>'
        innerhtml += '</tbody></table><br><a onclick="refresh_drives()" href="#" class="pure-button center">Refresh drives list</a>'
        return innerhtml
    def generate_image(self):
        innerhtml = '<a onclick="create_image_file()" href="#" class="pure-button">Create image file</a><input type="text" id="image_path" value="" style="margin-left: 10px; width: 300px;" disabled>'
        return innerhtml
    def generate_partitioning(self):
        listargs=args.parameters.split('^')
        innerhtml = '<div class="center" style="margin-bottom: 10px;">Select a standard partitioning option:</div>'
        i = 0
        while i < len(listargs):
            if i == 0:
                if int(listargs[i]) < 64:
                    swap_max = listargs[i]
                else:
                    swap_max = "64"
            else:
                innerhtml += '<label for="' + listargs[i] + '" class="pure-radio" style="margin-right: 20px; margin-bottom: 5px;"><input type="radio" id="' + listargs[i] + '" name="radio" value="' + listargs[i] + '"/> ' + listargs[i] + '</label><br>'
            i += 1
        innerhtml += '<div class="center" style="margin-top: 5px;"><div class="tooltip">Swap size:<div class="tooltiptext">A swap file of the defined size will be created on the rootfs (Swap is not mandatory but a minimum of 4 GB is generally recommended or 1.5 times the amount of RAM if you intend to use hibernation)</div></div>&nbsp&nbsp&nbsp<input type="range" id="range" name="range" step="1" min="0" value="0" max="' + swap_max + '" oninput="swapsize.value=range.value";" style="width: 200px; vertical-align: middle;">&nbsp&nbsp&nbsp<input type="text" id="swapsize" value="0" style="width: 50px; text-align: center;" disabled>&nbspGB</div><br><br>'
        innerhtml += '<div class="center"><div style="margin-bottom: 10px;">Or define a custom partitioning:</div><a onclick="custom_partitioning()" href="#" class="pure-button">Custom partitioning</a></div>'
        return innerhtml
    def generate_partitions_table(self):
        listargs=args.parameters.split('^')
        total_size=int(listargs[0])
        if listargs[1] == 'No':
            btrfs_supported=" disabled"
        else:
            btrfs_supported=""
        if total_size < 64:
            swap_max = total_size - 10
        else:
            swap_max = 64
        innerhtml = '<div class="center" style="margin-bottom: 10px;">Available space for the installation:&nbsp<span style="font-weight: bold;">' + str(total_size) + '</span> GB / Remaining space to allocate:&nbsp<span id="remaining" style="font-weight: bold;">0</span> GB</div><table class="pure-table center"><colgroup><col span="1"><col span="1" style="width: 100px;"><col span="1" style="width: 100px;"><col span="1"><col span="1" style="width: 180px;"><col span="1" style="width: 130px;"></colgroup><thead style="font-size: 14px; vertical-align: middle;"><tr><th>Partition<br>#</th><th>Mountpoint</th><th>Name</th><th>Filesystem<br>type</th><th>Specific mount options<br>(comma-separated list)</th><th>Size</th><th>Encryption</th></tr></thead><tbody>'
        for x in range(8):
            if x == 0:
                btrfs_hidden=btrfs_supported
                btrfs_selected=""
                ext4_hidden=""
                ext4_selected=""
                fat32_hidden=""
                fat32_selected=" selected"
                fstype_disabled=" disabled"
                size_disabled=" disabled"
                size="0.125"
                mountpoint_disabled=" disabled"
                mountpoint="/boot/efi"
                encryption_disabled=" disabled"
                mountoptions_disabled=""
                partition_name="EFI"
                partition_name_disabled=" disabled"
            elif x == 1:
                btrfs_hidden=btrfs_supported
                btrfs_selected=""
                ext4_hidden=""
                ext4_selected=" selected"
                fat32_hidden=" disabled"
                fat32_selected=""
                fstype_disabled=" disabled"
                size_disabled=" disabled"
                size="0.875"
                mountpoint_disabled=" disabled"
                mountpoint="/boot"
                encryption_disabled=" disabled"
                mountoptions_disabled=""
                partition_name="Boot"
                partition_name_disabled=""
            elif x == 2:
                btrfs_hidden=btrfs_supported
                btrfs_selected=""
                ext4_hidden=""
                ext4_selected=" selected"
                fat32_hidden=" disabled"
                fat32_selected=""
                fstype_disabled=""
                size_disabled=""
                size=str(total_size - 1)
                mountpoint_disabled=" disabled"
                mountpoint="/"
                encryption_disabled=""
                mountoptions_disabled=""
                partition_name="Root"
                partition_name_disabled=""
            else:
                btrfs_hidden=btrfs_supported
                btrfs_selected=""
                ext4_hidden=""
                ext4_selected=""
                fat32_hidden=" disabled"
                fat32_selected=""
                fstype_disabled=""
                fstype=""
                size_disabled=""
                size=""
                mountpoint_disabled=""
                mountpoint=""
                encryption_disabled=""
                mountoptions_disabled=""
                partition_name=""
                partition_name_disabled=""
            innerhtml += '<tr><td>' + str(x + 1) + '</td><td><input type="text" id="mountpoint' + str(x) + '" class="pure-u-1 pure-u-md-1-3 center" style="width: 90px;" onchange="isValidMountpoint(this)" value="' + mountpoint + '"' + mountpoint_disabled + '/></td><td><input type="text" id="name' + str(x) + '" class="pure-u-1 pure-u-md-1-3 center" value="' + partition_name + '" style="width: 80px;" onchange="isValidName(this)"' + partition_name_disabled + '/></td><td><select id="fstype' + str(x) + '" style="height: 24px;"' + fstype_disabled + '/><option></option><option' + fat32_selected + fat32_hidden + '>fat32</option><option' + ext4_selected + ext4_hidden + '>ext4</option><option' + btrfs_selected + btrfs_hidden + '>btrfs</option></select></td><td><input type="text" id="mountoptions' + str(x) + '" class="pure-u-1 pure-u-md-1-3 center" style="width: 160px;" onchange="isValidMountoptions(this)" value=""' + mountoptions_disabled + '/></td><td><input type="number" class="pure-u-1 pure-u-md-1-3 center" style="width: 80px" min="0" onchange="checkSize(this, ' + str(total_size) + ', ' + str(swap_max) + ')" name="size" id="size' + str(x) + '" value="' + size + '"' + size_disabled + '/><span style="vertical-align: bottom;">&nbspGB</span></td><td><input type="checkbox" id="encryption' + str(x) + '" class="pure-checkbox center"' + encryption_disabled + '/></td></tr>'
        innerhtml += '</tbody></table><div class="center" style="margin-top: 5px;"><div class="tooltip">Swap size:<div class="tooltiptext">A swap file of the defined size will be created on the rootfs (Swap is not mandatory but a minimum of 4 GB is generally recommended or 1.5 times the amount of RAM if you intend to use hibernation)</div></div>&nbsp&nbsp&nbsp<input type="range" id="range" name="range" step="1" min="0" value="0" max="' + str(swap_max) + '" oninput="swapsize.value=range.value" style="width: 200px; vertical-align: middle;">&nbsp&nbsp&nbsp<input type="text" id="swapsize" value="0" style="width: 50px; text-align: center;" disabled>&nbspGB</div>'
        return innerhtml
    def generate_user(self):
        listargs=args.parameters.split('^')
        if listargs[1] == 'Yes':
            password_field = 'Encryption password:'
        else:
            password_field = 'User password:'
        innerhtml = ''
        innerhtml += '<div style="width: 300px; display: inline-block;">Username:</div><input type="text" id="username" name="username" style="width: 200px; margin-left: 10px;" onchange="isValidUsername(this)"/>'
        innerhtml += '<br><br><div style="width: 300px; display: inline-block;">User password:</div><input type="password" id="user_password" name="user_password" style="width: 200px; margin-left: 10px;" onchange="isValidPassword(this)"/>'
        innerhtml += '<br><br><div style="width: 300px; display: inline-block;">Confirm user password:</div><input type="password" id="user_password_verification" name="user_password_verification" style="width: 200px; margin-left: 10px;" onchange="isValidPasswordVerification(this)"/>'
        if listargs[0] != 'None':
            innerhtml += '<br><br><div style="width: 300px; display: inline-block;">Enable user autologin:</div><input align="center" type="checkbox" id="autologin" name="autologin" style="width: 200px; margin-left: 10px;"/>'
        if listargs[1] == 'Yes':
            innerhtml += '<br><br><div style="width: 300px; display: inline-block;">Use user password for encryption:</div><input align="center" type="checkbox" id="encryption_auto" name="autologin" style="width: 200px; margin-left: 10px;" onclick="display_encryption_password();" checked/>'
            innerhtml += '<span style="display: none;" id="encryption_box">'
            innerhtml += '<br><div style="width: 300px; display: inline-block;">Encryption password:</div><input type="password" id="encryption_password" name="encryption_password" style="width: 200px; margin-left: 10px;"/>'
            innerhtml += '<br><br><div style="width: 300px; display: inline-block;">Confirm encryption password:</div><input type="password" id="encryption_password_verification" name="encryption_password_verification" style="width: 200px; margin-left: 10px;"/>'
            innerhtml += '</span>'
        return innerhtml
    def generate_parameters(self):
        listargs=args.parameters.split('^')
        languages=listargs[0].split(';')
        keymaps=listargs[2].split(';')
        timezones=listargs[4].split(';')
        innerhtml = '<div class="center">Language selection:<br><select id="language" style="padding: 0">'
        for x in languages:
            language_code=x.split(" ")
            if language_code[0] == listargs[1]:
                innerhtml += '<option value="' + x + '" selected>' + x + '</option>'
            else:
                innerhtml += '<option value="' + x + '">' + x + '</option>'
        innerhtml += '</select><br>'
        innerhtml += '<br>Keyboard configuration:<br><select id="keymap" style="padding: 0">'
        for y in keymaps:
            keymap_code=y.split(" ")
            if keymap_code[0] == listargs[3]:
                innerhtml += '<option value="' + y + '" selected>' + y + '</option>'
            else:
                innerhtml += '<option value="' + y + '">' + y + '</option>'
        innerhtml += '</select><br>'
        innerhtml += '<br>Timezone:<br><select id="timezone" style="padding: 0">'
        for z in timezones:
            timezone_code=z.split(" ")
            if timezone_code[0] == listargs[5]:
                innerhtml += '<option value="' + z + '" selected>' + z + '</option>'
            else:
                innerhtml += '<option value="' + z + '">' + z + '</option>'
        innerhtml += '</select></div>'
        return innerhtml
    def generate_customizations(self):
        listargs=args.parameters.split('^')
        global directory
        directory = listargs[4]
        innerhtml = '<table><tbody>'
        if listargs[0] != '':
            innerhtml += '<tr><td style="width: 250px; height: 30px;">Hostname:</td><td style="width: 400px; height: 30px;"><input type="text" id="hostname" value="' + listargs[0] + '" style="width: 390px;"></td></tr>'
        if listargs[1] != '':
            innerhtml += '<tr><td style="width: 250px; height: 30px;"><label for="hide_grub">Hide GRUB Bootloader</td><td style="width: 400px; height: 30px;"></label><input type="checkbox" id="hide_grub" style="width: 390px;"></td></tr>'
        if listargs[2] != '':
            innerhtml += '<tr><td style="width: 250px; height: 30px;"><label for="nvidia">Install Nvidia proprietary drivers</td><td style="width: 400px; height: 30px;"></label><input type="checkbox" id="nvidia" style="width: 390px;"></td></tr>'
        if listargs[3] != '':
            innerhtml += '<tr><td style="width: 250px; height: 30px;"><label for="surface">Install Microsoft Surface patches</label></td><td style="width: 400px; height: 30px;"><input type="checkbox" id="surface" style="width: 390px;"></td></tr>'
        if listargs[4] != '':
            innerhtml += '<tr><td style="width: 250px; height: 30px;">Custom packages (space-separated list):</td><td style="width: 400px; height: 30px;"><input type="text" id="custom_packages" value="" style="width: 390px;"></td></tr>'
        if listargs[5] != '':
            innerhtml += '<tr><td style="width: 250px; height: 30px;">Apply custom script (at the end of the install process):</td><td style="width: 400px; height: 30px;"><a onclick="open_custom_file()" href="#" class="pure-button" style="height: 25px; width: 80px; vertical-align: middle; padding: 0; margin: 0;">Select file</a><input type="text" id="custom_script" value="" style="margin-left: 10px; width: 300px;" disabled></td></tr>'
        if listargs[6] != '':
            innerhtml += '<tr><td style="width: 250px; height: 30px;">Additional kernel parameters (space-separated list):</td><td style="width: 400px; height: 30px;"><input type="text" id="kernel_parameters" value="" style="width: 390px;"></td></tr>'
        if listargs[7] != '':
            mirrors = listargs[7].split(' ')
            for i in mirrors:
                innerhtml += '<tr><td style="width: 250px; height: 30px;">Use specific ' + i + ' mirror:</td><td style="width: 400px; height: 30px;"><input type="text" name="mirror" id="mirror_' + i + '" value="" style="width: 390px;"></td></tr>'
        innerhtml += '</tbody></table>'
        return innerhtml
    def selected(self, return_value):
        window.destroy()
        print(return_value)
        sys.exit()
    def open_custom_file(self):
        exepath = os.path.dirname(sys.executable) + '/' + os.path.basename(sys.executable)
        result = subprocess.run([exepath, os.path.realpath(__file__), '-m', 'file-open', '-t', 'Custom script selection', '-p', directory], text = True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
        listargs=result.stdout.split("'")
        if len(listargs) == 3:
            window.evaluate_js('document.getElementById("custom_script").value = "' + listargs[1] + '"', callback=None)
        else:
            window.evaluate_js('document.getElementById("custom_script").value = ""', callback=None)
    def open_file_dialog(window):
        result = window.create_file_dialog(webview.OPEN_DIALOG, allow_multiple=False, directory=args.parameters)
        window.destroy()
        if result is not None:
            print(result)
        sys.exit()
    def save_image(self):
        exepath = os.path.dirname(sys.executable) + '/' + os.path.basename(sys.executable)
        result = subprocess.run([exepath, os.path.realpath(__file__), '-m', 'file-select', '-t', 'Save image file', '-p', args.parameters], text = True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
        listargs=result.stdout.splitlines()
        if len(listargs) == 1:
            window.evaluate_js('document.getElementById("image_path").value = "' + listargs[0] + '"', callback=None)
        else:
            window.evaluate_js('document.getElementById("image_path").value = ""', callback=None)
    def save_file_dialog(window):
        head_tail = os.path.split(args.parameters)
        result = window.create_file_dialog(webview.SAVE_DIALOG, directory=head_tail[0], save_filename=head_tail[1])
        window.destroy()
        if result is not None:
            print(result[0])
        sys.exit()
    def open_confirmation_dialog(window):
        result = window.create_confirmation_dialog('Linuxloops - ' + args.title, args.question)
        window.destroy()
        if result:
            print('Next')
        sys.exit()
    def destroy(self):
        window.destroy()
        sys.exit()

if __name__ == '__main__':
    api = linuxloops()
    if args.menu == "confirmation":
        window = webview.create_window('Linuxloops - ' + args.title, hidden=True, width=800, height=600)
        webview.start(linuxloops.open_confirmation_dialog, window, gui='gtk')
    elif args.menu == "file-select":
        window = webview.create_window('Linuxloops - ' + args.title, hidden=True, width=800, height=600)
        webview.start(linuxloops.save_file_dialog, window, gui='gtk')
    elif args.menu == "jsalert":
        window = webview.create_window('Linuxloops - ' + args.title, html='<html><body><script>alert("' + args.title + ': ' + args.question + '"); window.addEventListener("pywebviewready", function() { pywebview.api.destroy() });</script></body></html>', hidden=True, width=0, height=0)
        webview.start(gui='gtk')
    elif args.menu == "messagebox":
        window = webview.create_window('Linuxloops - ' + args.title, html=html, js_api=api, resizable=False, width=600, height=150)
        webview.start(gui='gtk')
    elif args.menu == "file-open":
        window = webview.create_window('Linuxloops - ' + args.title, hidden=True, width=800, height=600)
        webview.start(linuxloops.open_file_dialog, window, gui='gtk')
    else:
        window = webview.create_window('Linuxloops - ' + args.title, html=html, js_api=api, resizable=False, width=800, height=600)
        webview.start(gui='gtk')
LINUXLOOPS_GUI
chown ${SUDO_USER}:$(id -g ${SUDO_UID}) "${linuxloopsdir}"/gui/linuxloops_gui.py
fi) &&
	sudo -u ${SUDO_USER} bash<<PYTHONBUILD
python3 -m venv --system-site-packages "${linuxloopsdir}"/gui &&
source "${linuxloopsdir}"/gui/bin/activate &&
"${linuxloopsdir}"/gui/bin/pip install --upgrade pip pywebview &&
echo "$(sha256sum ${0} | cut -d' ' -f1)" > "${linuxloopsdir}"/gui/linuxloops.sha256sum
PYTHONBUILD
fi
}

gui_launch()
{
source "${linuxloopsdir}"/gui/bin/activate && QTWEBENGINE_DISABLE_SANDBOX=1 WEBKIT_FORCE_SANDBOX=0 WEBKIT_DISABLE_COMPOSITING_MODE=1 "${linuxloopsdir}"/gui/bin/python "${linuxloopsdir}"/gui/linuxloops_gui.py "${@}" 2>/tmp/linuxloops_gui.log
}

gui_installer()
{
gui_create_env
until false; do
	distribution=$(gui_launch -m radiofirst -t "Distribution selection" -p "$(echo ${available_distributions[@]} | sed 's@ @^@g')" -q "Welcome to the Linuxloops installer. Which distribution do you want to install ?")
	if [ -z "${distribution}" ] || [ "${distribution}" == "return" ]; then exit 1; fi
	check_home_space
	if [ $(( ($(df -k --output=avail "${linuxloopsdir}" | sed 1d) / 1024 / 1024) - ${available_space_needed} )) -lt 0 ]; then
		gui_launch -m messagebox -t "Not enough space in home directory" -q "To install ${distribution} you need ${available_space_needed} GB of available space in your home directory but you only have $(($(df -k --output=avail ${HOME} | sed 1d) / 1024 / 1024)) GB."
		exit 1
	fi
	distribution_parameters
	until false; do
		version=$(gui_launch -m radio -t "Version selection" -p "$(echo ${available_versions_longname[@]} | sed 's@ @^@g')" -q "Which version do you want to install ?" | cut -d'_' -f1)
		if [ -z "${version}" ]; then exit 1; fi
		if [ "${version}" == "return" ]; then break; continue; fi
		distribution_version_parameters
		until false; do
			environment=$(gui_launch -m radio -t "Environment selection" -p "$(echo ${available_environments[@]} | sed 's@ @^@g')" -q "Which environment do you want to install ?")
			if [ -z "${environment}" ]; then exit 1; fi
			if [ "${environment}" == "return" ]; then break; continue; fi
			until false; do
				if [ -z "${wsl}" ]; then install_type=$(gui_launch -m radio -t "Installation type" -p "disk^image" -q "Do you want to install ${distribution} on a disk or in an image file ?"); else install_type="image"; fi
				if [ -z "${install_type}" ]; then exit 1; fi
				if [ "${install_type}" == "return" ]; then break; continue; fi
				until false; do
					if [ "${install_type}" == "disk" ]; then
						local t
						local list
						local device
						local size
						t=0
						list=""
						for i in $(lsblk -drnbpf -o NAME,SIZE); do
							if [ $((t % 2)) == 0 ]; then device=${i}; fi
							if [ $((t % 2)) == 1 ]; then
								size=$((i / 1024 /1024 / 1024))
								if [ ! -z "${device}" ] && [ ! -z "${size}" ] && [ $((size - 14)) -ge 0 ] && ! echo "${device}" | grep -q "/dev/loop" && ! echo ${device} | grep -q $(basename $(realpath "/sys/class/block/$(lsblk -oMOUNTPOINT,PKNAME -rn | grep '/ ' | cut -d' ' -f2)/..")); then
									if [ "${device}" != "/dev/$(lsblk --inverse $(realpath $(df ${0} | grep '^/' | cut -d' ' -f1)) -io NAME | cut -d'-' -f2 | tail -1)" ] && [ -z "$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)" ] || ([ ! -z "$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)" ] && [ "${device}" != "/dev/$(lsblk -ndo pkname $(blkid --match-token PARTUUID=$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2) | cut -d':' -f1))" ]); then if [ -z "${list}" ]; then list="${device}|${size}|$(cat /sys/class/block/$(echo ${device} | sed 's@/dev/@@g')/device/model 2>/dev/null) $(cat /sys/class/block/$(echo ${device} | sed 's@/dev/@@g')/device/vendor 2>/dev/null)"; else list="${list}^${device}|${size}|$(cat /sys/class/block/$(echo ${device} | sed 's@/dev/@@g')/device/model 2>/dev/null) $(cat /sys/class/block/$(echo ${device} | sed 's@/dev/@@g')/device/vendor 2>/dev/null)"; fi; fi
								fi
							fi
							t=$((t + 1))
						done
						destination=$(gui_launch -m disk -t "Drive selection" -p "${list}" -q "Select the target drive:" | cut -d' ' -f1)
						if [ -z "${destination}" ]; then exit 1; elif [ "${destination}" == "refresh" ]; then continue; fi
						if [ "${destination}" == "return" ]; then break; continue; fi
						fullpath="${destination}"
						if [ "${distribution}" == "BlissOS" ] || [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "Tails" ]; then
							if [ $(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) - 14 )) -eq 0 ]; then
								install_size=14
							else
								install_size=$(gui_launch -m range -t "Install size selection" -p "14^$(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) ))^$(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) ))" -q "This drive has $(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) )) GB available.<br>How much would you like to allocate for ${distribution} ?")
							fi
						else
							install_size=$(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) ))
						fi
						if [ -z "${install_size}" ]; then exit 1; fi
						if [ "${install_size}" == "return" ]; then continue; fi
						if [ "${install_size}" -eq $(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) )) ]; then install_sizeMB=$(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024) )); else install_sizeMB=$((install_size*1024)); fi
					else
						local path
						if [ ! -z "${wsl}" ]; then
							destination=$(gui_launch -m image -t "Image file creation" -q "Please select the image file path:" -p "/mnt/c/Users/$(echo $(/mnt/c/Windows/System32/cmd.exe /c echo %username% 2> /dev/null) | sed 's/[^a-zA-Z0-9]//g')/${distribution}.img")
						elif [ ! -z "${chromeos}" ] || [ ! -z "${brunch}" ]; then
							destination=$(gui_launch -m image -t "Image file creation" -q "Please select the image file path:" -p "/mnt/stateful_partition/unencrypted/${distribution}.img")
						else
							destination=$(gui_launch -m image -t "Image file creation" -q "Please select the image file path:" -p "$(eval echo ~${SUDO_USER})/${distribution}.img")
						fi
						if [ -z "${destination}" ]; then exit 1; fi
						if [ ! -z "${wsl}" ] && [ "${destination}" == "return" ]; then break 2; continue; elif [ "${destination}" == "return" ]; then break; continue; fi
						if [ "$(echo -n ${destination} | tail -c 4)" != ".img" ]; then destination="${destination}.img"; fi
						if [[ "${destination}" == *"/"* ]] && ([ -z "$(realpath ${destination} 2> /dev/null)" ] || [ ! -d "$(echo $(realpath ${destination}) | sed 's@[^/]*$@@')" ]); then gui_launch -m messagebox -t "Error in image file path selection" -q "Desination path does not exist, please provide an existing path."; continue; fi
						if [ "$(lsblk $(df -h --output=source $(echo $(realpath ${destination}) | sed 's![^/]*$!!') | tail -1) -no TYPE)" == "crypt" ]; then gui_launch -m messagebox -t "Error in image file path selection" -q "Linuxloops disk images cannot be booted from an encrypted partition."; continue; fi
						if [[ ! ${destination} == *"/"* ]]; then path="${PWD}/"; else path="$(realpath ${destination})"; path="$(echo ${path} | sed 's@[^/]*$@@')"; fi
						fullpath="${path}$(basename ${destination})"
						if [ ! -z "${wsl}" ] && [ ! -z "${path##/mnt/*/*}" ]; then gui_launch -m messagebox -t "Error in image file path selection" -q "The ${distribution} disk image has to be installed outside of the WSL VM, please specify a path such as /mnt/\&lt;drive letter\&gt;/..."; continue; fi
						if ([ ! -z "${chromeos}" ] || [ ! -z "${brunch}" ]) && [ ! -z "${path##/mnt/stateful_partition/unencrypted/*}" ]; then gui_launch -m messagebox -t "Error in image file path selection" -q "The ${distribution} disk image has to be installed in the unencrypted data partition, please specify a path such as /mnt/stateful_partition/unencrypted/..."; continue; fi
						possible_image_size
						if [ $(( ${maximum_image_size} - 14 )) -lt 0 ]; then
							gui_launch -m messagebox -t "Error in image file path selection" -q "Not enough space to create the image file, the minimum size is 14 GB. Verify that the path you have selected points to a partition with more than 14 GB available."
							continue
						elif [ $(( ${maximum_image_size} - 14 )) -eq 0 ]; then
							confirmation=$(gui_launch -m confirmation -t "Image file size selection" -q "Exactly 14GB is available on this drive, the installer will proceed with the creation of a 14GB image.")
							if [ -z "${confirmation}" ]; then exit 1; fi
							install_size=14
						else
							install_size=$(gui_launch -m range -t "Image file size selection" -p "14^14^${maximum_image_size}" -q "This partition has ${maximum_image_size} GB available. How much would you like to allocate for ${distribution} ?")
						fi
						if [ -z "${install_size}" ]; then exit 1; fi
						if [ "${install_size}" == "return" ]; then continue; fi
						install_sizeMB=$((install_size*1024))
					fi
					if [ "${distribution}" != "BlissOS" ] && [ "${distribution}" != "Brunch" ] && [ "${distribution}" != "ChromeOS-Flex" ] && [ "${distribution}" != "Tails" ]; then
						until false; do
							if [ "${btrfs_supported}" == "Yes" ]; then
								fsoptions=$(gui_launch -m partitioning -t "Partitioning" -p "$(( ${install_size} - 12 ))^ext4 filesystem^ext4 filesystem with rootfs encryption^btrfs filesystem^btrfs filesystem with rootfs encryption^btrfs filesystem with compression^btrfs filesystem with compression and rootfs encryption")
							else
								fsoptions=$(gui_launch -m partitioning -t "Partitioning" -p "$(( ${install_size} - 12 ))^ext4 filesystem^ext4 filesystem with rootfs encryption")
							fi
							if [ -z "${fsoptions}" ]; then exit 1; fi
							if [ "${fsoptions}" == "return" ]; then break; continue; fi
							if [ "${fsoptions}" == "custom" ]; then
								fsoptions=$(gui_launch -m partitions -t "Custom partitioning" -p "${install_size}^${btrfs_supported}")
								if [ "${fsoptions}" == "" ]; then exit 1; fi
								if [ "${fsoptions}" == "return" ]; then continue; fi
								swap_size=$(echo "${fsoptions}" | cut -d'^' -f1)
								efi_mountoptions=$(echo "${fsoptions}" | cut -d'^' -f2)
								boot_name=$(echo "${fsoptions}" | cut -d'^' -f3)
								boot_mountoptions=$(echo "${fsoptions}" | cut -d'^' -f4)
								root_name=$(echo "${fsoptions}" | cut -d'^' -f5)
								root_fstype=$(echo "${fsoptions}" | cut -d'^' -f6)
								root_mountoptions=$(echo "${fsoptions}" | cut -d'^' -f7)
								root_size=$(echo "${fsoptions}" | cut -d'^' -f8)
								root_encryption=$(echo "${fsoptions}" | cut -d'^' -f9)
								partition4="$(echo "${fsoptions}" | cut -d'^' -f10)*$(echo "${fsoptions}" | cut -d'^' -f11)*$(echo "${fsoptions}" | cut -d'^' -f12)*$(echo "${fsoptions}" | cut -d'^' -f13)*$(echo "${fsoptions}" | cut -d'^' -f14)*$(echo "${fsoptions}" | cut -d'^' -f15)"
								partition5="$(echo "${fsoptions}" | cut -d'^' -f16)*$(echo "${fsoptions}" | cut -d'^' -f17)*$(echo "${fsoptions}" | cut -d'^' -f18)*$(echo "${fsoptions}" | cut -d'^' -f19)*$(echo "${fsoptions}" | cut -d'^' -f20)*$(echo "${fsoptions}" | cut -d'^' -f21)"
								partition6="$(echo "${fsoptions}" | cut -d'^' -f22)*$(echo "${fsoptions}" | cut -d'^' -f23)*$(echo "${fsoptions}" | cut -d'^' -f24)*$(echo "${fsoptions}" | cut -d'^' -f25)*$(echo "${fsoptions}" | cut -d'^' -f26)*$(echo "${fsoptions}" | cut -d'^' -f27)"
								partition7="$(echo "${fsoptions}" | cut -d'^' -f28)*$(echo "${fsoptions}" | cut -d'^' -f29)*$(echo "${fsoptions}" | cut -d'^' -f30)*$(echo "${fsoptions}" | cut -d'^' -f31)*$(echo "${fsoptions}" | cut -d'^' -f32)*$(echo "${fsoptions}" | cut -d'^' -f33)"
								partition8="$(echo "${fsoptions}" | cut -d'^' -f34)*$(echo "${fsoptions}" | cut -d'^' -f35)*$(echo "${fsoptions}" | cut -d'^' -f36)*$(echo "${fsoptions}" | cut -d'^' -f37)*$(echo "${fsoptions}" | cut -d'^' -f38)*$(echo "${fsoptions}" | cut -d'^' -f39)"
							else
								swap_size=$(echo "${fsoptions}" | cut -d'^' -f1)
								boot_name="Boot"
								root_name="Root"
								root_fstype=$(if echo "${fsoptions}" | cut -d'^' -f2 | grep -q btrfs; then echo "btrfs"; else echo "ext4"; fi)
								root_size=$(( ${install_size} - 1 ))
								root_encryption=$(if echo "${fsoptions}" | cut -d'^' -f2 | grep -q encryption; then echo "Yes"; else echo "No"; fi)
								root_compression=$(if echo "${fsoptions}" | cut -d'^' -f2 | grep -q compression; then echo "Yes"; else echo "No"; fi)
							fi
							compute_partitions
							until false; do
								if [ "${root_encryption}" == "Yes" ]; then
									encrypted_text="Please enter your user account details and encryption password."
								else
									encrypted_text="Please enter your user account details."
								fi
								form=$(gui_launch -m user -t "User creation" -p "$(echo ${environment} | cut -d '/' -f1)"^$(if [ "${root_encryption}" == "Yes" ] || [ "$(get_extra_partitions_attribute isencryptionused)" == "Yes" ]; then echo "Yes"; else echo "No"; fi) -q "${encrypted_text}")
								useraccount_name="$(echo ${form} | cut -d'^' -f1)"
								useraccount_password="$(echo ${form} | cut -d'^' -f2)"
								useraccount_password_verification="$(echo ${form} | cut -d'^' -f3)"
								useraccount_autologin="$(echo ${form} | cut -d'^' -f4)"
								user_password_for_encryption="$(echo ${form} | cut -d'^' -f5)"
								encryption_password="$(echo ${form} | cut -d'^' -f6)"
								encryption_password_verification="$(echo ${form} | cut -d'^' -f7)"
								if [ -z "${form}" ]; then exit 1; fi
								if [ "${form}" == "return" ]; then break; continue; fi
								if [ -z "${useraccount_name}" ]; then gui_launch -m messagebox -t "Error during user creation" -q "Please define a user account name."; continue; fi
								if ! echo "${useraccount_name}" | grep -q '^[a-z][-a-z0-9]*$'; then gui_launch -m messagebox -t "Error during user creation" -q "Invalid Username (username can only contain lowercase and numerical characters)."; continue; fi
								if [ -z "${useraccount_password}" ]; then gui_launch -m messagebox -t "Error during user creation" -q "Please define a user account password."; continue; fi
								if ! echo "${useraccount_password}" | grep -q '[^^^]*$'; then gui_launch -m messagebox -t "Error during user creation" -q "User account password contains unsupported characters."; continue; fi
								if [ "${useraccount_password}" != "${useraccount_password_verification}" ]; then gui_launch -m messagebox -t "Error during user creation" -q "User account password and verification password do not match."; continue; fi
								if ([ "${root_encryption}" == "Yes" ] || [ "$(get_extra_partitions_attribute isencryptionused)" == "Yes" ]) && [ "${user_password_for_encryption}" == "No" ]; then
									if [ -z "${encryption_password}" ]; then gui_launch -m messagebox -t "Error during user creation" -q "Please define the encryption password."; continue; fi
									if echo "${encryption_password}" | grep -q '[^a-zA-Z0-9 ()[]{}!@#&$£%µ+-\*/=~¨²]'; then gui_launch -m messagebox -t "Error during user creation" -q "Encryption password contains unsupported characters."; continue; fi
									if [ "${encryption_password}" != "${encryption_password_verification}" ]; then gui_launch -m messagebox -t "Error during user creation" -q "Encryption password and verification password do not match."; continue; fi
								elif [ "${root_encryption}" == "Yes" ] || [ "$(get_extra_partitions_attribute isencryptionused)" == "Yes" ]; then
									encryption_password="${useraccount_password}"
								fi
								until false; do
									for i in "${!available_locales[@]}"; do if [ "${available_locales[$i]}" == "TRUE" ] || [ "${available_locales[$i]}" == "FALSE" ]; then if [ -z "${languages}" ]; then languages="${available_locales[$i+1]} (${available_locales[$i+2]})"; else languages="${languages};${available_locales[$i+1]} (${available_locales[$i+2]})"; fi; fi; done
									if [[ " ${available_locales[*]} " =~ " $(cat /etc/locale.conf | grep 'LANG=' | cut -d'=' -f2 | cut -d'.' -f1 2>/dev/null) " ]]; then current_language="$(cat /etc/locale.conf | grep 'LANG=' | cut -d'=' -f2 | cut -d'.' -f1 2>/dev/null)"; fi
									for i in "${!available_keymaps[@]}"; do if [ "${available_keymaps[$i]}" == "TRUE" ] || [ "${available_keymaps[$i]}" == "FALSE" ]; then if [ -z "${keymaps}" ]; then keymaps="${available_keymaps[$i+1]} (${available_keymaps[$i+2]})"; else keymaps="${keymaps};${available_keymaps[$i+1]} (${available_keymaps[$i+2]})"; fi; fi; done
									if [[ " ${available_keymaps[*]} " =~ " $(cat /etc/vconsole.conf | grep 'KEYMAP=' | cut -d'=' -f2 2>/dev/null) " ]]; then current_keymap="$(cat /etc/vconsole.conf | grep 'KEYMAP=' | cut -d'=' -f2 2>/dev/null)"; fi
									for i in "${!available_timezones[@]}"; do if [ "${available_timezones[$i]}" == "TRUE" ] || [ "${available_timezones[$i]}" == "FALSE" ]; then if [ -z "${timezones}" ]; then timezones="${available_timezones[$i+1]}"; else timezones="${timezones};${available_timezones[$i+1]}"; fi; fi; done
									if [[ " ${available_timezones[*]} " =~ " $(realpath --relative-to /usr/share/zoneinfo /etc/localtime 2>/dev/null) " ]]; then current_timezone="$(realpath --relative-to /usr/share/zoneinfo /etc/localtime 2>/dev/null)"; fi
									settings=$(gui_launch -m parameters -t "Language, Keyboard and Timezone selection" -p "${languages}^${current_language}^${keymaps}^${current_keymap}^${timezones}^${current_timezone}" -q "Please select your locale (language / formats), keyboard layout and timezone.")
									if [ -z "${settings}" ]; then exit 1; fi
									if [ "${settings}" == "return" ]; then break; continue; fi
									locale=$(echo "${settings}" | cut -d'^' -f1 | cut -d' ' -f1)
									keymap=$(echo "${settings}" | cut -d'^' -f2 | cut -d' ' -f1)
									timezone=$(echo "${settings}" | cut -d'^' -f3 | cut -d' ' -f1)
									until false; do
										if [ "${distribution}" != "Qubes" ]; then customizations_list="$(echo "${distribution}" | sed 's@[ !]@@g')-${RANDOM}^"; else customizations_list="^"; fi
										customizations_list="${customizations_list}hide_grub^"
										if [ "${nvidia_supported}" == "Yes" ]; then customizations_list="${customizations_list}nvidia^"; else customizations_list="${customizations_list}^"; fi
										if [ "${surface_supported}" == "Yes" ]; then customizations_list="${customizations_list}surface^"; else customizations_list="${customizations_list}^"; fi
										customizations_list="${customizations_list}custom_packages^$(pwd)^kernel_parameters^${mirrors_supported[@]}"
										customizations=$(gui_launch -m customizations -t "Custom settings selection" -p "${customizations_list}" -q "If needed, customize your installation with these additional settings.")
										if [ -z "${customizations}" ]; then exit 1; fi
										if [ "${distribution}" != "Qubes" ] && ! echo "${customizations}" | cut -d'^' -f1 | grep -Pq '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$'; then gui_launch -m messagebox -t "Error in hostname selection" -q "hostname contains unsupported characters."; continue; fi
										if [ "${customizations}" == "return" ]; then break; continue; fi
										hostname=$(echo "${customizations}" | cut -d'^' -f1)
										grub_hide=$(echo "${customizations}" | cut -d'^' -f2)
										nvidia=$(echo "${customizations}" | cut -d'^' -f3)
										surface=$(echo "${customizations}" | cut -d'^' -f4)
										custom_packages=$(echo "${customizations}" | cut -d'^' -f5)
										custom_script=$(echo "${customizations}" | cut -d'^' -f6)
										kernel_parameters=$(echo "${customizations}" | cut -d'^' -f7)
										mirror=8; for i in $(echo "${customizations_list}" | cut -d'^' -f"${mirror}"); do
											if [ ! -z $(echo "${customizations}" | cut -d'^' -f"${mirror}") ]; then
												set_mirror "${i}" $(echo "${customizations}" | cut -d'^' -f"${mirror}") || { gui_launch -m messagebox -t "Error in mirror selection" -q "Selected ${i} mirror is invalid: $(echo ${customizations} | cut -d'^' -f${mirror})."; continue 2; }
											fi
											mirror=$(( $mirror + 1 ))
										done
										break 9
									done
								done
							done
						done
					else
						break 5
					fi
				done
			done
		done
	done
done
if [ ! -z "${generate_config}" ]; then generate_declarative_config; fi
if [ "${install_type}" == "disk" ]; then
	confirmation=$(gui_launch -m confirmation -t "Drive erasing confirmation" -q "WARNING: All data on device ${destination} will be erased, are you sure you want to continue ?")
	if [ -z "${confirmation}" ]; then exit 1; fi
	gui_launch -m progress -t "Installation in progress" -q "Installing ${distribution} ${version} with ${environment} environment on drive ${fullpath}.<br><br>You can follow the install process in the terminal window." -w "/tmp/linuxloops_gui.pid" &
	start_install
	kill $(cat /tmp/linuxloops_gui.pid) 2>/dev/null
	rm /tmp/linuxloops_gui.pid
	if [ ${return_value} -eq 1 ]; then exit_with_error "Failed to perform the installation of ${distribution} ${version} in chroot."; fi
	gui_launch -m finished -t "Installation finished" -q "Linuxloops installation process is finished.<br><br>You can now reboot your computer and start ${distribution} by selecting your device in the UEFI boot menu."
else
	gui_launch -m progress -t "Installation in progress" -q "Installing ${distribution} ${version} with ${environment} environment in the disk image ${fullpath}.<br><br>You can follow the install process in the terminal window." -w "/tmp/linuxloops_gui.pid" &
	start_install
	kill $(cat /tmp/linuxloops_gui.pid) 2>/dev/null
	rm /tmp/linuxloops_gui.pid
	if [ ${return_value} -eq 1 ]; then exit_with_error "Failed to perform the installation of ${distribution} in chroot."; fi
	grub_config
	if [ ! -z "${wsl}" ]; then
		grubinstall="The ${distribution} disk image has been created at $(echo ${fullpath:5:1} | tr a-z A-Z):\\$(echo ${fullpath:7} | sed 's@\/@\\@g'). You can either write this disk image to a usb flashdrive / sdcard with a tool like DiskImager or boot it directly using Grub2Win.<br><br>********************************************************************************************<br>If you want to boot the image directly using Grub2Win:<br>The grub config needed to boot ${distribution} has been generated in the file $(echo ${fullpath:5:1} | tr a-z A-Z):\\$(echo ${fullpath:7} | sed 's@\/@\\@g').grub.txt<br>You need to install Grub2Win and launch it, click on \"Manage Boot Menu\" -> \"Add a new entry\" -> set \"Type\" as \"Create user section\", open the file $(echo ${fullpath:5:1} | tr a-z A-Z):\\$(echo ${fullpath:7} | sed 's@\/@\\@g').grub.txt and copy its content in the Grub2Win notepad window, save and close the Grub2Win notepad window then click \"Apply\" and \"OK\".<br><br>Please note that ${distribution} will not be bootable and / or stable if you do not perform the below actions (Refer to Windows online resources if needed):<br>- Ensure that bitlocker is disabled on the drive which contains the ${distribution} image or disable it.<br>- Disable fast startup.<br>- Disable hibernation.<br><br>Once done, reboot your computer and select ${distribution} from the Grub2Win menu.<br>********************************************************************************************"
		gui_launch -m finished -t "Grub configuration" -q "${grubinstall}"
	elif [ ! -z "${brunch}" ]; then
		grubinstall="The grub config needed to boot ${distribution} has been generated in the file \"${fullpath}.grub.txt\".<br><textarea cols=\"80\" rows=\"14\" style=\"font-size: 14px;\">${config}</textarea><br><br>Now copy the above grub config, run \"sudo edit-brunch-config -g\" and paste it (lines between stars) at the end of the file.<br><br>Once done, press CTRL+X and then ENTER to save, reboot your computer and start ${distribution}"
		gui_launch -m finished -t "Grub configuration" -q "${grubinstall}"
	elif [ ! -z "${chromeos}" ]; then
		grubinstall="The grub config needed to boot ${distribution} has been added to the ChromeOS EFI partition (12). If not already done, enable booting from ALT firmware, then reboot your computer and press CTRL+L to start ${distribution}."
		gui_launch -m finished -t "Grub configuration" -q "${grubinstall}"
	else
		if [ -d /boot/grub2 ]; then grub="grub2"; else grub="grub"; fi
		grubinstall="The grub config needed to boot ${distribution} has been generated in the file \"${fullpath}.grub.txt\".<br><br>If you have a linux distribution installed which uses grub as bootloader, run the below command to generate the grub config automatically:<br><textarea id=\"configuration\" cols=\"80\" rows=\"4\" style=\"font-size: 14px;\">sudo cat /etc/grub.d/40_custom ${fullpath}.grub.txt | sudo tee /etc/grub.d/99_linuxloops_$(echo ${distribution} | tr [:upper:] [:lower:]); sudo chmod 0755 /etc/grub.d/99_linuxloops_$(echo ${distribution} | tr [:upper:] [:lower:]); sudo ${grub}-mkconfig -o $(if cat /etc/os-release | grep 'VARIANT_ID=' | grep -q 'silverblue\|kinoite'; then echo /etc/grub2.cfg; else echo /boot/${grub}/grub.cfg; fi)</textarea><br><button onclick=\"copy_configuration()\">Copy command to clipboard</button><br><br>Otherwise, add the grub config manually to another grub bootloader.<br><br>You can then reboot your computer and start ${distribution}."
		gui_launch -m finished -t "Grub configuration" -q "${grubinstall}"
	fi
fi
}

cli_installer()
{
if [ "${declarative}" == "Yes" ]; then
	if [ ! -f "$(realpath ${declarative_config})" ]; then echo "Declarative file not found at path: $(realpath ${declarative_config})."; exit 1; fi
	source "$(realpath ${declarative_config})"
	if [ ! -z "${custom_packages}" ]; then custom_packages=$(echo ${custom_packages} | sed -e 's@\n@ @g'); fi
	if [ ! -z "${custom_commands}" ]; then
		cat >"${linuxloopsdir}"/custom_commands <<CUSTOM_COMMANDS
#!/bin/bash
set -e
# Add temporarily setuid bit to bubblewrap to be able to install flatpaks (as namespaces cannot be created in chroot)
if [ -x /usr/bin/bwrap ] && [ ! -u /usr/bin/bwrap ]; then bwrap_needs_setuid=1; chmod u+s /usr/bin/bwrap; fi
${custom_commands}
if [ ! -z "\${bwrap_needs_setuid}" ]; then chmod u-s /usr/bin/bwrap; fi
CUSTOM_COMMANDS
		chmod 0755 "${linuxloopsdir}"/custom_commands
		custom_script="${linuxloopsdir}"/custom_commands
	fi
fi
if [ -z "${distribution}" ] || [[ ! " ${available_distributions[*]} " =~ " ${distribution} " ]]; then echo -e "Please select a distribution from the below list:"; list_array "available_distributions"; exit 1; fi
check_home_space
if [ $(( ($(df -k --output=avail "${linuxloopsdir}" | sed 1d) / 1024 / 1024) - ${available_space_needed} )) -lt 0 ]; then
	echo -e "To install ${distribution} you need ${available_space_needed} GB of available space in your home directory but you only have $(($(df -k --output=avail ${HOME} | sed 1d) / 1024 / 1024)) GB."
	exit 1
fi
distribution_parameters
if [ ! -z "${version}" ] && [[ ! " ${available_versions[*]} " =~ " ${version} " ]]; then echo -e "Please select a version from the below list:"; list_array "available_versions"; exit 1; elif [ -z "${version}" ]; then version="${default_version}"; fi
distribution_version_parameters
if [ -z "${environment}" ] || [[ ! " ${available_environments[*]} " =~ " ${environment} " ]]; then echo -e "Please select an environment from the below list:"; list_array "available_environments"; exit 1; fi
if [ -z "${hostname}" ]; then hostname="$(echo "${distribution}" | sed 's@[ !]@@g')-${RANDOM}"; fi
if [ -z "${locale}" ]; then locale="en_US"; fi
if [ -z "${keymap}" ]; then keymap="us"; fi
if [ -z "${timezone}" ]; then timezone="UTC"; fi
if [ -z "${destination}" ]; then
	until false; do
		read -p "Please input the destination drive (eg. /dev/sdX) or the destination image path: " destination
		if ! echo "${destination}" | grep -Eq '/[a-zA-Z0-9_/-]*$'; then echo -e "Destination path contains unsupported characters.\n\n"; continue; fi
		if [ -z "${destination##/dev/*}" ]; then install_type="disk"; else install_type="image"; fi
		if [ "${install_type}" == "disk" ]; then
			if [ ! -b "${destination}" ]; then echo -e "Disk ${destination} was not found.\n\n"; continue; fi
			if [ ! "$(lsblk ${destination} -nd -o TYPE)" == "disk" ]; then echo -e "Linuxloops can only be installed on a full disk.\n\n"; continue; fi
			if [ $(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 / 1024 / 1024) )) -lt 14 ]; then echo -e "Linuxloops does not support disks with less than 14 GB available.\n\n"; continue; fi
			fullpath="${destination}"
			until false; do
				read -p "Please select the disk install size in GB (minimum 14 GB, maximum $(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 / 1024 / 1024) )) GB, default $(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 / 1024 / 1024) )) GB): " install_size
				if [ -z "${install_size}" ]; then
					install_size=$(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 / 1024 / 1024) ))
				elif [ -z "${install_size##*[!0-9]*}" ] || [ "${install_size}" -lt 0 ]; then
					echo -e "Disk install size is not a positive integer: ${install_size}.\n\n"
					continue
				elif [ "${install_size}" -lt 14 ]; then
					echo -e "Disk install size cannot be lower than 14 GB.\n\n"
					continue
				elif [ "${install_size}" -gt $(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 / 1024 / 1024) )) ]; then
					echo -e "Disk install size cannot be greater than $(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 / 1024 / 1024) )) GB.\n\n"
					continue
				fi
				if [ "${install_size}" -eq $(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) )) ]; then install_sizeMB=$(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024) )); else install_sizeMB=$((install_size*1024)); fi
				break 2
			done
		else
			if [[ "${destination}" == *"/"* ]] && ([ -z "$(realpath ${destination} 2> /dev/null)" ] || [ ! -d "$(echo $(realpath ${destination}) | sed 's![^/]*$!!')" ]); then echo -e "Desination path does not exist, please provide an existing path.\n\n"; continue; fi
			if [ "$(lsblk $(df -h --output=source $(echo $(realpath ${destination}) | sed 's![^/]*$!!') | tail -1) -no TYPE)" == "crypt" ]; then echo -e "Linuxloops disk images cannot be booted from an encrypted partition.\n\n"; continue; fi
			if [[ ! "${destination}" == *"/"* ]]; then path="${PWD}/"; else path="$(echo $(realpath ${destination}) | sed 's![^/]*$!!')"; fi
			fullpath="${path}$(basename ${destination})"
			if [ ! -z "${wsl}" ] && [ ! -z "${path##/mnt/*}" ]; then echo -e "The ${distribution} disk image has to be installed outside of the WSL VM, please specify a path such as /mnt/<drive letter>/...\n\n"; continue; fi
			if [ ! -z "${chromeos}" ] || [ ! -z "${brunch}" ] && [ ! -z "${path##/mnt/stateful_partition/unencrypted/*}" ]; then echo -e "The ${distribution} disk image has to be installed in the unencrypted data partition, please specify a path such as /mnt/stateful_partition/unencrypted/...\n\n"; continue; fi
			possible_image_size
			if [ ${maximum_image_size} -lt 14 ]; then echo -e "Linuxloops needs at least 14 GB available on the target partition.\n\n"; continue; fi
			until false; do
				read -p "Please select the disk image size in GB (minimum 14 GB, maximum ${maximum_image_size} GB, default 14 GB): " install_size
				if [ -z "${install_size}" ]; then
					install_size=14
				elif [ -z "${install_size##*[!0-9]*}" ] || [ "${install_size}" -lt 0 ]; then
					echo -e "Disk image size is not a positive integer: ${install_size}.\n\n"
					continue
				elif [ "${install_size}" -lt 14 ]; then
					echo -e "Disk image size cannot be lower than 14 GB.\n\n"
					continue
				elif [ "${install_size}" -gt $(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 / 1024 / 1024) )) ]; then
					echo -e "Disk image size cannot be greater than ${maximum_image_size} GB.\n\n"
					continue
				fi
				install_sizeMB=$(( install_size * 1024))
				break 2
			done
		fi
	done
else
	if [ -z "${destination##/dev/*}" ]; then install_type="disk"; else install_type="image"; fi
	if [ -z "${install_size}" ]; then
		if [ "${install_type}" == "image" ] && [ "${live}" == "Yes" ]; then
			install_size=7
		elif [ "${install_type}" == "image" ]; then
			install_size=14
		fi
	else
		if [ -z "${install_size##*[!0-9]*}" ] || [ "${install_size}" -lt 0 ]; then
			echo "Install size is not a positive integer: ${install_size}."
			exit 1
		elif [ "${install_size}" -lt 14 ]; then
			echo "Install size cannot be lower than 14 GB."
			exit 1
		fi
	fi
	if [ "${install_type}" == "disk" ]; then
		if [ ! -b "${destination}" ]; then echo "Disk ${destination} was not found."; exit 1; fi
		if [ ! "$(lsblk ${destination} -nd -o TYPE)" == "disk" ]; then echo "Linuxloops can only be installed on a full disk."; exit 1; fi
		fullpath="${destination}"
		if [ ! -z "${install_size}" ]; then if [ $(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 / 1024 / 1024) )) -lt "${install_size}" ]; then echo "You have requested an install size of ${install_size} GB but this device only has $(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 / 1024 / 1024) )) GB available."; exit 1; fi; fi
		if [ -z "${install_size}" ]; then install_sizeMB=$(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 / 1024) )); else install_sizeMB=$(( install_size * 1024 )); fi
	else
		if [[ "${destination}" == *"/"* ]] && ([ -z "$(realpath ${destination} 2> /dev/null)" ] || [ ! -d "$(echo $(realpath ${destination}) | sed 's![^/]*$!!')" ]); then echo "Desination path does not exist, please provide an existing path."; exit 1; fi
		if [ "$(lsblk $(df -h --output=source $(echo $(realpath ${destination}) | sed 's![^/]*$!!') | tail -1) -no TYPE)" == "crypt" ]; then echo "Linuxloops disk images cannot be booted from an encrypted partition."; exit 1; fi
		if [[ ! "${destination}" == *"/"* ]]; then path="${PWD}/"; else path="$(echo $(realpath ${destination}) | sed 's![^/]*$!!')"; fi
		fullpath="${path}$(basename ${destination})"
		if [ ! -z "${wsl}" ] && [ ! -z "${path##/mnt/*}" ]; then echo "The ${distribution} disk image has to be installed outside of the WSL VM, please specify a path such as /mnt/<drive letter>/..."; exit 1; fi
		if [ ! -z "${chromeos}" ] || [ ! -z "${brunch}" ] && [ ! -z "${path##/mnt/stateful_partition/unencrypted/*}" ]; then echo "The ${distribution} disk image has to be installed in the unencrypted data partition, please specify a path such as /mnt/stateful_partition/unencrypted/..."; exit 1; fi
		possible_image_size
		if [ $(( ${maximum_image_size} - ${install_size} )) -lt 0 ]; then echo -e "Maximum available space to create the ${distribution} image on this partition is ${maximum_image_size} GB.\nAvailable space: $(( ($(df -k --output=avail $(echo $(realpath ${destination}) | sed 's![^/]*$!!') | sed 1d) / 1024 / 1024) + ${freed_space} )) GB\nSpace needed to bootstrap: ${bootstrap_space} GB\nIf you think that available space value is incorrect, verify that you have correctly mounted the destination partition or if the partition is in ext4 format that there is no reserved space (cf. https://odzangba.wordpress.com/2010/02/20/how-to-free-reserved-space-on-ext4-partitions)"; exit 1; else install_sizeMB=$(( install_size * 1024)); fi
	fi
fi
if [ ! -z "${swap_size}" ]; then
	if [ -z "${swap_size##*[!0-9]*}" ] || [ "${swap_size}" -lt 0 ]; then echo "Provided swap size is not a positive integer: ${swap_size}."; exit 1; fi
	if [ "${swap_size}" -gt 0 ] && [ $(( install_sizeMB - (swap_size * 1024) )) -lt $(( 12 * 1024 )) ]; then echo "At least 12 GB should be available for the root partition, please increase the installation size or reduce the swap size."; exit 1; fi
fi
if [ "${distribution}" == "BlissOS" ] || [ "${distribution}" == "Brunch" ] || [ "${distribution}" == "ChromeOS-Flex" ] || [ "${distribution}" == "Tails" ]; then
	if [ "${root_encryption}" == "Yes" ]; then echo -e "rootfs encryption is not supported with ${distribution}.\n"; exit 1; fi
	if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then echo -e "Swap cannot be enabled by design with ${distribution}.\n"; exit 1; fi
fi
compute_partitions
if [ ! $(list_array "available_locales" | grep -w "${locale}") ]; then echo "Locale ${locale} is not available, supported locales are:"; echo $(list_array "available_locales" | sed -e 's@\n@ @g'); exit 1; fi
if [ ! $(list_array "available_keymaps" | grep -w "${keymap}") ]; then echo "Keymap ${keymap} is not available, supported keympas are:"; echo $(list_array "available_keymaps" | sed -e 's@\n@ @g'); exit 1; fi
if [ ! $(list_array "available_timezones" | grep -w "${timezone}") ]; then echo "Timezone ${timezone} is not available, supported timezones are:"; echo $(list_array "available_timezones" | sed -e 's@\n@ @g'); exit 1; fi
if [ -z "${chromeos}" ] && [ -z "${brunch}" ] && [ ! -z "${hostname}" ] && ! echo "${hostname}" | grep -Pq '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$'; then echo "Provided hostname contains invalid characters."; exit 1; fi
if [ "${root_fstype}" == "btrfs" ] && [ ! "${btrfs_supported}" == "Yes" ]; then echo "Filesystem type btrfs is not available for this distribution version."; exit 1; fi
if [ "${nvidia}" == "Yes" ] && [ ! "${nvidia_supported}" == "Yes" ]; then echo "nvidia proprietary driver is not available for this distribution version."; exit 1; fi
if [ "${surface}" == "Yes" ] && [ ! "${surface_supported}" == "Yes" ]; then echo "Surface patches are not available for this distribution version."; exit 1; fi
if [ "${live}" == "Yes" ] && ([ ! "${distribution}" == "Debian" ] && [ ! "${distribution}" == "Linuxmint" ]); then echo "Linuxloops live can only be created with Debian or Linuxmint distributions."; exit 1; fi
if [ ! -z "${custom_script}" ] && [ ! -f "${custom_script}" ]; then echo "Custom script ${1} could not be found."; exit 1; fi
if [ "${distribution}" != "BlissOS" ] && [ "${distribution}" != "Brunch" ] && [ "${distribution}" != "ChromeOS-Flex" ] && [ "${distribution}" != "Tails" ]; then
	if [ "${test_distribution}" == "Yes" ]; then
		useraccount_name="test"
		useraccount_password="test"
		encryption_password="test"
	elif [ "${live}" == "Yes" ]; then
		useraccount_name="live"
		useraccount_password="linuxloops"
		encryption_password="linuxloops"
	else
		if [ ! -z "${useraccount_name}" ]; then
			if ! echo "${useraccount_name}" | grep -q '^[a-z][-a-z0-9]*$'; then echo -e "Invalid user account name (username can only contain lowercase and numerical characters).\n\n"; exit 1; fi	
		else
			until false; do
				read -p "Please enter your user account name: " useraccount_name
				if [ -z "${useraccount_name}" ]; then echo -e "Please define a user account name.\n\n"; continue; fi
				if ! echo "${useraccount_name}" | grep -q '^[a-z][-a-z0-9]*$'; then echo -e "Invalid user account name (username can only contain lowercase and numerical characters)\n\n"; continue; fi
				break
			done
		fi
		if [ ! -z "${useraccount_password}" ]; then
			if ! echo "${useraccount_password}" | grep -q '[^^^]*$'; then echo -e "Invalid character in user account password (passwords cannot contain the ^ character).\n\n"; exit 1; fi
		else
			until false; do
				read -s -p "Input your user account password: " useraccount_password
				echo ""
				read -s -p "Verify your user account password: " useraccount_password_verification
				echo ""
				if [ -z "${useraccount_password}" ]; then echo -e "Please define a user account password.\n\n"; continue; fi
				if ! echo "${useraccount_password}" | grep -q '[^^^]*$'; then echo -e "Invalid character in password (passwords cannot contain the ^ character).\n\n"; continue; fi
				if [ "${useraccount_password}" != "${useraccount_password_verification}" ]; then echo -e "User account password and verification password do not match.\n\n"; continue; fi
				break
			done
		fi
		if ([ "${root_encryption}" == "Yes" ] || [ "$(get_extra_partitions_attribute isencryptionused)" == "Yes" ]) && ([ -z "${user_password_for_encryption}" ] || [ "${user_password_for_encryption}" == "No" ]); then
			if [ ! -z "${encryption_password}" ]; then
				if ! echo "${encryption_password}" | grep -q '[^^^]*$'; then echo -e "Invalid character in encryption password (passwords cannot contain the ^ character).\n\n"; exit 1; fi
			else
				until false; do
					read -s -p "Input your encryption password: " encryption_password
					echo ""
					read -s -p "Verify your encryption password: " encryption_password_verification
					echo ""
					if [ -z "${encryption_password}" ]; then echo -e "Please define the encryption password.\n\n"; continue; fi
					if echo "${encryption_password}" | grep -q '[^a-zA-Z0-9 ()[]{}!@#&$£%µ+-\*/=~¨²]'; then echo -e "Encryption password contains unsupported characters.\n\n"; continue; fi
					if [ "${encryption_password}" != "${encryption_password_verification}" ]; then echo -e "Encryption password and verification password do not match.\n\n"; continue; fi
					break
				done
			fi
		elif [ "${root_encryption}" == "Yes" ] || [ "$(get_extra_partitions_attribute isencryptionused)" == "Yes" ]; then
			encryption_password="${useraccount_password}"
		fi
	fi
fi
if [ ! -z "${generate_config}" ]; then generate_declarative_config; fi
if [ "${install_type}" == "disk" ]; then
	read -p "WARNING: All data on device ${destination} will be erased, are you sure you want to continue ? (type yes to continue)"$'\n' confirm
	if [ -z ${confirm} ] || [ ! ${confirm} == "yes" ]; then echo "Invalid answer ${confirm}, exiting"; exit 1; fi
	start_install || exit_with_error "Failed to install ${distribution} in chroot."
	echo -e "\nLinuxloops installation process is finished.\nYou can now reboot your computer and start ${distribution} by selecting your device in the UEFI boot menu."
else
	start_install || exit_with_error "Failed to install ${distribution} in chroot."
	grub_config
	if [ ! -z "${wsl}" ]; then
		grubinstall="The ${distribution} disk image has been created at $(echo ${fullpath:5:1} | tr a-z A-Z):\\\\$(echo ${fullpath:7} | sed 's@\/@\\\\@g'). You can either write this disk image to a usb flashdrive / sdcard with a tool like DiskImager or boot it directly using Grub2Win.\n\n********************************************************************************************\nIf you want to boot the image directly using Grub2Win:\nThe grub config needed to boot ${distribution} has been generated in the file $(echo ${fullpath:5:1} | tr a-z A-Z):\\\\$(echo ${fullpath:7} | sed 's@\/@\\\\@g').grub.txt\nYou need to install Grub2Win and launch it, click on \"Manage Boot Menu\" -> \"Add a new entry\" -> set \"Type\" as \"Create user section\", open the file $(echo ${fullpath:5:1} | tr a-z A-Z):\\\\$(echo ${fullpath:7} | sed 's@\/@\\\\@g').grub.txt and copy its content in the Grub2Win notepad window, save and close the Grub2Win notepad window then click \"Apply\" and \"OK\".\nPlease note that ${distribution} will not be bootable and / or stable if you do not perform the below actions (Refer to Windows online resources if needed):\n- Ensure that bitlocker is disabled on the drive which contains the ${distribution} image or disable it.\n- Disable fast startup.\n- Disable hibernation.\n\nOnce done, reboot your computer and select ${distribution} from the Grub2Win menu.\n********************************************************************************************"
		echo -e "\n${grubinstall}"
	elif [ ! -z "${brunch}" ]; then
		grubinstall="The grub config needed to boot ${distribution} has been generated in the file \"${fullpath}.grub.txt\".\n\n****************************************************************************************** \n${config}\n****************************************************************************************** \n\nNow copy the above grub config, run \"sudo edit-brunch-config -g\" and paste it (lines between stars) at the end of the file.\n\nOnce done, press CTRL+X and then ENTER to save, reboot your computer and start ${distribution}"
		echo -e "\n${grubinstall}"
	elif [ ! -z "${chromeos}" ]; then
		grubinstall="The grub config needed to boot ${distribution} has been added to the ChromeOS EFI partition (12). If not already done, enable booting from ALT firmware, then reboot your computer and press CTRL+L to start ${distribution}."
		echo -e "\n${grubinstall}"
	else
		if [ -d /boot/grub2 ]; then grub="grub2"; else grub="grub"; fi
		grubinstall="The grub config needed to boot ${distribution} has been generated in the file \"${fullpath}.grub.txt\".\n\nIf you have a linux distribution installed which uses grub as bootloader, run the below command to generate the grub config automatically:\n********************************************************************************************\nsudo cat /etc/grub.d/40_custom ${fullpath}.grub.txt | sudo tee /etc/grub.d/99_linuxloops_$(echo ${distribution} | tr [:upper:] [:lower:]); sudo chmod 0755 /etc/grub.d/99_linuxloops_$(echo ${distribution} | tr [:upper:] [:lower:]); sudo ${grub}-mkconfig -o $(if cat /etc/os-release | grep 'VARIANT_ID=' | grep -q 'silverblue\|kinoite'; then echo /etc/grub2.cfg; else echo /boot/${grub}/grub.cfg; fi)\n********************************************************************************************\n\nOtherwise, add the below grub config manually to another grub bootloader:\n********************************************************************************************\n${config}*******************************************************************************************\n\nYou can then reboot your computer and start ${distribution}."
		echo -e "\n${grubinstall}"
	fi
fi
rm -f "${linuxloopsdir}"/custom_commands
}

check_dependencies()
{
if ( ! test -z {,} ); then echo "Linuxloops must be ran with \"bash\"."; exit 1; fi
if [ -z "$(command -v basename)" ]; then echo "\"basename\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v base64)" ]; then echo "\"base64\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v blkid)" ]; then echo "\"blkid\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v cat)" ]; then echo "\"cat\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v chmod)" ]; then echo "\"chmod\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v chown)" ]; then echo "\"chown\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v chroot)" ]; then echo "\"chroot\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v cp)" ]; then echo "\"cp\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v curl)" ]; then echo "\"curl\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v cut)" ]; then echo "\"cut\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v dd)" ]; then echo "\"dd\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v df)" ]; then echo "\"df\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v dirname)" ]; then echo "\"dirname\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v du)" ]; then echo "\"du\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v expr)" ]; then echo "\"expr\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v echo)" ]; then echo "\"echo\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v find)" ]; then echo "\"find\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v grep)" ]; then echo "\"grep\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v kill)" ]; then echo "\"kill\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v losetup)" ]; then echo "\"losetup\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v lsblk)" ]; then echo "\"lsblk\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v mkdir)" ]; then echo "\"mkdir\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v mktemp)" ]; then echo "\"mktemp\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v mount)" ]; then echo "\"mount\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v mountpoint)" ]; then echo "\"mountpoint\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v realpath)" ]; then echo "\"realpath\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v rm)" ]; then echo "\"rm\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v sed)" ]; then echo "\"sed\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v sha256sum)" ]; then echo "\"sha256sum\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v tar)" ]; then echo "\"tar\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v touch)" ]; then echo "\"touch\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v tr)" ]; then echo "\"tr\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v umount)" ]; then echo "\"umount\" binary needs to be installed first."; exit 1; fi
if [ -z "$(command -v xz)" ]; then echo "\"xz\" binary needs to be installed first."; exit 1; fi
if [ $(whoami) != "root" ]; then echo "Please run with this script with sudo."; exit 1; fi
}

create_cache_directory()
{
linuxloopsdir="$(eval echo ~${SUDO_USER})"/.cache/linuxloops
mkdir -p "${linuxloopsdir}"/tmp
chown ${SUDO_USER}:$(id -g ${SUDO_UID}) "${linuxloopsdir}" "${linuxloopsdir}/tmp"
chmod 0755 "${linuxloopsdir}" "${linuxloopsdir}/tmp"
}

set_base_parameters()
{
if [ -d /home/runner/work ]; then github=1; fi
if grep -qi 'Microsoft' /proc/version; then wsl=1; fi
if [ -z "${wsl}" ] && [ -f /etc/NIXOS ]; then nixos=1; fi
if [ "$(grep -o 'NAME=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "Chrome OS" ]; then if [ -f /etc/brunch_version ]; then brunch=1; else chromeos=1; fi; fi
}

set +H
set_base_parameters
if [[ $EUID -ne 0 ]]; then
	if [ ! -z "${nixos}" ] && [ ${#} -eq 0 ]; then
        	exec sudo nix-shell -p bash curl gnupg1 sudo util-linux xz gtk3 glib-networking python3Packages.pygobject3 webkitgtk_4_1 --run "GIO_MODULE_DIR=\$(nix eval -f '<nixpkgs>' --raw 'glib-networking')/lib/gio/modules XDG_DATA_DIRS=\$XDG_DATA_DIRS:\$GSETTINGS_SCHEMAS_PATH:\$XDG_ICON_DIRS bash $0"
	else
		exec sudo --preserve-env=DISPLAY,WAYLAND_DISPLAY,XAUTHORITY,XDG_RUNTIME_DIR bash "$0" "$@"
	fi
fi
if [ -z ${SUDO_UID} ]; then
	SUDO_USER=${USER}
	SUDO_UID=$(id -g ${USER})
fi
create_cache_directory
if [ ${#} -eq 0 ] || ([ ${#} -eq 2 ] && [ "${1}" == "-G" ]) || ([ ${#} -eq 2 ] && [ "${1}" == "--generate-config" ]); then
	if ([ ${#} -eq 2 ] && [ "${1}" == "-G" ]) || ([ ${#} -eq 2 ] && [ "${1}" == "--generate-config" ]); then
		if [ -z "${2}" ]; then echo -e "Please provide a path for the generated config."; exit 1; fi
		if ! echo "${2}" | grep -Eq '/[a-zA-Z0-9_/-]*$'; then echo -e "The path for the generated config contains unsupported characters."; exit 1; fi
		if [[ "${2}" == *"/"* ]] && ([ -z "$(realpath ${2} 2> /dev/null)" ] || [ ! -d "$(echo $(realpath ${2}) | sed 's![^/]*$!!')" ]); then echo "The path for the generated config does not exist, please provide an existing path."; exit 1; fi
		generate_config="${2}"
	fi
	if [ -z "$(command -v python3)" ]; then echo "To use the GUI installer you need to install the \"python3\" package."; exit 1; fi
	if [ -z "$(python3 -V 2>/dev/null | cut -d' ' -f2 | cut -d'.' -f1)$(python3 -V 2>/dev/null | cut -d' ' -f2 | cut -d'.' -f2)" ] || [ $(python3 -V 2>/dev/null | cut -d' ' -f2 | cut -d'.' -f1)$(python3 -V 2>/dev/null | cut -d' ' -f2 | cut -d'.' -f2) -lt 310 ]; then echo "Please install python version 3.10 or above."; exit 1; fi
	if ! python3 -c "import venv" 2>/dev/null; then echo "Please install python3-venv package."; exit 1; fi
	gui=1
	check_dependencies
	if ! curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/sebanc/linuxloops > /dev/null 2>&1; then echo -e "Internet connection not available, please make sure you are connected to the internet."; exit 1; fi
	gui_installer
else
	while [ ${#} -gt 0 ]; do
		case "${1}" in
			-distro | --distribution)
				shift
				distribution="${1}"
			;;
			-ver | --version)
				shift
				version="${1}"
			;;
			-env | --environment)
				shift
				environment="${1}"
			;;
			-dst | --destination)
				shift
				destination="${1}"
			;;
			-s | --size)
				shift
				install_size="${1}"
			;;
			-z | --swapsize)
				shift
				swap_size="${1}"
			;;
			-a | --autologin)
				useraccount_autologin="Yes"
			;;
			--efi-name)
				shift
				efi_name="${1}"
			;;
			--efi-mountoptions)
				shift
				efi_mountoptions="${1}"
			;;
			--boot-name)
				shift
				boot_name="${1}"
			;;
			--boot-mountoptions)
				shift
				boot_mountoptions="${1}"
			;;
			--root-name)
				shift
				root_name="${1}"
			;;
			--root-mountoptions)
				shift
				root_mountoptions="${1}"
			;;
			-A | --add-partition)
				shift
				if [ -z "${partition4}" ]; then
					partition4="${1}"
				elif [ -z "${partition5}" ]; then
					partition5="${1}"
				elif [ -z "${partition6}" ]; then
					partition6="${1}"
				elif [ -z "${partition7}" ]; then
					partition7="${1}"
				elif [ -z "${partition8}" ]; then
					partition8="${1}"
				else
					echo "Linuxloops supports a maximum of 8 partitions."
					exit 1
				fi
			;;
			-b | --btrfs)
				root_fstype="btrfs"
			;;
			-r | --rootfs-compression)
				root_fstype="btrfs"
				root_compression="Yes"
			;;
			-e | --encrypt)
				root_encryption="Yes"
			;;
			-H | --hostname)
				shift
				hostname="${1}"
			;;
			-L | --locale)
				shift
				locale="${1}"
			;;
			-K | --keymap)
				shift
				keymap="${1}"
			;;
			-T | --timezone)
				shift
				timezone="${1}"
			;;
			-n | --nvidia)
				nvidia="Yes"
			;;
			-S | --surface)
				surface="Yes"
			;;
			-c | --custom-packages)
				shift
				custom_packages="${1}"
			;;
			-C | --custom-script)
				shift
				custom_script="$(sudo -u ${SUDO_USER} echo $(realpath ${1}))"
			;;
			-k | --kernel-parameters)
				shift
				kernel_parameters="${1}"
			;;
			-m | --custom-mirror)
				shift
				if [ -z "${distribution}" ]; then echo "Distribution and version parameters need to be provided."; exit 1; fi
				if [[ ! " ${available_distributions[*]} " =~ " ${distribution} " ]]; then echo -e "Please select a distribution from the below list:"; list_array "available_distributions"; exit 1; fi
				distribution_parameters
				if [[ ! " ${available_versions[*]} " =~ " ${version} " ]]; then echo -e "Please select a version from the below list:"; list_array "available_versions"; exit 1; fi
				distribution_version_parameters
				if [ "${1}" == "$(echo ${1} | cut -d'*' -f2)" ]; then echo "Please specify the repository name and the mirror separated with \"*\" such as \"Arch*https://mirrors.kernel.org/archlinux\"."; exit 1; fi
				if ! echo "$(echo ${1} | cut -d'*' -f2)" | grep -Eq '^(http|https)://[a-zA-Z0-9./?=_%:-]*'; then echo "Mirror should start by \"http://\" or \"https://\"."; exit 1; fi
				set_mirror "$(echo ${1} | cut -d'*' -f1)" "$(echo ${1} | cut -d'*' -f2)" || { echo "${1} mirror is either invalid or offline."; exit 1; }
			;;
			-p | --user-password-for-encryption)
				user_password_for_encryption="Yes"
			;;
			-g | --grub-hide)
				grub_hide="Yes"
			;;
			-G | --generate-declarative-config)
				shift
				if [ -z "${1}" ]; then echo -e "Please provide a path for the generated config."; exit 1; fi
				if ! echo "${1}" | grep -Eq '/[a-zA-Z0-9_/-]*$'; then echo -e "The path for the generated config contains unsupported characters."; exit 1; fi
				if [[ "${1}" == *"/"* ]] && ([ -z "$(realpath ${1} 2> /dev/null)" ] || [ ! -d "$(echo $(realpath ${1}) | sed 's![^/]*$!!')" ]); then echo "The path for the generated config does not exist, please provide an existing path."; exit 1; fi
				generate_config="${1}"
			;;
			-d | --apply-declarative-config)
				shift
				declarative="Yes"
				declarative_config="${1}"
			;;
			-l | --list)
				list_array "all"
				exit 0
			;;
			-lb | --list-btrfs)
				if [ -z "${distribution}" ]; then echo "Distribution and version parameters need to be provided."; exit 1; fi
				if [[ ! " ${available_distributions[*]} " =~ " ${distribution} " ]]; then echo -e "Please select a distribution from the below list:"; list_array "available_distributions"; exit 1; fi
				distribution_parameters
				if [[ ! " ${available_versions[*]} " =~ " ${version} " ]]; then echo -e "Please select a version from the below list:"; list_array "available_versions"; exit 1; fi
				distribution_version_parameters
				echo -e ${btrfs_supported}
				exit 0
			;;
			-ld | --list-distributions)
				echo -e $(list_array "available_distributions" | sed -e 's@\n@ @g')
				exit 0
			;;
			-le | --list-environments)
				if [ -z "${distribution}" ]; then echo "Distribution and version parameters need to be provided."; exit 1; fi
				if [[ ! " ${available_distributions[*]} " =~ " ${distribution} " ]]; then echo -e "Please select a distribution from the below list:"; list_array "available_distributions"; exit 1; fi
				distribution_parameters
				if [[ ! " ${available_versions[*]} " =~ " ${version} " ]]; then echo -e "Please select a version from the below list:"; list_array "available_versions"; exit 1; fi
				distribution_version_parameters
				echo -e $(list_array "available_environments" | sed -e 's@\n@ @g')
				exit 0
			;;
			-ll | --list-locales)
				echo -e "Available locales:\n"$(list_array "available_locales" | sed -e 's@\n@ @g')
				exit 0
			;;
			-lk | --list-keympas)
				echo -e "Available keymaps:\n"$(list_array "available_keymaps" | sed -e 's@\n@ @g')
				exit 0
			;;
			-ln | --list-nvidia)
				if [ -z "${distribution}" ]; then echo "Distribution and version parameters need to be provided."; exit 1; fi
				if [[ ! " ${available_distributions[*]} " =~ " ${distribution} " ]]; then echo -e "Please select a distribution from the below list:"; list_array "available_distributions"; exit 1; fi
				distribution_parameters
				if [[ ! " ${available_versions[*]} " =~ " ${version} " ]]; then echo -e "Please select a version from the below list:"; list_array "available_versions"; exit 1; fi
				distribution_version_parameters
				echo -e ${nvidia_supported}
				exit 0
			;;
			-ls | --list-surface)
				if [ -z "${distribution}" ]; then echo "Distribution and version parameters need to be provided."; exit 1; fi
				if [[ ! " ${available_distributions[*]} " =~ " ${distribution} " ]]; then echo -e "Please select a distribution from the below list:"; list_array "available_distributions"; exit 1; fi
				distribution_parameters
				if [[ ! " ${available_versions[*]} " =~ " ${version} " ]]; then echo -e "Please select a version from the below list:"; list_array "available_versions"; exit 1; fi
				distribution_version_parameters
				echo -e ${surface_supported}
				exit 0
			;;
			-lt | --list-timezones)
				echo -e "Available timezones:\n"$(list_array "available_timezones" | sed -e 's@\n@ @g')
				exit 0
			;;
			-lv | --list-versions)
				if [ -z "${distribution}" ]; then echo "Distribution parameter needs to be provided."; exit 1; fi
				if [[ ! " ${available_distributions[*]} " =~ " ${distribution} " ]]; then echo -e "Please select a distribution from the below list:"; list_array "available_distributions"; exit 1; fi
				distribution_parameters
				echo -e $(list_array "available_versions" | sed -e 's@\n@ @g')
				exit 0
			;;
			-h | --help)
				usage
				exit 0
			;;
			-t | --test)
				test_distribution="Yes"
			;;
			-u | --usb-live)
				live="Yes"
			;;
			*)
				echo "${1} argument is not valid"
				usage
				exit 1
			;;
		esac
		shift
	done
	check_dependencies
	if ! curl --progress-bar --connect-timeout 60 --retry 10 --retry-delay 1 -L -f https://github.com/sebanc/linuxloops > /dev/null 2>&1; then echo -e "Internet connection not available, please make sure you are connected to the internet."; exit 1; fi
	cli_installer
fi
